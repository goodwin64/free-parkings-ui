{"version":3,"sources":["components/ToggleSwitch/ToggleSwitch.tsx","containers/AllUsersPage/UserRow.tsx","store/allUsers/selectors.ts","containers/AllUsersPage/AllUsersPage.styled.ts","containers/AllUsersPage/AllUsersPage.tsx"],"names":["__webpack_require__","d","__webpack_exports__","ToggleSwitchColorScheme3","ToggleSwitch","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ToggleSwitchColorScheme1","props","a","createElement","className","concat","disabled","type","id","onChange","e","target","checked","defaultChecked","isOnByDefault","colorScheme","value1","value2","defaultProps","UserRow","react_default","width","src","avatarUrl","alt","username","fullname","gender","defaultCountry","isAdmin","setUserRole","USER_ROLE_ADMIN","USER_ROLE_DRIVER","role","Container","styled","PageWrapper","_templateObject","mapStateToProps","createStructuredSelector","users","state","allUsers","isInProgress","mapDispatchToProps","loadAllUsersAttempt","setUserRoleAttempt","withConnect","connect","compose","React","useEffect","map","user","Object","assign","key"],"mappings":"0FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GASaG,GATbR,EAAA,KASsD,aAEzCG,EAAyC,cA4BvC,SAASC,EAAaK,GAKnC,OACEH,EAAAI,EAAAC,cAAA,SAAOC,UAAS,UAAAC,OAAYJ,EAAMK,SAAW,WAAa,KACxDR,EAAAI,EAAAC,cAAA,SACEI,KAAK,WACLC,GAAG,SACHC,SATgB,SAACC,GACrBT,EAAMQ,SAASC,EAAEC,OAAOC,UASpBC,eAAgBZ,EAAMa,gBAExBhB,EAAAI,EAAAC,cAAA,OAAKC,UAAS,gBAAAC,OAAkBJ,EAAMc,YAAcd,EAAMc,YAAcf,IACtEF,EAAAI,EAAAC,cAAA,QAAMC,UAAU,OAAOH,EAAMe,QAC7BlB,EAAAI,EAAAC,cAAA,QAAMC,UAAU,MAAMH,EAAMgB,UAvBpCrB,EAAasB,aAAe,CAC1BF,OAAQ,GACRC,OAAQ,GACRF,YAAaf,EACbc,eAAe,EACfR,UAAU,8HCxBG,SAASa,EAAQlB,GAG9B,OACEmB,EAAAlB,EAAAC,cAAA,UACEiB,EAAAlB,EAAAC,cAAA,UAAKF,EAAMO,IACXY,EAAAlB,EAAAC,cAAA,UAAIiB,EAAAlB,EAAAC,cAAA,OAAKkB,MAAO,GAAIC,IAAKrB,EAAMsB,UAAWC,IAAG,QAAAnB,OAAUJ,EAAMO,GAAhB,cAC7CY,EAAAlB,EAAAC,cAAA,UAAKF,EAAMwB,UACXL,EAAAlB,EAAAC,cAAA,UAAKF,EAAMyB,UACXN,EAAAlB,EAAAC,cAAA,UAAKF,EAAM0B,QACXP,EAAAlB,EAAAC,cAAA,UAAKF,EAAM2B,gBACXR,EAAAlB,EAAAC,cAAA,UACEiB,EAAAlB,EAAAC,cAACP,EAAA,EAAD,CACEoB,OAAO,SACPC,OAAO,QACPR,SAdiB,SAACoB,GAAD,OAAsB5B,EAAM6B,YAAY7B,EAAMO,GAAIqB,EAAUE,IAAkBC,MAe/FlB,cAAeb,EAAMgC,OAASF,QC1BjC,49BCGA,IAAMG,EAAYC,YAAOC,IAAPD,CAAHE,KCsDtB,IAAMC,EAAkBC,YAA4D,CAClFC,MF1D8B,SAACC,GAAD,OAAwBA,EAAMC,SAASF,OE2DrEG,aFzD8C,SAACF,GAAD,OAAwBA,EAAMC,SAASC,gBE4DjFC,EAAgD,CACpDC,wBACAf,YAAagB,KAGTC,EAAcC,YAAQV,EAAiBM,GAE9BK,4BACbF,EADaE,CAhDf,SAAsBhD,GAKpB,OAJAiD,IAAMC,UAAU,WACdlD,EAAM4C,uBACL,IAGDzB,EAAAlB,EAAAC,cAAC+B,EAAD,KACEd,EAAAlB,EAAAC,cAAA,uBACAiB,EAAAlB,EAAAC,cAAA,aACEiB,EAAAlB,EAAAC,cAAA,aACEiB,EAAAlB,EAAAC,cAAA,UACEiB,EAAAlB,EAAAC,cAAA,gBACAiB,EAAAlB,EAAAC,cAAA,uBACAiB,EAAAlB,EAAAC,cAAA,sBACAiB,EAAAlB,EAAAC,cAAA,sBACAiB,EAAAlB,EAAAC,cAAA,oBACAiB,EAAAlB,EAAAC,cAAA,4BACAiB,EAAAlB,EAAAC,cAAA,oBAGJiB,EAAAlB,EAAAC,cAAA,aAEEF,EAAMuC,MAAMY,IAAI,SAAAC,GAAI,OAClBjC,EAAAlB,EAAAC,cAACgB,EAADmC,OAAAC,OAAA,CACEC,IAAKH,EAAK7C,IACN6C,EAFN,CAGEvB,YAAa7B,EAAM6B","file":"static/js/3.dac82f11.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ToggleSwitch.global.css';\n\ntype ColorScheme1 = 'red-green';\ntype ColorScheme2 = 'black-white';\ntype ColorScheme3 = 'orange-blue';\n\nexport const ToggleSwitchColorScheme1: ColorScheme1 = 'red-green';\nexport const ToggleSwitchColorScheme2: ColorScheme2 = 'black-white';\nexport const ToggleSwitchColorScheme3: ColorScheme3 = 'orange-blue';\n\ninterface ToggleSwitchProps {\n  value1?: string,\n  value2?: string,\n  onChange: (value: boolean) => void,\n  colorScheme?: ColorScheme1 | ColorScheme2 | ColorScheme3,\n  isOnByDefault?: boolean,\n  disabled?: boolean,\n}\n\nToggleSwitch.propTypes = {\n  value1: PropTypes.string,\n  value2: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  colorScheme: PropTypes.oneOf([ToggleSwitchColorScheme1, ToggleSwitchColorScheme2, ToggleSwitchColorScheme3]),\n  isOnByDefault: PropTypes.bool,\n  disabled: PropTypes.bool,\n};\n\nToggleSwitch.defaultProps = {\n  value1: '',\n  value2: '',\n  colorScheme: ToggleSwitchColorScheme1,\n  isOnByDefault: false,\n  disabled: false,\n};\n\nexport default function ToggleSwitch(props: ToggleSwitchProps) {\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked);\n  };\n\n  return (\n    <label className={`switch ${props.disabled ? 'disabled' : ''}`}>\n      <input\n        type=\"checkbox\"\n        id=\"togBtn\"\n        onChange={onInputChange}\n        defaultChecked={props.isOnByDefault}\n      />\n      <div className={`slider round ${props.colorScheme ? props.colorScheme : ToggleSwitchColorScheme1}`}>\n        <span className=\"off\">{props.value1}</span>\n        <span className=\"on\">{props.value2}</span>\n      </div>\n    </label>\n  )\n}","import React from 'react';\n\nimport { UserInfo } from '../../interfaces/UserInfo';\nimport ToggleSwitch from '../../components/ToggleSwitch/ToggleSwitch';\nimport { USER_ROLE_ADMIN, USER_ROLE_DRIVER } from '../../store/userState/reducer';\nimport { setUserRoleAttemptActionCreator } from '../../store/allUsers/actions';\n\n\ninterface UserRowProps extends UserInfo {\n  setUserRole: setUserRoleAttemptActionCreator,\n}\n\nexport default function UserRow(props: UserRowProps) {\n  const onUserRoleChange = (isAdmin: boolean) => props.setUserRole(props.id, isAdmin ? USER_ROLE_ADMIN : USER_ROLE_DRIVER);\n\n  return (\n    <tr>\n      <td>{props.id}</td>\n      <td><img width={50} src={props.avatarUrl} alt={`user ${props.id} avatar`}/></td>\n      <td>{props.username}</td>\n      <td>{props.fullname}</td>\n      <td>{props.gender}</td>\n      <td>{props.defaultCountry}</td>\n      <td>\n        <ToggleSwitch\n          value1=\"driver\"\n          value2=\"admin\"\n          onChange={onUserRoleChange}\n          isOnByDefault={props.role === USER_ROLE_ADMIN}\n        />\n      </td>\n    </tr>\n  );\n}\n","import { RootReducer } from '../rootReducer';\n\nexport const allUsersSelector = (state: RootReducer) => state.allUsers.users;\n\nexport const allUsersPageIsInProgressSelector = (state: RootReducer) => state.allUsers.isInProgress;\n","import styled from 'styled-components';\n\nimport { PageWrapper } from '../../components/CommonStyled/commonStyled';\n\n\nexport const Container = styled(PageWrapper)`\n  & table {\n    border-collapse: collapse;\n    background: white;\n    border-radius: 10px;\n    overflow: hidden;\n    width: 100%;\n    margin: 0 auto;\n    position: relative;\n  }\n  \n  & table td, & table th {\n    padding-left: 8px;\n    text-align: center;\n  }\n  \n  & table tr th:first-child,\n  & table tr td:first-child {\n    padding-left: 40px;\n  }\n  \n  & table tr th:last-child,\n  & table tr td:last-child {\n    padding-right: 40px;\n  }\n  \n  & table thead tr {\n    height: 60px;\n    background: #36304a;\n  }\n  \n  & table thead tr th {\n    font-size: 18px;\n    color: #fff;\n    line-height: 1.2;\n    font-weight: unset;\n  }\n  \n  & table tbody tr {\n    height: 50px;\n    font-size: 15px;\n    color: #808080;\n    line-height: 1.2;\n    font-weight: unset;\n  }\n  \n  & table tbody tr:nth-child(even) {\n    background-color: #f5f5f5;\n  }\n`;\n","import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport UserRow from './UserRow';\nimport { RootReducer } from '../../store/rootReducer';\nimport * as actions from '../../store/allUsers/actions';\nimport * as selectors from '../../store/allUsers/selectors';\nimport { AllUsersPageOwnProps } from '../../store/allUsers/reducer';\nimport { loadAllUsersAttempt, setUserRoleAttempt } from '../../store/allUsers/actions';\nimport * as styled from './AllUsersPage.styled';\n\n\ninterface AllUsersPageDispatchProps {\n  loadAllUsersAttempt: actions.loadAllUsersAttemptActionCreator,\n  setUserRole: actions.setUserRoleAttemptActionCreator,\n}\n\ninterface AllUsersPageProps extends AllUsersPageOwnProps,\n  AllUsersPageDispatchProps {\n}\n\nfunction AllUsersPage(props: AllUsersPageProps) {\n  React.useEffect(() => {\n    props.loadAllUsersAttempt();\n  }, []);\n\n  return (\n    <styled.Container>\n      <h1>all users</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>id</th>\n            <th>avatarUrl</th>\n            <th>username</th>\n            <th>fullname</th>\n            <th>gender</th>\n            <th>defaultCountry</th>\n            <th>role</th>\n          </tr>\n        </thead>\n        <tbody>\n        {\n          props.users.map(user => (\n            <UserRow\n              key={user.id}\n              {...user}\n              setUserRole={props.setUserRole}\n            />\n          ))\n        }\n        </tbody>\n      </table>\n    </styled.Container>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector<RootReducer, AllUsersPageOwnProps>({\n  users: selectors.allUsersSelector,\n  isInProgress: selectors.allUsersPageIsInProgressSelector,\n});\n\nconst mapDispatchToProps: AllUsersPageDispatchProps = {\n  loadAllUsersAttempt,\n  setUserRole: setUserRoleAttempt,\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(\n  withConnect,\n)(AllUsersPage);\n"],"sourceRoot":""}
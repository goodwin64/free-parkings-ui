{"version":3,"sources":["containers/App/constants.ts","containers/App/App.module.css","assets/images/findParking.png","assets/images/myAccount.svg","assets/images/myDrives.png","assets/images/defaultUserIcon.svg","store/userState/reducer.ts","assets/audio/parking-found.mp3","store/car/constants.ts","components/Header/Header.tsx","HOCs/ProtectedRoute.jsx","containers/App/App.tsx","serviceWorker.js","store/parkings/adapters.ts","constants/backend.ts","utils/serialize.ts","services/GeoLocation.service.ts","services/Authentication.service.ts","services/AudioService.ts","store/parkingSettings/saga.ts","store/parkings/saga.ts","services/LocalStorage.service.ts","store/userState/adapters.ts","store/userState/saga.ts","store/car/adapters.ts","store/car/saga.ts","store/rootSaga.ts","containers/BaseConfigPage/BaseConfigReducer.ts","store/parkings/reducer.ts","store/car/reducer.ts","store/parkingSettings/reducer.ts","store/rootReducer.ts","store/history.ts","themes.styled.ts","index.tsx","store/configureStore.ts","store/userState/constants.ts","store/userState/selectors.ts","components/Header/Header.module.css","containers/BaseConfigPage/BaseConfigConstants.ts","store/userState/actions.ts","store/parkings/actions.ts","store/car/actions.ts","containers/BaseConfigPage/BaseConfigSelectors.ts","store/parkingSettings/constants.ts","store/parkings/selectors.ts","store/parkingSettings/selectors.ts","store/parkings/constants.ts","services/Images.service.ts","store/car/selectors.ts","services/Url.service.ts"],"names":["__webpack_require__","d","__webpack_exports__","INIT_USER_AUTH_INFO_ON_LOAD","INIT_USER_INFO_ON_LOAD","NOT_ALLOWED_WITH_GUEST_PERMISSION","USER_SIGN_IN_ATTEMPT","USER_SIGN_IN_SUCCESS","USER_SIGN_IN_ERROR","USER_SIGN_OUT_ATTEMPT","USER_SIGN_OUT_SUCCESS","USER_SIGN_OUT_ERROR","USER_SIGN_UP_ATTEMPT","USER_SIGN_UP_SUCCESS","USER_SIGN_UP_ERROR","module","exports","AppContainer","p","USER_ROLE_GUEST","USER_ROLE_ADMIN","USER_ROLE_DRIVER","USER_GENDER_NOT_APPLIED","POSSIBLE_GENDER_LIST","userInitialState","id","isLoginInProgress","isSignupInProgress","isLoginError","signupError","isAuthorized","role","avatarUrl","username","fullname","defaultCountry","userReducer","state","arguments","length","undefined","action","type","Object","_home_travis_build_goodwin64_free_parkings_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","payload","gender","USER_UPDATE_AVATAR","USER_UPDATE_USERNAME","USER_UPDATE_FULLNAME","USER_UPDATE_GENDER","USER_UPDATE_DEFAULT_COUNTRY","LOAD_CAR_PARAMETERS_ATTEMPT","LOAD_CAR_PARAMETERS_SUCCESS","LOAD_CAR_PARAMETERS_ERROR","LOAD_CAR_PARAMETERS_RESET","UPDATE_CAR_PARAMETER_VALUE_ATTEMPT","UPDATE_CAR_PARAMETER_VALUE_SUCCESS","UPDATE_CAR_PARAMETER_VALUE_ERROR","LOAD_CAR_MANUFACTURERS_ATTEMPT","LOAD_CAR_MANUFACTURERS_SUCCESS","LOAD_CAR_MANUFACTURERS_ERROR","Header","react_default","a","createElement","react_router_dom","to","UrlService","detectPageByUserInfo","this","props","user","className","styles","configPageUrl","loginPageUrl","onClick","userSignOut","src","ImagesService","commonImages","defaultUserIcon","alt","renderUserActionsDropdown","renderLogo","renderUserPanel","React","PureComponent","mapStateToProps","createStructuredSelector","userInfoSelector","mapDispatchToProps","userSignOutAttempt","withConnect","connect","compose","ProtectedRoute","_ref","Component","component","allowed","_ref$RedirectComponen","RedirectComponent","_ref$redirectPath","redirectPath","rest","objectWithoutProperties","react_router","assign","render","pathname","from","location","defaultProps","redirectComponent","LoginPage","lazy","e","then","bind","SignupPage","ParkingsPage","Promise","all","DashboardPage","UserSettingsPage","App","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","css","components_Header_Header","Suspense","fallback","HOCs_ProtectedRoute","path","isRouteAllowed","userInfo","loginPageRolesAllowed","signupPageUrl","signupPageRolesAllowed","parkingsPageUrl","parkingsPageRolesAllowed","dashboardPageUrl","dashboardPageRolesAllowed","settingsPageUrl","settingsPageRolesAllowed","myDrivesPageUrl","myDrivesPageRolesAllowed","exact","isUserAuthorized","isUserAuthorizedSelector","Boolean","window","hostname","match","prepareParkings","rawResponseParkings","preparedResponse","Array","isArray","map","prepareParkopediaParkingSlot","parkingSlot","prepareParkingParametersFromClientToServer","rawParkingParameters","rawGeometry","parkingsGeoJsonSource","isLatLon","parkingLength","width","parkingWidth","height","parkingHeight","restParameters","geometry","rawParkingGeometry","parkingPoints","split","rawParkingPoint","_rawParkingPoint$spli","s","parseFloat","trim","_rawParkingPoint$spli2","slicedToArray","lat","lon","prepareUserInputParkingPoint","filter","isValidPoint","prepareUserInputParkingGeometry","objectSpread","pointGeometry","every","isFinite","backendEndpoint","serialize","obj","prefix","str","hasOwnProperty","k","v","push","encodeURIComponent","join","GeoLocation_service","getUserLocation","resolve","reject","navigator","geolocation","getCurrentPosition","error","watchUserLocation","watchPosition","getUserLatLon","coords","latitude","longitude","requestToFreeParkingsAPI","checkStatus","response","status","parseJSON","json","url","options","accessToken","_args","regenerator_default","wrap","_context","prev","next","select","userAccessTokenSelector","sent","fetch","headers","Content-Type","access_token","abrupt","stop","_marked","parkingIsFoundPath","require","AudioService","startCheckingParkopediaUpdatesSaga","parkingVoiceNotification","defaultParkingSettingsSaga","checkParkopediaUpdatesTimer","isParkingAutoSearchEnabled","isParkingAutoSearchEnabledSelector","call","checkForParkopediaUpdates","delay","saga_marked","stopCheckingParkopediaUpdatesSaga","preparedResponseParkings","_context2","areVoiceNotificationsEnabledSelector","Audio","play","_marked2","_context3","takeLatest","parkingSettinsConstants","_marked3","fetchParkingsSaga","updateUrlLatLonSaga","synchronizeLatLonSaga","clearAllFreeSlotsSaga","clearVisibleFreeSlotsSaga","detectGeoLocationSaga","createParkingSaga","updateParkingSaga","postParkingSaga","deleteParkingSaga","defaultParkingsSaga","searchRadius","canFetchParkings","searchQuery","centerCoordinatesSelector","searchRadiusSelector","MAX_SEARCH_RADIUS_TO_FETCH","put","ParkingsPageActions","radius","concat","t0","console","parkings_saga_marked","search","saga_marked2","_ref2","latFromUrl","lonFromUrl","latLonSelector","setParkingsPageCenter","saga_marked3","_context4","fetchParkingsRequest","_marked4","_context5","method","_marked5","_ref3","uid","_context6","sessionUidSelector","body","JSON","stringify","Accept","_marked6","_ref4","_context7","GeoLocationService","_marked7","preparedParkingParameters","createdParking","_context8","_marked8","_context9","_marked9","parking","_context10","postParkingSuccess","postParkingError","_marked10","parkingId","_context11","_marked11","_context12","throttle","parkingsConstants","takeEvery","_marked12","updateUserInfoLocallySaga","LocalStorageService","userAuthInfoJSON","localStorage","getItem","parse","getUserInfo","info","setItem","removeItem","saveUserInfoRequiredForAuth","LocalStorage_service_marked","userInfoAdapter","loginInfo","name","personalInfo","surname","redirectToPageByRole","signinUserAttemptSaga","signinUserSuccessSaga","signoutUserSuccessSaga","signoutUserAttemptSaga","loadUserInfoByAccessToken","initUserInfoOnLoadSaga","signupUserAttemptSaga","signupUserSuccessSaga","updatePersonalInfoField","updateAvatarSaga","updateUsernameSaga","updateFullnameSaga","updateGenderSaga","updateDefaultCountrySaga","userState_saga_marked","_action$payload","password","signinUserSuccess","signinUserError","userState_saga_marked2","userState_saga_marked3","loadCarParametersReset","removeUserInfo","saga_marked4","userSignOutSuccess","saga_marked5","userId","userIdSelector","initUserInfoOnLoad","saga_marked6","userInfoRequiredForAuth","getUserInfoRequiredForAuth","initUserAuthInfoOnLoad","saga_marked7","_action$payload2","errorData","errorMessage","signupUserSuccess","err","isString","message","signupUserError","saga_marked8","alert","saga_marked9","defineProperty","saga_marked10","saga_marked11","saga_marked12","_context13","_marked13","_context14","_marked14","_context15","_marked15","defaultLoginPageSaga","mark","_context16","prepareCarInfo","rawCarInfo","isObject","loadCarDataIfAbsent","updateCarParameterValueSaga","loadCarManufacturers","defaultCarPageSaga","carPageIsCached","preparedCarInfo","carPageIsCachedSelector","loadCarParametersSuccess","loadCarParametersError","car_saga_marked","paramKey","paramValue","updateCarParameterValueSuccess","updateCarParameterValueError","car_saga_marked2","manufacturersList","loadCarManufacturersAttempt","loadCarManufacturersSuccess","loadCarManufacturersError","car_saga_marked3","t1","t2","t3","t4","car_saga_marked4","initSaga","rootSaga_marked","BaseConfigInitialState","parkingSearchRadius","BaseConfigConstants","startPointLat","startPointLon","defaultZoomLevel","sessionUid","String","Math","random","slice","isSidebarOpen","baseConfigReducer","ParkingsPageInitialState","centerLat","centerLon","zoomLevel","lastParkingsCheckTimestamp","lastParkingsCheckUpdatesCount","isFetchInProgress","wasFetchPerformed","allParkings","freeParkings","reducer","CHANGE_CENTER_LOCATION","CHANGE_ZOOM_LEVEL","PARKINGS_REQUEST_FOR_FETCH","PARKINGS_FETCH_START","PARKINGS_FETCH_SUCCESS","uniqBy","toConsumableArray","POST_PARKING_ATTEMPT","POST_PARKING_SUCCESS","CHECK_PARKOPEDIA_UPDATES_SUCCESS","timestamp","updatesCount","DELETE_PARKING","DELETE_ALL_FREE_SLOTS","carPageInitialState","isInProgress","isError","isCached","carManufacturers","carInfo","carPageReducer","parkingSettingsInitialState","areVoiceNotificationsEnabled","parkingSettingsReducer","constants","createRootReducer","history","combineReducers","router","connectRouter","config","parkingsPage","parkingsPageReducer","car","parkingSettings","createBrowserHistory","lightTheme","borderColor","store","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","run","initialSaga","configureStore","ReactDOM","es","esm","styled_components_browser_esm","theme","containers_App_App","document","getElementById","serviceWorker","ready","registration","unregister","areCredentialsInvalidSelector","signupErrorSelector","isSigninAttemptInProgressSelector","isSignupAttemptInProgressSelector","usernameSelector","avatarUrlSelector","HeaderContainer","HeaderLogo","HeaderLogoFull","HeaderUserPanel","HeaderUserPanelAvatar","HeaderUserActionsDropdownList","HeaderUserActionsDropdownListDivider","HeaderUserActionsDropdownLink","BASE_CONFIG_RADIUS_SET","BASE_CONFIG_RADIUS_RESET","BASE_CONFIG_OPEN_SIDEBAR","BASE_CONFIG_CLOSE_SIDEBAR","INITIAL_SEARCH_RADIUS","KYIV_CENTER_LAT","KYIV_CENTER_LON","DEFAULT_ZOOM_LEVEL","signinUserAttempt","signupUserAttempt","updateAvatar","updateUsername","updateFullname","updateGender","updateDefaultCountry","typesafe_actions__WEBPACK_IMPORTED_MODULE_0__","_containers_App_constants__WEBPACK_IMPORTED_MODULE_1__","_constants__WEBPACK_IMPORTED_MODULE_2__","userAuthInfo","country","setZoomLevel","fetchParkingsStart","synchronizeLatLon","fetchParkingsSuccess","checkParkopediaUpdatesRequest","postParkingAttempt","deleteParking","deleteAllFreeSlots","deleteVisibleFreeSlots","askPermissionForGeoLocation","_constants__WEBPACK_IMPORTED_MODULE_1__","SYNCHRONIZE_LAT_LON","parkings","CHECK_PARKOPEDIA_UPDATES_REQUEST","parkingCreated","POST_PARKING_ERROR","DELETE_VISIBLE_FREE_SLOTS","ASK_PERMISSION_FOR_GEO_LOCATION","loadCarParametersAttempt","updateCarParameterValueAttempt","isSearchRadiusTooBigSelector","defaultLatLonSelector","isSidebarOpenSelector","reselect__WEBPACK_IMPORTED_MODULE_0__","_BaseConfigConstants__WEBPACK_IMPORTED_MODULE_1__","configDomainSelector","createSelector","configDomain","SET_VOICE_NOTIFICATIONS","START_CHECKING_PARKOPEDIA_UPDATES","STOP_CHECKING_PARKOPEDIA_UPDATES","SET_CHECKING_PARKOPEDIA_UPDATES","routeParamsSelector","params","decodeURI","reduce","currPair","_currPair$split","_currPair$split2","_home_travis_build_goodwin64_free_parkings_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_goodwin64_free_parkings_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_home_travis_build_goodwin64_free_parkings_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","defaultLatLon","Number","zoomLevelSelector","parkingsPageDomainSelector","allParkingsSelector","parkingsPageDomain","freeParkingsSelector","isParkingFetchInProgressSelector","wasFetchPerformedSelector","centerCoordinatesLatitudeSelector","centerCoordinates","centerCoordinatesLongitudeSelector","selectedParkingSelector","_","routerProps","selectedParkingId","find","file","reader","FileReader","readAsDataURL","onload","result","onerror","catch","driverImages","findParkings","myAccount","myDrives","carInfoSelector","carManufacturersSelector","carPageIsInProgressSelector","carPageIsErrorSelector","rootUrl","Set","configPageRolesAllowed","findParkingsPageUrl","findParkingsPageRolesAllowed","createParkingPageUrl","editParkingPageUrl","editParkingPageUrlWithParams","editParkingPageUrlRoute","routeRolesAllowed","has"],"mappings":"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","file":"static/js/main.ea7ef34c.chunk.js","sourcesContent":["export const INIT_USER_AUTH_INFO_ON_LOAD = 'INIT_USER_AUTH_INFO_ON_LOAD';\nexport const INIT_USER_INFO_ON_LOAD = 'INIT_USER_INFO_ON_LOAD';\nexport const NOT_ALLOWED_WITH_GUEST_PERMISSION = 'NOT_ALLOWED_WITH_GUEST_PERMISSION';\n\nexport const USER_SIGN_IN_ATTEMPT = 'USER_SIGN_IN_ATTEMPT';\nexport const USER_SIGN_IN_SUCCESS = 'USER_SIGN_IN_SUCCESS';\nexport const USER_SIGN_IN_ERROR = 'USER_SIGN_IN_ERROR';\n\nexport const USER_SIGN_OUT_ATTEMPT = 'USER_SIGN_OUT_ATTEMPT';\nexport const USER_SIGN_OUT_SUCCESS = 'USER_SIGN_OUT_SUCCESS';\nexport const USER_SIGN_OUT_ERROR = 'USER_SIGN_OUT_ERROR';\n\nexport const USER_SIGN_UP_ATTEMPT = 'USER_SIGN_UP_ATTEMPT';\nexport const USER_SIGN_UP_SUCCESS = 'USER_SIGN_UP_SUCCESS';\nexport const USER_SIGN_UP_ERROR = 'USER_SIGN_UP_ERROR';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContainer\":\"App_AppContainer__1nBhh\"};","module.exports = __webpack_public_path__ + \"static/media/findParking.00c2ce8e.png\";","module.exports = __webpack_public_path__ + \"static/media/myAccount.56343e72.svg\";","module.exports = __webpack_public_path__ + \"static/media/myDrives.e5e1fefe.png\";","module.exports = __webpack_public_path__ + \"static/media/defaultUserIcon.98e63c1e.svg\";","import { UserAction } from './actions';\nimport {\n  INIT_USER_AUTH_INFO_ON_LOAD,\n  INIT_USER_INFO_ON_LOAD,\n  USER_SIGN_IN_ATTEMPT,\n  USER_SIGN_IN_ERROR,\n  USER_SIGN_IN_SUCCESS,\n  USER_SIGN_OUT_SUCCESS,\n  USER_SIGN_UP_ATTEMPT,\n  USER_SIGN_UP_ERROR,\n  USER_SIGN_UP_SUCCESS,\n} from '../../containers/App/constants';\nimport {\n  USER_UPDATE_AVATAR,\n  USER_UPDATE_DEFAULT_COUNTRY,\n  USER_UPDATE_FULLNAME,\n  USER_UPDATE_GENDER,\n  USER_UPDATE_USERNAME,\n} from './constants';\nimport { UserInfo } from '../../interfaces/UserInfo';\n\n\nexport const USER_ROLE_GUEST = 'GUEST';\nexport const USER_ROLE_ADMIN = 'ADMIN';\nexport const USER_ROLE_DRIVER = 'DRIVER';\n\nexport const USER_GENDER_MALE = 'male';\nexport const USER_GENDER_FEMALE = 'female';\nexport const USER_GENDER_NOT_APPLIED = 'n/a';\n\nexport const POSSIBLE_GENDER_LIST = [\n  USER_GENDER_MALE,\n  USER_GENDER_FEMALE,\n  USER_GENDER_NOT_APPLIED,\n];\n\nexport const userInitialState: UserInfo = {\n  id: -1,\n  isLoginInProgress: false,\n  isSignupInProgress: false,\n  isLoginError: false,\n  signupError: null,\n  isAuthorized: false,\n  role: USER_ROLE_GUEST,\n  avatarUrl: 'https://i0.wp.com/www.winhelponline.com/blog/wp-content/uploads/2017/12/user.png',\n  username: 'default username',\n  fullname: '',\n  defaultCountry: '',\n};\n\nexport default function userReducer(\n  state: UserInfo = userInitialState,\n  action: UserAction,\n): UserInfo {\n  switch (action.type) {\n    case INIT_USER_AUTH_INFO_ON_LOAD: {\n      return {\n        ...state,\n        ...action.payload,\n        isAuthorized: true,\n      };\n    }\n    case INIT_USER_INFO_ON_LOAD: {\n      return {\n        ...state,\n        ...action.payload,\n        isAuthorized: true,\n      };\n    }\n    case USER_SIGN_IN_ATTEMPT: {\n      return {\n        ...state,\n        isLoginInProgress: true,\n        isLoginError: false,\n      };\n    }\n    case USER_SIGN_IN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n        isLoginInProgress: false,\n        isLoginError: false,\n        isAuthorized: true,\n      };\n    }\n    case USER_SIGN_IN_ERROR: {\n      return {\n        ...state,\n        isLoginInProgress: false,\n        isLoginError: true,\n        isAuthorized: false,\n        avatarUrl: userInitialState.avatarUrl,\n        username: userInitialState.username,\n        gender: userInitialState.gender,\n      };\n    }\n    case USER_SIGN_OUT_SUCCESS: {\n      return userInitialState;\n    }\n    case USER_SIGN_UP_ATTEMPT: {\n      return {\n        ...state,\n        isSignupInProgress: true,\n        signupError: null,\n      };\n    }\n    case USER_SIGN_UP_SUCCESS: {\n      return {\n        ...state,\n        isSignupInProgress: false,\n        signupError: null,\n      };\n    }\n    case USER_SIGN_UP_ERROR: {\n      return {\n        ...state,\n        isSignupInProgress: false,\n        signupError: action.payload.signupError,\n      };\n    }\n    case USER_UPDATE_AVATAR: {\n      return {\n        ...state,\n        avatarUrl: action.payload,\n      };\n    }\n    case USER_UPDATE_USERNAME: {\n      return {\n        ...state,\n        username: action.payload,\n      };\n    }\n    case USER_UPDATE_FULLNAME: {\n      return {\n        ...state,\n        fullname: action.payload,\n      };\n    }\n    case USER_UPDATE_GENDER: {\n      return {\n        ...state,\n        gender: action.payload,\n      };\n    }\n    case USER_UPDATE_DEFAULT_COUNTRY: {\n      return {\n        ...state,\n        defaultCountry: action.payload,\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/parking-found.57a4105f.mp3\";","export const LOAD_CAR_PARAMETERS_ATTEMPT = 'LOAD_CAR_PARAMETERS_ATTEMPT';\nexport const LOAD_CAR_PARAMETERS_SUCCESS = 'LOAD_CAR_PARAMETERS_SUCCESS';\nexport const LOAD_CAR_PARAMETERS_ERROR = 'LOAD_CAR_PARAMETERS_ERROR';\nexport const LOAD_CAR_PARAMETERS_RESET = 'LOAD_CAR_PARAMETERS_RESET';\n\nexport const UPDATE_CAR_PARAMETER_VALUE_ATTEMPT = 'UPDATE_CAR_PARAMETER_VALUE_ATTEMPT';\nexport const UPDATE_CAR_PARAMETER_VALUE_SUCCESS = 'UPDATE_CAR_PARAMETER_VALUE_SUCCESS';\nexport const UPDATE_CAR_PARAMETER_VALUE_ERROR = 'UPDATE_CAR_PARAMETER_VALUE_ERROR';\n\nexport const LOAD_CAR_MANUFACTURERS_ATTEMPT = 'LOAD_CAR_MANUFACTURERS_ATTEMPT';\nexport const LOAD_CAR_MANUFACTURERS_SUCCESS = 'LOAD_CAR_MANUFACTURERS_SUCCESS';\nexport const LOAD_CAR_MANUFACTURERS_ERROR = 'LOAD_CAR_MANUFACTURERS_ERROR';\n","import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\n\nimport { userInfoSelector } from '../../store/userState/selectors';\nimport { RootReducer } from '../../store/rootReducer';\nimport * as styles from './Header.module.css';\nimport UrlService from '../../services/Url.service';\nimport { UserInfo } from '../../interfaces/UserInfo';\nimport { userSignOutAttempt, userSignOutAttemptActionCreator } from '../../store/userState/actions';\nimport ImagesService from '../../services/Images.service';\n\n\ninterface HeaderOwnProps {\n  user: UserInfo,\n}\n\ninterface HeaderDispatchProps {\n  userSignOut: userSignOutAttemptActionCreator,\n}\n\ninterface HeaderProps extends HeaderOwnProps, HeaderDispatchProps {}\n\ninterface HeaderLocalState {}\n\nclass Header extends React.PureComponent<HeaderProps, HeaderLocalState> {\n  renderLogo() {\n    return (\n      <Link to={UrlService.detectPageByUserInfo(this.props.user)}>\n        <h1 className={styles['HeaderLogo']}>\n          F<span className={styles['HeaderLogoFull']}>ree</span>\n          {' '}\n          P<span className={styles['HeaderLogoFull']}>arkings</span>\n        </h1>\n      </Link>\n    );\n  }\n\n  renderUserActionsDropdown() {\n    return (\n      <ul\n        className={styles['HeaderUserActionsDropdownList']}\n      >\n        <li>\n          <Link\n            to={'#'}\n            className={styles['HeaderUserActionsDropdownLink']}\n          >\n            About\n          </Link>\n        </li>\n\n        <li>\n          <Link\n            to={UrlService.configPageUrl}\n            className={styles['HeaderUserActionsDropdownLink']}\n          >\n            Settings\n          </Link>\n        </li>\n\n        <hr className={styles['HeaderUserActionsDropdownListDivider']} />\n\n        <li\n          className={styles['HeaderUserActionsDropdownItem']}\n        >\n          <Link\n            to={UrlService.loginPageUrl}\n            onClick={this.props.userSignOut}\n            className={styles['HeaderUserActionsDropdownLink']}\n          >\n            Logout\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  renderUserPanel() {\n    if (!this.props.user.isAuthorized) {\n      return null;\n    }\n\n    return (\n      <section className={styles['HeaderUserPanel']}>\n        <img\n          src={this.props.user.avatarUrl || ImagesService.commonImages.defaultUserIcon}\n          alt=\"Avatar\"\n          className={styles['HeaderUserPanelAvatar']}\n        />\n        {this.renderUserActionsDropdown()}\n      </section>\n    );\n  }\n\n  render() {\n    return (\n      <header className={styles['HeaderContainer']}>\n        { this.renderLogo() }\n        { this.renderUserPanel() }\n      </header>\n    )\n  }\n}\n\nconst mapStateToProps = createStructuredSelector<RootReducer, HeaderOwnProps>({\n  user: userInfoSelector,\n});\n\nconst mapDispatchToProps = {\n  userSignOut: userSignOutAttempt,\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(\n  withConnect,\n)(Header);\n","import React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Redirect, Route } from 'react-router';\nimport UrlService from '../services/Url.service';\n\n\nconst ProtectedRoute = ({ component: Component, allowed, RedirectComponent = null, redirectPath = '', ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) =>\n      allowed\n        ? <Component {...props} />\n        : RedirectComponent ? <RedirectComponent/> : (\n          <Redirect\n            to={{\n              pathname: redirectPath,\n              state: { from: props.location },\n            }}\n          />\n        )\n    }\n  />\n);\n\nProtectedRoute.propTypes = {\n  component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  allowed: PropTypes.bool.isRequired,\n  redirectPath: PropTypes.string,\n  redirectComponent: PropTypes.any,\n  location: PropTypes.object,\n};\n\nProtectedRoute.defaultProps = {\n  redirectPath: UrlService.loginPageUrl,\n  redirectComponent: null,\n};\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport { Redirect, Switch } from 'react-router';\n\nimport * as css from './App.module.css';\nimport Header from '../../components/Header/Header';\nimport UrlService from '../../services/Url.service';\nimport ProtectedRoute from '../../HOCs/ProtectedRoute';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { isUserAuthorizedSelector, userInfoSelector } from '../../store/userState/selectors';\nimport { RootReducer } from '../../store/rootReducer';\nimport { UserInfo } from '../../interfaces/UserInfo';\n\nconst LoginPage = React.lazy(() => import('../LoginPage/LoginPage'));\nconst SignupPage = React.lazy(() => import('../SignupPage/SignupPage'));\n// @ts-ignore\nconst ParkingsPage = React.lazy(() => import('../ParkingsPage/ParkingsPage'));\nconst DashboardPage = React.lazy(() => import('../DashboardPage/DashboardPage'));\nconst UserSettingsPage = React.lazy(() => import('../UserSettingsPage/UserSettingsPage'));\n\n\ninterface AppProps {\n  isUserAuthorized: boolean,\n  userInfo: UserInfo,\n}\n\nexport class App extends React.Component<AppProps> {\n  render() {\n    return (\n      <main className={css['AppContainer']}>\n        <Header/>\n        <React.Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <ProtectedRoute\n              path={UrlService.loginPageUrl}\n              component={LoginPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.loginPageRolesAllowed)}\n              redirectPath={UrlService.detectPageByUserInfo(this.props.userInfo)}\n            />\n            <ProtectedRoute\n              path={UrlService.signupPageUrl}\n              component={SignupPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.signupPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <ProtectedRoute\n              path={UrlService.parkingsPageUrl}\n              component={ParkingsPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.parkingsPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <ProtectedRoute\n              path={UrlService.dashboardPageUrl}\n              component={DashboardPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.dashboardPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <ProtectedRoute\n              path={UrlService.settingsPageUrl}\n              component={UserSettingsPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.settingsPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <ProtectedRoute\n              path={UrlService.myDrivesPageUrl}\n              component={() => <div>my drives</div>}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.myDrivesPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <Redirect\n              exact\n              path=\"/\"\n              to={UrlService.loginPageUrl}\n            />\n          </Switch>\n        </React.Suspense>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector<RootReducer, AppProps>({\n  userInfo: userInfoSelector,\n  isUserAuthorized: isUserAuthorizedSelector,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.info(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ClientParkopediaParking,\n  ParkopediaParking,\n  ParkopediaParkingServerExpects,\n} from '../../interfaces/ParkopediaParking';\nimport { PointGeometry } from '../../interfaces/PointGeometry';\nimport { ResponseParkopediaParking } from '../../interfaces/ParkopediaParking';\nimport { PreparedParkings, ResponseParkings } from '../../interfaces/ResponseParkings';\n\n\nexport function prepareParkings(\n  rawResponseParkings?: ResponseParkings\n): PreparedParkings {\n  let preparedResponse: PreparedParkings = [];\n\n  if (!rawResponseParkings || !Array.isArray(rawResponseParkings)) {\n    return preparedResponse;\n  }\n\n  preparedResponse = prepareParkopediaParkings(rawResponseParkings);\n\n  return preparedResponse;\n}\n\nfunction prepareParkopediaParkings(allParkings: ResponseParkopediaParking[]): ParkopediaParking[] {\n  return allParkings.map(prepareParkopediaParkingSlot);\n}\n\nfunction prepareParkopediaParkingSlot(parkingSlot: ResponseParkopediaParking): ParkopediaParking {\n  return parkingSlot;\n}\n\n\nexport function prepareParkingParametersFromClientToServer(rawParkingParameters: ClientParkopediaParking): ParkopediaParkingServerExpects {\n  const {\n    parkingsGeoJsonSource: rawGeometry,\n    isLatLon,\n    parkingLength: length,\n    parkingWidth: width,\n    parkingHeight: height,\n    ...restParameters\n  } = rawParkingParameters;\n  const geometry = prepareUserInputParkingGeometry(rawGeometry, isLatLon);\n\n  return {\n    ...restParameters,\n    geometry,\n    length,\n    width,\n    height,\n  }\n}\n\nexport function prepareUserInputParkingGeometry(rawParkingGeometry: string, isLatLon: boolean): PointGeometry[] {\n  const parkingPoints = rawParkingGeometry\n    .split('\\n')\n    .map(p => prepareUserInputParkingPoint(p, isLatLon))\n    .filter(isValidPoint)\n  ;\n\n  if (parkingPoints.length < 2) {\n    return [];\n  }\n  return parkingPoints;\n}\n\nfunction prepareUserInputParkingPoint(rawParkingPoint: string, isLatLon: boolean): PointGeometry {\n  const [lat, lon] = rawParkingPoint\n    .split(',')\n    .map(s => parseFloat(s.trim()))\n  ;\n  return isLatLon ? [lat, lon] : [lon, lat];\n}\n\nfunction isValidPoint(pointGeometry: PointGeometry) {\n  return Array.isArray(pointGeometry) && pointGeometry.length === 2 && pointGeometry.every(isFinite);\n}\n","export const backendEndpoint = (\n  process.env.NODE_ENV === 'production'\n    ? 'https://free-parkings-api.herokuapp.com'\n    : 'http://localhost:8000'\n);\n","export default function serialize(obj: any, prefix?: string): string {\n  let str = [];\n  let p;\n  for (p in obj) {\n    if (obj.hasOwnProperty(p)) {\n      const k = prefix\n        ? prefix + '[' + p + ']'\n        : p;\n      const v = obj[p];\n      str.push(\n        (v !== null && typeof v === \"object\")\n          ? serialize(v, k)\n          : encodeURIComponent(k) + \"=\" + encodeURIComponent(v)\n      );\n    }\n  }\n  return str.join(\"&\");\n}\n","const getUserLocation = () => new Promise((resolve, reject) => {\n  navigator.geolocation.getCurrentPosition(\n    location => resolve(location),\n    error => reject(error),\n  )\n});\n\nconst watchUserLocation = () => new Promise((resolve, reject) => {\n  navigator.geolocation.watchPosition(\n    location => resolve(location),\n    error => reject(error),\n  )\n});\n\nexport default {\n  getUserLocation,\n  watchUserLocation,\n  getUserLatLon: (location: Position) => ({\n    lat: location.coords.latitude,\n    lon: location.coords.longitude,\n  }),\n};\n","import { select } from 'redux-saga/effects';\n\nimport { userAccessTokenSelector } from '../store/userState/selectors';\n\n\nfunction checkStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  throw response;\n}\n\nfunction parseJSON(response: Response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\nexport function request(url: string, options: RequestInit = {}, json: boolean = true) {\n  const promise = fetch(url, options).then(checkStatus);\n  return json ? promise.then(parseJSON) : promise;\n}\n\nexport function* requestToFreeParkingsAPI(url: string, options: RequestInit = {}) {\n  const accessToken = yield select(userAccessTokenSelector);\n\n  const response = yield fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...accessToken ? {'access_token': accessToken} : {},\n    },\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n  ;\n  return response;\n}\n","const parkingIsFoundPath = require('../assets/audio/parking-found.mp3');\n\n\nexport default class AudioService {\n  static parkingIsFoundPath: string = parkingIsFoundPath;\n}\n","import { delay } from 'redux-saga';\nimport { all, call, select, takeLatest } from 'redux-saga/effects';\n\nimport * as parkingSettinsConstants from './constants';\nimport { checkForParkopediaUpdates } from '../parkings/saga';\nimport { PreparedParkings } from '../../interfaces/ResponseParkings';\nimport { areVoiceNotificationsEnabledSelector, isParkingAutoSearchEnabledSelector } from './selectors';\nimport AudioService from '../../services/AudioService';\n\n\nlet checkParkopediaUpdatesTimer: boolean = false;\nfunction* startCheckingParkopediaUpdatesSaga() {\n  const isParkingAutoSearchEnabled = yield select(isParkingAutoSearchEnabledSelector);\n  checkParkopediaUpdatesTimer = true;\n  while (checkParkopediaUpdatesTimer && isParkingAutoSearchEnabled) {\n    yield call(checkForParkopediaUpdates);\n    yield delay(5000);\n  }\n}\n\nfunction stopCheckingParkopediaUpdatesSaga() {\n  checkParkopediaUpdatesTimer = false;\n}\n\nexport function* parkingVoiceNotification(preparedResponseParkings: PreparedParkings) {\n  const areVoiceNotificationsEnabled = yield select(areVoiceNotificationsEnabledSelector);\n  if (areVoiceNotificationsEnabled && preparedResponseParkings.length > 0) {\n    new Audio(AudioService.parkingIsFoundPath).play();\n  }\n}\n\nexport default function* defaultParkingSettingsSaga() {\n  yield all([\n    takeLatest(parkingSettinsConstants.START_CHECKING_PARKOPEDIA_UPDATES, startCheckingParkopediaUpdatesSaga),\n    takeLatest(parkingSettinsConstants.STOP_CHECKING_PARKOPEDIA_UPDATES, stopCheckingParkopediaUpdatesSaga),\n  ]);\n}\n","import { push } from 'connected-react-router';\nimport { all, call, put, select, takeEvery, takeLatest, throttle } from 'redux-saga/effects';\n\nimport { centerCoordinatesSelector, latLonSelector } from './selectors';\nimport { prepareParkingParametersFromClientToServer, prepareParkings } from './adapters';\nimport { searchRadiusSelector, sessionUidSelector } from '../../containers/BaseConfigPage/BaseConfigSelectors';\nimport { PreparedParkings, ResponseParkings } from '../../interfaces/ResponseParkings';\nimport * as ParkingsPageActions from './actions';\nimport {\n  deleteParkingAction,\n  fetchParkingsRequest,\n  postParkingAttemptAction,\n  postParkingError,\n  postParkingSuccess,\n  setParkingsPageCenter,\n} from './actions';\nimport { backendEndpoint } from '../../constants/backend';\nimport { MAX_SEARCH_RADIUS_TO_FETCH } from '../../containers/BaseConfigPage/BaseConfigConstants';\nimport serialize from '../../utils/serialize';\nimport * as parkingsConstants from './constants';\nimport { default as GeoLocationService } from '../../services/GeoLocation.service';\nimport { requestToFreeParkingsAPI } from '../../services/Authentication.service';\nimport { ParkopediaParkingServerExpects } from '../../interfaces/ParkopediaParking';\nimport { parkingVoiceNotification } from '../parkingSettings/saga';\n\n\nexport function* fetchParkingsSaga() {\n  const { lat, lon } = yield select(centerCoordinatesSelector);\n  const searchRadius = yield select(searchRadiusSelector);\n\n  const canFetchParkings = searchRadius < MAX_SEARCH_RADIUS_TO_FETCH;\n  try {\n    if (canFetchParkings) {\n      yield put(ParkingsPageActions.fetchParkingsStart());\n      const searchQuery = serialize({ lat, lon, radius: searchRadius });\n      const rawResponseParkings: ResponseParkings = yield call(requestToFreeParkingsAPI, `${backendEndpoint}/parkings?${searchQuery}`);\n      const preparedResponseParkings: PreparedParkings = prepareParkings(rawResponseParkings);\n      yield call(parkingVoiceNotification, preparedResponseParkings);\n      yield put(ParkingsPageActions.fetchParkingsSuccess(preparedResponseParkings));\n    }\n  } catch (e) {\n    console.error('fetch parkings:', e);\n  }\n}\n\nexport function* updateUrlLatLonSaga(action: ParkingsPageActions.setParkingsPageCenterAction) {\n  try {\n    yield put(push({\n      search: `?lat=${action.payload.lat}&lon=${action.payload.lon}`,\n    }));\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport function* synchronizeLatLonSaga() {\n  const { lat: latFromUrl, lon: lonFromUrl } = yield select(latLonSelector);\n  yield put(setParkingsPageCenter(latFromUrl, lonFromUrl));\n}\n\nexport function* checkForParkopediaUpdates() {\n  yield put(fetchParkingsRequest());\n}\n\nexport function* clearAllFreeSlotsSaga() {\n  try {\n    yield call(fetch, `${backendEndpoint}/admin/cloudevents/drop`, {\n      method: 'POST',\n    });\n  } catch (e) {\n    console.error('Failed to clear all free slots');\n  }\n}\n\nexport function* clearVisibleFreeSlotsSaga() {\n  const { lat, lon } = yield select(centerCoordinatesSelector);\n  const radius = yield select(searchRadiusSelector);\n  const uid = yield select(sessionUidSelector);\n\n  try {\n    yield call(fetch, `${backendEndpoint}/admin/cloudevents/drop/area`, {\n      method: 'POST',\n      body: JSON.stringify({ lat, lon, radius, uid }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n  } catch (e) {\n    console.error('Failed to clear visible free slots');\n  }\n\n  yield put(fetchParkingsRequest());\n}\n\nfunction* detectGeoLocationSaga() {\n  if ('geolocation' in navigator) {\n    try {\n      const location = yield call(GeoLocationService.getUserLocation);\n      const { lat, lon } = yield call(GeoLocationService.getUserLatLon, location);\n      yield put(setParkingsPageCenter(lat, lon));\n    } catch (e) {\n      console.error(e);\n    }\n  } else {\n    /* geolocation IS NOT available */\n  }\n}\n\nfunction* createParkingSaga(preparedParkingParameters: ParkopediaParkingServerExpects) {\n  const url = `${backendEndpoint}/parkings`;\n  const createdParking = yield call(requestToFreeParkingsAPI, url, {\n    method: 'PUT',\n    body: JSON.stringify(preparedParkingParameters),\n  });\n  return createdParking;\n}\n\nfunction* updateParkingSaga(preparedParkingParameters: ParkopediaParkingServerExpects) {\n  const url = `${backendEndpoint}/parkings/${preparedParkingParameters.id}`;\n  yield call(requestToFreeParkingsAPI, url, {\n    method: 'PUT',\n    body: JSON.stringify(preparedParkingParameters),\n  });\n  return true;\n}\n\nfunction* postParkingSaga(action: postParkingAttemptAction) {\n  const preparedParkingParameters = prepareParkingParametersFromClientToServer(action.payload);\n  try {\n    let parking = null;\n\n    if (preparedParkingParameters.id) {\n      yield call(updateParkingSaga, preparedParkingParameters);\n      parking = preparedParkingParameters;\n    } else {\n      parking = yield call(createParkingSaga, preparedParkingParameters);\n    }\n    yield put(postParkingSuccess(parking));\n  } catch (e) {\n    yield put(postParkingError());\n  }\n}\n\nfunction* deleteParkingSaga(action: deleteParkingAction) {\n  const parkingId = action.payload;\n  const url = `${backendEndpoint}/parkings/${parkingId}`;\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'DELETE',\n    })\n  } catch (e) {\n    console.error('cannot delete parking', e);\n  }\n}\n\nexport default function* defaultParkingsSaga() {\n  yield all([\n    throttle(3000, parkingsConstants.PARKINGS_REQUEST_FOR_FETCH, fetchParkingsSaga),\n    takeEvery(parkingsConstants.CHANGE_CENTER_LOCATION, updateUrlLatLonSaga),\n    takeEvery(parkingsConstants.CHECK_PARKOPEDIA_UPDATES_REQUEST, checkForParkopediaUpdates),\n    takeLatest(parkingsConstants.SYNCHRONIZE_LAT_LON, synchronizeLatLonSaga),\n    takeEvery(parkingsConstants.DELETE_PARKING, deleteParkingSaga),\n    takeEvery(parkingsConstants.DELETE_ALL_FREE_SLOTS, clearAllFreeSlotsSaga),\n    takeEvery(parkingsConstants.DELETE_VISIBLE_FREE_SLOTS, clearVisibleFreeSlotsSaga),\n    takeEvery(parkingsConstants.ASK_PERMISSION_FOR_GEO_LOCATION, detectGeoLocationSaga),\n    takeEvery(parkingsConstants.POST_PARKING_ATTEMPT, postParkingSaga),\n  ]);\n}\n","import { UserInfo, UserInfoRequiredForAuth } from '../interfaces/UserInfo';\nimport { userInfoSelector } from '../store/userState/selectors';\nimport { call, select } from 'redux-saga/effects';\n\n\nexport default class LocalStorageService {\n  public static getUserInfo(): UserInfo | null {\n    const userAuthInfoJSON: string | null = localStorage.getItem('userInfo');\n    if (!userAuthInfoJSON) {\n      return null;\n    }\n    return JSON.parse(userAuthInfoJSON);\n  }\n\n  public static hasUserInfo() {\n    return Boolean(localStorage.getItem('userInfo'));\n  }\n\n  public static getAccessToken() {\n    const userInfo = LocalStorageService.getUserInfo();\n    if (!userInfo || !userInfo.accessToken) {\n      return null;\n    }\n    return userInfo.accessToken;\n  }\n\n  public static getUserInfoRequiredForAuth(): UserInfoRequiredForAuth | null {\n    const userAuthInfoJSON: string | null = localStorage.getItem('userInfoAuth');\n    if (!userAuthInfoJSON) {\n      return null;\n    }\n    return JSON.parse(userAuthInfoJSON);\n  }\n\n  public static saveUserInfoRequiredForAuth(info: UserInfoRequiredForAuth) {\n    localStorage.setItem('userInfoAuth', JSON.stringify(info));\n  }\n\n  public static removeUserInfo() {\n    localStorage.removeItem('userInfo');\n  }\n}\n\nexport function* updateUserInfoLocallySaga() {\n  const userInfo = yield select(userInfoSelector);\n  yield call(LocalStorageService.saveUserInfoRequiredForAuth, {\n    id: userInfo.id,\n    accessToken: userInfo.accessToken,\n  });\n}\n","import isString from 'lodash/isString';\n\nimport { UserInfo } from '../../interfaces/UserInfo';\nimport { userInitialState } from './reducer';\nimport { ResponseLoginInfo } from '../../interfaces/ResponseLoginInfo';\n\n\nexport function userInfoAdapter (loginInfo: ResponseLoginInfo): UserInfo {\n  if (!loginInfo) {\n    return userInitialState;\n  }\n\n  const name = loginInfo.personalInfo.name || '';\n  const surname = loginInfo.personalInfo.surname || '';\n  const fullname = `${name} ${surname}`;\n\n  return {\n    ...userInitialState,\n    accessToken: loginInfo.accessToken,\n    ...loginInfo.personalInfo,\n    fullname,\n  }\n}\n\nexport function signupErrorAdapter(err: any): string | null {\n  if (!err) {\n    return null;\n  }\n  if (isString(err)) {\n    return err;\n  }\n  if ('message' in err) {\n    return err.message;\n  }\n  return null;\n}\n","import { all, call, put, select, takeLatest } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport { action } from 'typesafe-actions';\n\nimport { backendEndpoint } from '../../constants/backend';\nimport {\n  initUserAuthInfoOnLoad,\n  initUserInfoOnLoad,\n  signinUserAttemptAction,\n  signinUserError,\n  signinUserSuccess,\n  signupUserAttemptAction,\n  signupUserError,\n  signupUserSuccess,\n  updateAvatarAction,\n  updateDefaultCountryAction,\n  updateFullnameAction,\n  updateGenderAction,\n  updateUsernameAction,\n  userSignOutSuccess,\n} from './actions';\nimport LocalStorageService, { updateUserInfoLocallySaga } from '../../services/LocalStorage.service';\nimport {\n  USER_SIGN_IN_ATTEMPT,\n  USER_SIGN_IN_SUCCESS,\n  USER_SIGN_OUT_ATTEMPT,\n  USER_SIGN_OUT_ERROR,\n  USER_SIGN_OUT_SUCCESS,\n  USER_SIGN_UP_ATTEMPT,\n  USER_SIGN_UP_SUCCESS,\n} from '../../containers/App/constants';\nimport UrlService from '../../services/Url.service';\nimport { requestToFreeParkingsAPI } from '../../services/Authentication.service';\nimport { signupErrorAdapter, userInfoAdapter } from './adapters';\nimport { userAccessTokenSelector, userIdSelector, userInfoSelector } from './selectors';\nimport { ResponseLoginInfo } from '../../interfaces/ResponseLoginInfo';\nimport {\n  USER_UPDATE_AVATAR,\n  USER_UPDATE_DEFAULT_COUNTRY,\n  USER_UPDATE_FULLNAME,\n  USER_UPDATE_GENDER,\n  USER_UPDATE_USERNAME,\n} from './constants';\nimport { loadCarParametersReset } from '../car/actions';\nimport { UserInfo, UserInfoRequiredForAuth } from '../../interfaces/UserInfo';\n\n\nfunction* redirectToPageByRole() {\n  const userInfo = yield select(userInfoSelector);\n  yield put(push(UrlService.detectPageByUserInfo(userInfo)));\n}\n\nfunction* signinUserAttemptSaga(action: signinUserAttemptAction) {\n  const { username, password } = action.payload;\n  const url = `${backendEndpoint}/auth/login`;\n\n  try {\n    const loginInfo: ResponseLoginInfo = yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n    });\n    const userInfo = userInfoAdapter(loginInfo);\n    yield put(signinUserSuccess(userInfo));\n  } catch (e) {\n    yield put(signinUserError());\n  }\n}\n\nfunction* signinUserSuccessSaga() {\n  yield call(updateUserInfoLocallySaga);\n  yield call(redirectToPageByRole);\n}\n\nfunction* signoutUserSuccessSaga() {\n  yield put(loadCarParametersReset());\n  yield call(LocalStorageService.removeUserInfo);\n  yield call(redirectToPageByRole);\n}\n\nfunction* signoutUserAttemptSaga() {\n  const url = `${backendEndpoint}/auth/logout`;\n  const accessToken = yield select(userAccessTokenSelector);\n  if (!accessToken) {\n    yield put(userSignOutSuccess());\n    return;\n  }\n\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n    });\n    yield put(userSignOutSuccess());\n  } catch (e) {\n    yield put(action(USER_SIGN_OUT_ERROR));\n  }\n\n  yield call(LocalStorageService.removeUserInfo);\n}\n\nfunction* loadUserInfoByAccessToken() {\n  const userId = yield select(userIdSelector);\n\n  try {\n    const userInfo: UserInfo = yield call(requestToFreeParkingsAPI, `${backendEndpoint}/users/${userId}`);\n    yield put(initUserInfoOnLoad(userInfo));\n  } catch (e) {\n    yield put(userSignOutSuccess());\n  }\n}\n\nfunction* initUserInfoOnLoadSaga() {\n  const userInfoRequiredForAuth: UserInfoRequiredForAuth | null = yield call(LocalStorageService.getUserInfoRequiredForAuth);\n\n  if (userInfoRequiredForAuth && userInfoRequiredForAuth.accessToken) {\n    yield put(initUserAuthInfoOnLoad(userInfoRequiredForAuth));\n    yield call(loadUserInfoByAccessToken);\n  } else {\n    yield call(signoutUserSuccessSaga);\n  }\n}\n\nfunction* signupUserAttemptSaga(action: signupUserAttemptAction) {\n  const { username, password } = action.payload;\n  const url = `${backendEndpoint}/auth/signup`;\n\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n    });\n    yield put(signupUserSuccess());\n  } catch (e) {\n    const errorData = yield e.json();\n    const errorMessage = signupErrorAdapter(errorData);\n    yield put(signupUserError(errorMessage));\n  }\n}\n\nfunction* signupUserSuccessSaga() {\n  alert('signed up successfully');\n  yield put(push(UrlService.loginPageUrl));\n}\n\nfunction* updatePersonalInfoField(key: string, value: string) {\n  const userId = yield select(userIdSelector);\n  const url = `${backendEndpoint}/users/${userId}`;\n\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n      body: JSON.stringify({ [key]: value }),\n    });\n    yield call(updateUserInfoLocallySaga);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction* updateAvatarSaga(action: updateAvatarAction) {\n  yield call(updatePersonalInfoField, 'imageUrl', action.payload);\n}\n\nfunction* updateUsernameSaga(action: updateUsernameAction) {\n  yield call(updatePersonalInfoField, 'username', action.payload);\n}\n\nfunction* updateFullnameSaga(action: updateFullnameAction) {\n  yield call(updatePersonalInfoField, 'fullname', action.payload);\n}\n\nfunction* updateGenderSaga(action: updateGenderAction) {\n  yield call(updatePersonalInfoField, 'gender', action.payload);\n}\n\nfunction* updateDefaultCountrySaga(action: updateDefaultCountryAction) {\n  yield call(updatePersonalInfoField, 'defaultCountry', action.payload);\n}\n\nconst defaultLoginPageSaga = function* () {\n  yield all([\n    takeLatest(USER_SIGN_IN_ATTEMPT, signinUserAttemptSaga),\n    takeLatest(USER_SIGN_IN_SUCCESS, signinUserSuccessSaga),\n    takeLatest(USER_SIGN_OUT_ATTEMPT, signoutUserAttemptSaga),\n    takeLatest(USER_SIGN_OUT_SUCCESS, signoutUserSuccessSaga),\n    takeLatest(USER_SIGN_UP_ATTEMPT, signupUserAttemptSaga),\n    takeLatest(USER_SIGN_UP_SUCCESS, signupUserSuccessSaga),\n    takeLatest(USER_UPDATE_AVATAR, updateAvatarSaga),\n    takeLatest(USER_UPDATE_USERNAME, updateUsernameSaga),\n    takeLatest(USER_UPDATE_FULLNAME, updateFullnameSaga),\n    takeLatest(USER_UPDATE_GENDER, updateGenderSaga),\n    takeLatest(USER_UPDATE_DEFAULT_COUNTRY, updateDefaultCountrySaga),\n    initUserInfoOnLoadSaga(),\n  ]);\n};\n\nexport default defaultLoginPageSaga;\n","import isObject from 'lodash/isObject';\n\nimport { CarInfo } from '../../interfaces/CarInfo';\n\n\nexport function prepareCarInfo(rawCarInfo: any): CarInfo {\n  if (!rawCarInfo || !isObject(rawCarInfo)) {\n    return {};\n  }\n\n  return rawCarInfo;\n}\n","import { all, call, put, select, takeLatest } from 'redux-saga/effects';\n\nimport { carPageIsCachedSelector } from './selectors';\nimport { requestToFreeParkingsAPI } from '../../services/Authentication.service';\nimport { backendEndpoint } from '../../constants/backend';\nimport { userIdSelector } from '../userState/selectors';\nimport {\n  loadCarManufacturersAttempt, loadCarManufacturersError, loadCarManufacturersSuccess,\n  loadCarParametersError,\n  loadCarParametersSuccess,\n  updateCarParameterValueAttemptAction,\n  updateCarParameterValueError,\n  updateCarParameterValueSuccess,\n} from './actions';\nimport { prepareCarInfo } from './adapters';\nimport { LOAD_CAR_PARAMETERS_ATTEMPT, UPDATE_CAR_PARAMETER_VALUE_ATTEMPT } from './constants';\n\n\nfunction* loadCarDataIfAbsent() {\n  const carPageIsCached = yield select(carPageIsCachedSelector);\n  const userId = yield select(userIdSelector);\n  if (carPageIsCached) {\n    return;\n  }\n\n  try {\n    const rawCarInfo = yield call(requestToFreeParkingsAPI, `${backendEndpoint}/users/${userId}/car`);\n    const preparedCarInfo = prepareCarInfo(rawCarInfo);\n    yield put(loadCarParametersSuccess(preparedCarInfo));\n  } catch(err) {\n    yield put(loadCarParametersError());\n  }\n}\n\nfunction* updateCarParameterValueSaga(action: updateCarParameterValueAttemptAction) {\n  const userId = yield select(userIdSelector);\n  try {\n    yield call(requestToFreeParkingsAPI, `${backendEndpoint}/users/${userId}/car`, {\n      method: 'POST',\n      body: JSON.stringify({\n        [action.payload.paramKey]: action.payload.paramValue,\n      }),\n    });\n    yield put(updateCarParameterValueSuccess(action.payload));\n  } catch(err) {\n    yield put(updateCarParameterValueError());\n  }\n}\n\nfunction* loadCarManufacturers() {\n  try {\n    yield put(loadCarManufacturersAttempt());\n    const manufacturersList: string[] = yield call(requestToFreeParkingsAPI, `${backendEndpoint}/cars/manufacturers`);\n    yield put(loadCarManufacturersSuccess(manufacturersList));\n  } catch(err) {\n    yield put(loadCarManufacturersError());\n  }\n}\n\n\nexport default function* defaultCarPageSaga() {\n  yield all([\n    yield takeLatest(LOAD_CAR_PARAMETERS_ATTEMPT, loadCarDataIfAbsent),\n    yield takeLatest(UPDATE_CAR_PARAMETER_VALUE_ATTEMPT, updateCarParameterValueSaga),\n    yield call(loadCarManufacturers),\n  ]);\n};\n","import { all } from 'redux-saga/effects';\n\nimport defaultParkingsSaga from './parkings/saga';\nimport defaultLoginPageSaga from './userState/saga';\nimport defaultCarPageSaga from './car/saga';\nimport defaultParkingSettingsSaga from './parkingSettings/saga';\n\n\nfunction* initSaga() {\n  yield all([\n    defaultParkingsSaga(),\n    defaultLoginPageSaga(),\n    defaultCarPageSaga(),\n    defaultParkingSettingsSaga(),\n  ]);\n}\n\nexport default initSaga;\n","import * as BaseConfigConstants from './BaseConfigConstants';\nimport { BaseConfigAction } from './BaseConfigActions';\n\n\nexport interface BaseConfigState {\n  readonly parkingSearchRadius: number,\n  readonly startPointLat: number,\n  readonly startPointLon: number,\n  readonly defaultZoomLevel: number,\n  readonly sessionUid: string,\n  readonly isSidebarOpen: boolean,\n}\n\nexport const BaseConfigInitialState: BaseConfigState = {\n  parkingSearchRadius: BaseConfigConstants.INITIAL_SEARCH_RADIUS,\n  startPointLat: BaseConfigConstants.KYIV_CENTER_LAT,\n  startPointLon: BaseConfigConstants.KYIV_CENTER_LON,\n  defaultZoomLevel: 7,\n  sessionUid: String(Math.random()).slice(2),\n  isSidebarOpen: false,\n};\n\n\nexport default function baseConfigReducer(\n  state: BaseConfigState = BaseConfigInitialState,\n  action: BaseConfigAction,\n): BaseConfigState {\n  switch (action.type) {\n    case BaseConfigConstants.BASE_CONFIG_RADIUS_SET: {\n      return {\n        ...state,\n        parkingSearchRadius: action.payload,\n      };\n    }\n    case BaseConfigConstants.BASE_CONFIG_RADIUS_RESET: {\n      return {\n        ...state,\n        parkingSearchRadius: BaseConfigInitialState.parkingSearchRadius,\n      };\n    }\n    case BaseConfigConstants.BASE_CONFIG_OPEN_SIDEBAR: {\n      return {\n        ...state,\n        isSidebarOpen: true,\n      };\n    }\n    case BaseConfigConstants.BASE_CONFIG_CLOSE_SIDEBAR: {\n      return {\n        ...state,\n        isSidebarOpen: false,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import uniqBy from 'lodash/uniqBy';\n\nimport {\n  CHANGE_CENTER_LOCATION,\n  PARKINGS_REQUEST_FOR_FETCH,\n  PARKINGS_FETCH_SUCCESS,\n  PARKINGS_FETCH_START,\n  CHECK_PARKOPEDIA_UPDATES_SUCCESS,\n  DELETE_PARKING,\n  DELETE_ALL_FREE_SLOTS,\n  CHANGE_ZOOM_LEVEL,\n  POST_PARKING_ATTEMPT,\n  POST_PARKING_SUCCESS,\n} from './constants';\nimport { Actions } from './actions';\nimport { BaseConfigInitialState } from '../../containers/BaseConfigPage/BaseConfigReducer';\nimport { ParkopediaParking } from '../../interfaces/ParkopediaParking';\n\n\nexport interface ParkingsPageState {\n  readonly centerLat: number,\n  readonly centerLon: number,\n  readonly zoomLevel: number,\n  readonly lastParkingsCheckTimestamp: number,\n  readonly lastParkingsCheckUpdatesCount: number,\n  readonly isFetchInProgress: boolean,\n  readonly wasFetchPerformed: boolean,\n  readonly allParkings: ParkopediaParking[],\n  readonly freeParkings: ParkopediaParking[],\n}\n\nexport const ParkingsPageInitialState: ParkingsPageState = {\n  centerLat: BaseConfigInitialState.startPointLat,\n  centerLon: BaseConfigInitialState.startPointLon,\n  zoomLevel: BaseConfigInitialState.defaultZoomLevel,\n  lastParkingsCheckTimestamp: 0,\n  lastParkingsCheckUpdatesCount: 0,\n  isFetchInProgress: false,\n  wasFetchPerformed: false,\n  allParkings: [],\n  freeParkings: [],\n};\n\n\nexport default function reducer(\n  state: ParkingsPageState = ParkingsPageInitialState,\n  action: Actions,\n): ParkingsPageState {\n  switch (action.type) {\n    case CHANGE_CENTER_LOCATION: {\n      return {\n        ...state,\n        centerLat: action.payload.lat,\n        centerLon: action.payload.lon,\n        lastParkingsCheckTimestamp: ParkingsPageInitialState.lastParkingsCheckTimestamp,\n        lastParkingsCheckUpdatesCount: ParkingsPageInitialState.lastParkingsCheckUpdatesCount,\n      };\n    }\n    case CHANGE_ZOOM_LEVEL: {\n      return {\n        ...state,\n        zoomLevel: action.payload,\n      }\n    }\n    case PARKINGS_REQUEST_FOR_FETCH: {\n      return {\n        ...state,\n        isFetchInProgress: true,\n      };\n    }\n    case PARKINGS_FETCH_START: {\n      return {\n        ...state,\n        wasFetchPerformed: true,\n      };\n    }\n    case PARKINGS_FETCH_SUCCESS: {\n      return {\n        ...state,\n        allParkings: uniqBy([\n          ...state.allParkings,\n          ...action.payload,\n        ], 'id'),\n        isFetchInProgress: false,\n      };\n    }\n    case POST_PARKING_ATTEMPT: {\n      return {\n        ...state,\n        isFetchInProgress: true,\n      };\n    }\n    case POST_PARKING_SUCCESS: {\n      return {\n        ...state,\n        allParkings: uniqBy([\n          action.payload,\n          ...state.allParkings,\n        ], 'id'),\n        isFetchInProgress: false,\n      };\n    }\n    case CHECK_PARKOPEDIA_UPDATES_SUCCESS: {\n      return {\n        ...state,\n        lastParkingsCheckTimestamp: action.payload.timestamp,\n        lastParkingsCheckUpdatesCount: action.payload.updatesCount,\n        isFetchInProgress: false,\n      };\n    }\n    case DELETE_PARKING: {\n      return {\n        ...state,\n        allParkings: state.allParkings.filter(({id}) => id !== action.payload),\n      }\n    }\n    case DELETE_ALL_FREE_SLOTS: {\n      return {\n        ...state,\n        freeParkings: ParkingsPageInitialState.freeParkings,\n        lastParkingsCheckTimestamp: ParkingsPageInitialState.lastParkingsCheckTimestamp,\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { CarInfo } from '../../interfaces/CarInfo';\nimport { CarAction } from './actions';\nimport {\n  LOAD_CAR_MANUFACTURERS_SUCCESS,\n  LOAD_CAR_PARAMETERS_ATTEMPT,\n  LOAD_CAR_PARAMETERS_ERROR,\n  LOAD_CAR_PARAMETERS_RESET,\n  LOAD_CAR_PARAMETERS_SUCCESS, UPDATE_CAR_PARAMETER_VALUE_ATTEMPT,\n} from './constants';\n\n\nexport interface CarPageOwnProps {\n  isInProgress: boolean,\n  isError: boolean,\n  isCached: boolean,\n  carManufacturers: string[],\n  carInfo: CarInfo,\n}\n\nexport const carPageInitialState: CarPageOwnProps = {\n  isInProgress: false,\n  isError: false,\n  isCached: false,\n  carManufacturers: [],\n  carInfo: {},\n};\n\nexport default function carPageReducer(\n  state: CarPageOwnProps = carPageInitialState,\n  action: CarAction,\n): CarPageOwnProps {\n  switch (action.type) {\n    case UPDATE_CAR_PARAMETER_VALUE_ATTEMPT: {\n      return {\n        ...state,\n        carInfo: {\n          ...state.carInfo,\n          [action.payload.paramKey]: action.payload.paramValue,\n        }\n      };\n    }\n    case LOAD_CAR_PARAMETERS_ATTEMPT: {\n      return {\n        ...state,\n        isInProgress: true,\n        isError: false,\n      };\n    }\n    case LOAD_CAR_PARAMETERS_SUCCESS: {\n      return {\n        ...state,\n        isInProgress: false,\n        isError: false,\n        isCached: true,\n        carInfo: action.payload,\n      };\n    }\n    case LOAD_CAR_PARAMETERS_ERROR: {\n      return {\n        ...state,\n        isInProgress: false,\n        isError: true,\n      };\n    }\n    case LOAD_CAR_PARAMETERS_RESET: {\n      return carPageInitialState;\n    }\n    case LOAD_CAR_MANUFACTURERS_SUCCESS: {\n      return {\n        ...state,\n        carManufacturers: action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import * as constants from './constants';\nimport { ParkingSettingsAction } from './actions';\n\n\nexport interface UserSettingsParkingPreferencesOwnProps {\n  areVoiceNotificationsEnabled: boolean,\n  isParkingAutoSearchEnabled: boolean,\n}\n\nconst parkingSettingsInitialState: UserSettingsParkingPreferencesOwnProps = {\n  areVoiceNotificationsEnabled: false,\n  isParkingAutoSearchEnabled: false,\n};\n\nexport default function parkingSettingsReducer(\n  state: UserSettingsParkingPreferencesOwnProps = parkingSettingsInitialState,\n  action: ParkingSettingsAction,\n): UserSettingsParkingPreferencesOwnProps {\n  switch (action.type) {\n    case constants.SET_VOICE_NOTIFICATIONS: {\n      return {\n        ...state,\n        areVoiceNotificationsEnabled: action.payload,\n      };\n    }\n    case constants.SET_CHECKING_PARKOPEDIA_UPDATES: {\n      return {\n        ...state,\n        isParkingAutoSearchEnabled: action.payload,\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { combineReducers } from 'redux';\nimport { History, LocationState } from 'history';\nimport { connectRouter, RouterState } from 'connected-react-router';\n\nimport baseConfigReducer, { BaseConfigState } from '../containers/BaseConfigPage/BaseConfigReducer';\nimport parkingsPageReducer, { ParkingsPageState } from './parkings/reducer';\nimport userReducer from './userState/reducer';\nimport { UserInfo } from '../interfaces/UserInfo';\nimport carPageReducer, { CarPageOwnProps } from './car/reducer';\nimport parkingSettingsReducer, { UserSettingsParkingPreferencesOwnProps } from './parkingSettings/reducer';\n\n\nexport interface RootReducer {\n  router: RouterState,\n  config: BaseConfigState,\n  parkingsPage: ParkingsPageState,\n  user: UserInfo,\n  car: CarPageOwnProps,\n  parkingSettings: UserSettingsParkingPreferencesOwnProps,\n}\n\nfunction createRootReducer(history: History<LocationState>) {\n  return combineReducers({\n    router: connectRouter(history),\n    config: baseConfigReducer,\n    parkingsPage: parkingsPageReducer,\n    user: userReducer,\n    car: carPageReducer,\n    parkingSettings: parkingSettingsReducer,\n  });\n}\n\nexport default createRootReducer;\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","interface GlobalStyledTheme {\n  readonly borderColor: string,\n}\n\nexport const lightTheme: GlobalStyledTheme = {\n  borderColor: '#dee1e4',\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport './index.global.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\nimport { history } from './store/history';\nimport { lightTheme } from './themes.styled';\n\n\nconst store = configureStore(history);\n\n// @ts-ignore\nconst renderApp = () => <App/>;\n\n// TS check hack\nconst AppConnected = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <ThemeProvider theme={lightTheme}>\n        {renderApp()}\n      </ThemeProvider>\n    </ConnectedRouter>\n  </Provider>\n);\n\nReactDOM.render(<AppConnected/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import createSagaMiddleware from 'redux-saga';\nimport { History, LocationState } from 'history';\nimport { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport initialSaga from './rootSaga';\nimport createRootReducer from './rootReducer';\n// import monitorReducersEnhancer from './monitorReducer'; // enable to investigate Redux performance\n\n\nexport default function configureStore(history: History<LocationState>) {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [routerMiddleware(history), sagaMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n  const enhancers = [middlewareEnhancer/*, monitorReducersEnhancer*/];\n  const composedEnhancers = composeWithDevTools(...enhancers);\n\n  const store = createStore(\n    createRootReducer(history),\n    undefined,\n    composedEnhancers,\n  );\n\n  sagaMiddleware.run(initialSaga);\n\n  return store;\n}\n","export const USER_UPDATE_AVATAR = 'USER_UPDATE_AVATAR';\nexport const USER_UPDATE_USERNAME = 'USER_UPDATE_USERNAME';\nexport const USER_UPDATE_FULLNAME = 'USER_UPDATE_FULLNAME';\nexport const USER_UPDATE_GENDER = 'USER_UPDATE_GENDER';\nexport const USER_UPDATE_DEFAULT_COUNTRY = 'USER_UPDATE_DEFAULT_COUNTRY';\n","import { RootReducer } from '../rootReducer';\n\nexport const userInfoSelector = (state: RootReducer) => state.user;\n\nexport const areCredentialsInvalidSelector = (state: RootReducer) => state.user.isLoginError;\n\nexport const signupErrorSelector = (state: RootReducer) => state.user.signupError;\n\nexport const isSigninAttemptInProgressSelector = (state: RootReducer) => state.user.isLoginInProgress;\n\nexport const isSignupAttemptInProgressSelector = (state: RootReducer) => state.user.isSignupInProgress;\n\nexport const isUserAuthorizedSelector = (state: RootReducer) => state.user.isAuthorized;\n\nexport const userAccessTokenSelector = (state: RootReducer) => state.user.accessToken;\n\nexport const usernameSelector = (state: RootReducer) => state.user.username;\n\nexport const userIdSelector = (state: RootReducer) => state.user.id;\n\nexport const avatarUrlSelector = (state: RootReducer) => state.user.avatarUrl;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderContainer\":\"Header_HeaderContainer__iAc1s\",\"HeaderLogo\":\"Header_HeaderLogo__1BKBJ\",\"HeaderLogoFull\":\"Header_HeaderLogoFull__1WZzz\",\"HeaderUserPanel\":\"Header_HeaderUserPanel__1Cchf\",\"HeaderUserPanelAvatar\":\"Header_HeaderUserPanelAvatar__3YE-h\",\"HeaderUserActionsDropdownList\":\"Header_HeaderUserActionsDropdownList__ktAyG\",\"HeaderUserActionsDropdownListDivider\":\"Header_HeaderUserActionsDropdownListDivider__rFL-X\",\"HeaderUserActionsDropdownLink\":\"Header_HeaderUserActionsDropdownLink__2mZow\"};","export const BASE_CONFIG_RADIUS_SET = 'config/BASE_CONFIG_RADIUS_SET';\nexport const BASE_CONFIG_RADIUS_RESET = 'config/BASE_CONFIG_RADIUS_RESET';\nexport const BASE_CONFIG_OPEN_SIDEBAR = 'config/BASE_CONFIG_OPEN_SIDEBAR';\nexport const BASE_CONFIG_CLOSE_SIDEBAR = 'config/BASE_CONFIG_CLOSE_SIDEBAR';\n\n/**\n * Used to detect whether to fetch parkings.\n * If user sees map with size g.t. [this value * 2], in other words, city zoom level,\n * do not send request for parkings.\n */\nexport const MAX_SEARCH_RADIUS_TO_FETCH = 1000;\n\nexport const INITIAL_SEARCH_RADIUS = 2000;\nexport const KYIV_CENTER_LAT = 50.4501;\nexport const KYIV_CENTER_LON = 30.5234;\n\nexport const DEFAULT_ZOOM_LEVEL = 16.248; // ~600m search radius\n","import { action, ActionType } from 'typesafe-actions';\n\nimport {\n  INIT_USER_AUTH_INFO_ON_LOAD,\n  INIT_USER_INFO_ON_LOAD,\n  NOT_ALLOWED_WITH_GUEST_PERMISSION,\n  USER_SIGN_IN_ATTEMPT,\n  USER_SIGN_IN_ERROR,\n  USER_SIGN_IN_SUCCESS,\n  USER_SIGN_OUT_ATTEMPT,\n  USER_SIGN_OUT_SUCCESS,\n  USER_SIGN_UP_ATTEMPT,\n  USER_SIGN_UP_ERROR,\n  USER_SIGN_UP_SUCCESS,\n} from '../../containers/App/constants';\nimport {\n  USER_UPDATE_AVATAR,\n  USER_UPDATE_DEFAULT_COUNTRY,\n  USER_UPDATE_FULLNAME,\n  USER_UPDATE_GENDER,\n  USER_UPDATE_USERNAME,\n} from './constants';\nimport { UserGenderType, UserInfo, UserInfoRequiredForAuth } from '../../interfaces/UserInfo';\n\n\nexport const initUserAuthInfoOnLoad = (userAuthInfo: UserInfoRequiredForAuth) => action(INIT_USER_AUTH_INFO_ON_LOAD, userAuthInfo);\nexport type initUserAuthInfoOnLoadAction = ActionType<typeof initUserAuthInfoOnLoad>;\nexport type initUserAuthInfoOnLoadActionCreator = (userAuthInfo: UserInfoRequiredForAuth) => initUserAuthInfoOnLoadAction;\n\nexport const initUserInfoOnLoad = (userInfo: UserInfo) => action(INIT_USER_INFO_ON_LOAD, userInfo);\nexport type initUserInfoOnLoadAction = ActionType<typeof initUserInfoOnLoad>;\nexport type initUserInfoOnLoadActionCreator = (userInfo: UserInfo) => initUserInfoOnLoadAction;\n\nexport const signinUserAttempt = (username: string, password: string) => action(USER_SIGN_IN_ATTEMPT, { username, password });\nexport type signinUserAttemptAction = ActionType<typeof signinUserAttempt>;\nexport type signinUserAttemptActionCreator = (username: string, password: string) => signinUserAttemptAction;\n\nexport const signinUserSuccess = (userInfo: UserInfo) => action(USER_SIGN_IN_SUCCESS, userInfo);\nexport type signinUserSuccessAction = ActionType<typeof signinUserSuccess>;\nexport type signinUserSuccessActionCreator = (userInfo: UserInfo) => signinUserSuccessAction;\n\nexport const signinUserError = () => action(USER_SIGN_IN_ERROR);\nexport type signinUserErrorAction = ActionType<typeof signinUserError>;\nexport type signinUserErrorActionCreator = () => signinUserErrorAction;\n\nexport const userSignOutAttempt = () => action(USER_SIGN_OUT_ATTEMPT);\nexport type userSignOutAttemptAction = ActionType<typeof userSignOutAttempt>;\nexport type userSignOutAttemptActionCreator = () => userSignOutAttemptAction;\n\nexport const userSignOutSuccess = () => action(USER_SIGN_OUT_SUCCESS);\nexport type userSignOutSuccessAction = ActionType<typeof userSignOutSuccess>;\nexport type userSignOutSuccessActionCreator = () => userSignOutSuccessAction;\n\nexport const signupUserAttempt = (username: string, password: string) => action(USER_SIGN_UP_ATTEMPT, { username, password });\nexport type signupUserAttemptAction = ActionType<typeof signupUserAttempt>;\nexport type signupUserAttemptActionCreator = (username: string, password: string) => signupUserAttemptAction;\n\nexport const signupUserSuccess = () => action(USER_SIGN_UP_SUCCESS);\nexport type signupUserSuccessAction = ActionType<typeof signupUserSuccess>;\nexport type signupUserSuccessActionCreator = () => signupUserSuccessAction;\n\nexport const signupUserError = (signupError: string | null) => action(USER_SIGN_UP_ERROR, { signupError });\nexport type signupUserErrorAction = ActionType<typeof signupUserError>;\nexport type signupUserErrorActionCreator = (signupError: string | null) => signupUserErrorAction;\n\nexport const notAllowedWithGuestPermission = () => action(NOT_ALLOWED_WITH_GUEST_PERMISSION);\nexport type notAllowedWithGuestPermissionAction = ActionType<typeof notAllowedWithGuestPermission>;\nexport type notAllowedWithGuestPermissionActionCreator = () => notAllowedWithGuestPermissionAction;\n\nexport const updateAvatar = (avatarUrl: string) => action(USER_UPDATE_AVATAR, avatarUrl);\nexport type updateAvatarAction = ActionType<typeof updateAvatar>;\nexport type updateAvatarActionCreator = (avatarUrl: string) => updateAvatarAction;\n\nexport const updateUsername = (username: string) => action(USER_UPDATE_USERNAME, username);\nexport type updateUsernameAction = ActionType<typeof updateUsername>;\nexport type updateUsernameActionCreator = (username: string) => updateUsernameAction;\n\nexport const updateFullname = (fullname: string) => action(USER_UPDATE_FULLNAME, fullname);\nexport type updateFullnameAction = ActionType<typeof updateFullname>;\nexport type updateFullnameActionCreator = (fullname: string) => updateFullnameAction;\n\nexport const updateGender = (gender: UserGenderType) => action(USER_UPDATE_GENDER, gender);\nexport type updateGenderAction = ActionType<typeof updateGender>;\nexport type updateGenderActionCreator = (gender: UserGenderType) => updateGenderAction;\n\nexport const updateDefaultCountry = (country: string) => action(USER_UPDATE_DEFAULT_COUNTRY, country);\nexport type updateDefaultCountryAction = ActionType<typeof updateDefaultCountry>;\nexport type updateDefaultCountryActionCreator = (country: string) => updateDefaultCountryAction;\n\nexport type UserAction = initUserAuthInfoOnLoadAction\n  | initUserInfoOnLoadAction\n  | signinUserAttemptAction\n  | signinUserSuccessAction\n  | signinUserErrorAction\n  | userSignOutAttemptAction\n  | userSignOutSuccessAction\n  | signupUserAttemptAction\n  | signupUserSuccessAction\n  | signupUserErrorAction\n  | updateAvatarAction\n  | updateUsernameAction\n  | updateFullnameAction\n  | updateGenderAction\n  | updateDefaultCountryAction\n;\n","import { action, ActionType } from 'typesafe-actions';\n\nimport {\n  ASK_PERMISSION_FOR_GEO_LOCATION,\n  CHANGE_CENTER_LOCATION,\n  CHANGE_ZOOM_LEVEL,\n  CHECK_PARKOPEDIA_UPDATES_REQUEST,\n  CHECK_PARKOPEDIA_UPDATES_SUCCESS,\n  DELETE_ALL_FREE_SLOTS,\n  DELETE_PARKING,\n  DELETE_VISIBLE_FREE_SLOTS,\n  PARKINGS_FETCH_START,\n  PARKINGS_FETCH_SUCCESS,\n  PARKINGS_REQUEST_FOR_FETCH,\n  POST_PARKING_ATTEMPT,\n  POST_PARKING_ERROR,\n  POST_PARKING_SUCCESS,\n  SYNCHRONIZE_LAT_LON,\n} from './constants';\nimport { PreparedParkings } from '../../interfaces/ResponseParkings';\nimport { ParkopediaAvailability } from '../../interfaces/ParkopediaAvailability';\nimport { ClientParkopediaParking, ParkopediaParking } from '../../interfaces/ParkopediaParking';\n\n\nexport const setParkingsPageCenter = (lat: number, lon: number) => action(CHANGE_CENTER_LOCATION, { lat, lon });\nexport type setParkingsPageCenterAction = ActionType<typeof setParkingsPageCenter>;\nexport type setParkingsPageCenterActionCreator = (lat: number, lon: number) => setParkingsPageCenterAction;\n\n\nexport const setZoomLevel = (zoomLevel: number) => action(CHANGE_ZOOM_LEVEL, zoomLevel);\nexport type setZoomLevelAction = ActionType<typeof setZoomLevel>;\nexport type setZoomLevelActionCreator = (zoomLevel: number) => setZoomLevelAction;\n\n\nexport const fetchParkingsStart = () => action(PARKINGS_FETCH_START);\nexport type fetchParkingsStartAction = ActionType<typeof fetchParkingsStart>;\nexport type fetchParkingsStartActionCreator = () => fetchParkingsStartAction;\n\n\nexport const fetchParkingsRequest = () => action(PARKINGS_REQUEST_FOR_FETCH);\nexport type fetchParkingsRequestAction = ActionType<typeof fetchParkingsRequest>;\nexport type fetchParkingsRequestActionCreator = () => fetchParkingsRequestAction;\n\n\nexport const synchronizeLatLon = () => action(SYNCHRONIZE_LAT_LON);\nexport type synchronizeLatLonAction = ActionType<typeof synchronizeLatLon>;\nexport type synchronizeLatLonActionCreator = () => synchronizeLatLonAction;\n\n\nexport const fetchParkingsSuccess = (parkings: PreparedParkings) => action(PARKINGS_FETCH_SUCCESS, parkings);\nexport type fetchParkingsSuccessAction = ActionType<typeof fetchParkingsSuccess>;\nexport type fetchParkingsSuccessActionCreator = () => fetchParkingsSuccessAction;\n\n\nexport const checkParkopediaUpdatesRequest = () => action(CHECK_PARKOPEDIA_UPDATES_REQUEST);\nexport type checkParkopediaUpdatesRequestAction = ActionType<typeof checkParkopediaUpdatesRequest>;\nexport type checkParkopediaUpdatesRequestActionCreator = () => checkParkopediaUpdatesRequestAction;\n\n\nexport const checkParkopediaUpdatesSuccess = (parkopediaAvailability: ParkopediaAvailability) => action(CHECK_PARKOPEDIA_UPDATES_SUCCESS, parkopediaAvailability);\nexport type checkParkopediaUpdatesSuccessAction = ActionType<typeof checkParkopediaUpdatesSuccess>;\nexport type checkParkopediaUpdatesSuccessActionCreator = (parkopediaAvailability: ParkopediaAvailability) => checkParkopediaUpdatesSuccessAction;\n\n\nexport const postParkingAttempt = (parkingCreated: ClientParkopediaParking) => action(POST_PARKING_ATTEMPT, parkingCreated);\nexport type postParkingAttemptAction = ActionType<typeof postParkingAttempt>;\nexport type postParkingAttemptActionCreator = (parkingCreated: ClientParkopediaParking) => postParkingAttemptAction;\n\n\nexport const postParkingSuccess = (parkingCreated: ParkopediaParking) => action(POST_PARKING_SUCCESS, parkingCreated);\nexport type postParkingSuccessAction = ActionType<typeof postParkingSuccess>;\nexport type postParkingSuccessActionCreator = (parkingCreated: ParkopediaParking) => postParkingSuccessAction;\n\n\nexport const postParkingError = () => action(POST_PARKING_ERROR);\nexport type postParkingErrorAction = ActionType<typeof postParkingError>;\nexport type postParkingErrorActionCreator = () => postParkingErrorAction;\n\n\nexport const deleteParking = (parkingId: string) => action(DELETE_PARKING, parkingId);\nexport type deleteParkingAction = ActionType<typeof deleteParking>;\nexport type deleteParkingActionCreator = (parkingId: string) => deleteParkingAction;\n\n\nexport const deleteAllFreeSlots = () => action(DELETE_ALL_FREE_SLOTS);\nexport type deleteAllFreeSlotsAction = ActionType<typeof deleteAllFreeSlots>;\nexport type deleteAllFreeSlotsActionCreator = () => deleteAllFreeSlotsAction;\n\n\nexport const deleteVisibleFreeSlots = () => action(DELETE_VISIBLE_FREE_SLOTS);\nexport type deleteVisibleFreeSlotsAction = ActionType<typeof deleteVisibleFreeSlots>;\nexport type deleteVisibleFreeSlotsActionCreator = () => deleteVisibleFreeSlotsAction;\n\n\nexport const askPermissionForGeoLocation = () => action(ASK_PERMISSION_FOR_GEO_LOCATION);\nexport type askPermissionForGeoLocationAction = ActionType<typeof askPermissionForGeoLocation>;\nexport type askPermissionForGeoLocationActionCreator = () => askPermissionForGeoLocationAction;\n\n\nexport type Actions = setParkingsPageCenterAction\n  | setZoomLevelAction\n  | fetchParkingsRequestAction\n  | fetchParkingsStartAction\n  | fetchParkingsSuccessAction\n  | checkParkopediaUpdatesRequestAction\n  | checkParkopediaUpdatesSuccessAction\n  | postParkingAttemptAction\n  | postParkingSuccessAction\n  | postParkingErrorAction\n  | deleteParkingAction\n  | deleteAllFreeSlotsAction\n  | deleteVisibleFreeSlotsAction\n  | askPermissionForGeoLocationAction\n  ;\n","import { action, ActionType } from 'typesafe-actions';\n\nimport {\n  LOAD_CAR_MANUFACTURERS_ATTEMPT, LOAD_CAR_MANUFACTURERS_ERROR, LOAD_CAR_MANUFACTURERS_SUCCESS,\n  LOAD_CAR_PARAMETERS_ATTEMPT,\n  LOAD_CAR_PARAMETERS_ERROR,\n  LOAD_CAR_PARAMETERS_RESET,\n  LOAD_CAR_PARAMETERS_SUCCESS,\n  UPDATE_CAR_PARAMETER_VALUE_ATTEMPT,\n  UPDATE_CAR_PARAMETER_VALUE_ERROR,\n  UPDATE_CAR_PARAMETER_VALUE_SUCCESS,\n} from './constants';\nimport { CarInfo } from '../../interfaces/CarInfo';\n\n\nexport const loadCarParametersAttempt = () => action(LOAD_CAR_PARAMETERS_ATTEMPT);\nexport type loadCarParametersAttemptAction = ActionType<typeof loadCarParametersAttempt>;\nexport type loadCarParametersAttemptActionCreator = () => loadCarParametersAttemptAction;\n\nexport const loadCarParametersSuccess = (carInfo: CarInfo) => action(LOAD_CAR_PARAMETERS_SUCCESS, carInfo);\nexport type loadCarParametersSuccessAction = ActionType<typeof loadCarParametersSuccess>;\nexport type loadCarParametersSuccessActionCreator = (carInfo: CarInfo) => loadCarParametersSuccessAction;\n\nexport const loadCarParametersError = () => action(LOAD_CAR_PARAMETERS_ERROR);\nexport type loadCarParametersErrorAction = ActionType<typeof loadCarParametersError>;\nexport type loadCarParametersErrorActionCreator = () => loadCarParametersErrorAction;\n\nexport const loadCarParametersReset = () => action(LOAD_CAR_PARAMETERS_RESET);\nexport type loadCarParametersResetAction = ActionType<typeof loadCarParametersReset>;\nexport type loadCarParametersResetActionCreator = () => loadCarParametersResetAction;\n\nexport const updateCarParameterValueAttempt = (paramKey: string, paramValue?: string | number) => action(UPDATE_CAR_PARAMETER_VALUE_ATTEMPT, { paramKey, paramValue });\nexport type updateCarParameterValueAttemptAction = ActionType<typeof updateCarParameterValueAttempt>;\nexport type updateCarParameterValueAttemptActionCreator = (paramKey: string, paramValue?: string | number) => updateCarParameterValueAttemptAction;\n\nexport const updateCarParameterValueSuccess = ({ paramKey, paramValue }: { paramKey: string, paramValue?: string | number }) => action(UPDATE_CAR_PARAMETER_VALUE_SUCCESS, { paramKey, paramValue });\nexport type updateCarParameterValueSuccessAction = ActionType<typeof updateCarParameterValueSuccess>;\nexport type updateCarParameterValueSuccessActionCreator = ({ paramKey, paramValue }: { paramKey: string, paramValue?: string | number }) => updateCarParameterValueSuccessAction;\n\nexport const updateCarParameterValueError = () => action(UPDATE_CAR_PARAMETER_VALUE_ERROR);\nexport type updateCarParameterValueErrorAction = ActionType<typeof updateCarParameterValueError>;\nexport type updateCarParameterValueErrorActionCreator = () => updateCarParameterValueErrorAction;\n\nexport const loadCarManufacturersAttempt = () => action(LOAD_CAR_MANUFACTURERS_ATTEMPT);\nexport type loadCarManufacturersAttemptAction = ActionType<typeof loadCarManufacturersAttempt>;\nexport type loadCarManufacturersAttemptActionCreator = () => loadCarManufacturersAttemptAction;\n\nexport const loadCarManufacturersSuccess = (manufacturersList: string[]) => action(LOAD_CAR_MANUFACTURERS_SUCCESS, manufacturersList);\nexport type loadCarManufacturersSuccessAction = ActionType<typeof loadCarManufacturersSuccess>;\nexport type loadCarManufacturersSuccessActionCreator = (manufacturersList: string[]) => loadCarManufacturersSuccessAction;\n\nexport const loadCarManufacturersError = () => action(LOAD_CAR_MANUFACTURERS_ERROR);\nexport type loadCarManufacturersErrorAction = ActionType<typeof loadCarManufacturersError>;\nexport type loadCarManufacturersErrorActionCreator = () => loadCarManufacturersErrorAction;\n\nexport type CarAction = loadCarParametersAttemptAction\n  | loadCarParametersSuccessAction\n  | loadCarParametersErrorAction\n  | loadCarParametersResetAction\n  | updateCarParameterValueAttemptAction\n  | updateCarParameterValueSuccessAction\n  | updateCarParameterValueErrorAction\n  | loadCarManufacturersAttemptAction\n  | loadCarManufacturersSuccessAction\n  | loadCarManufacturersErrorAction\n;\n","import { createSelector } from 'reselect';\n\nimport { RootReducer } from '../../store/rootReducer';\nimport { MAX_SEARCH_RADIUS_TO_FETCH } from './BaseConfigConstants';\n\nexport const configDomainSelector = (state: RootReducer) => state.config;\n\nexport const searchRadiusSelector = createSelector(\n  [configDomainSelector],\n  (configDomain) => configDomain.parkingSearchRadius,\n);\n\nexport const isSearchRadiusTooBigSelector = createSelector(\n  [searchRadiusSelector],\n  (searchRadius) => searchRadius > MAX_SEARCH_RADIUS_TO_FETCH,\n);\n\nexport const defaultLatLonSelector = createSelector(\n  [configDomainSelector],\n  (configDomain) => ({\n    lat: configDomain.startPointLat,\n    lon: configDomain.startPointLon,\n  }),\n);\n\nexport const sessionUidSelector = createSelector(\n  [configDomainSelector],\n  (configDomain) => configDomain.sessionUid,\n);\n\nexport const isSidebarOpenSelector = createSelector(\n  [configDomainSelector],\n  (configDomain) => configDomain.isSidebarOpen,\n);\n","export const SET_VOICE_NOTIFICATIONS = 'SET_VOICE_NOTIFICATIONS';\n\nexport const START_CHECKING_PARKOPEDIA_UPDATES = 'Parkings Page/START_CHECKING_PARKOPEDIA_UPDATES';\nexport const STOP_CHECKING_PARKOPEDIA_UPDATES = 'Parkings Page/STOP_CHECKING_PARKOPEDIA_UPDATES';\nexport const SET_CHECKING_PARKOPEDIA_UPDATES = 'Parkings Page/SET_CHECKING_PARKOPEDIA_UPDATES';\n","import { createSelector } from 'reselect';\nimport { Search } from 'history';\n\nimport { RootReducer } from '../rootReducer';\nimport { defaultLatLonSelector } from '../../containers/BaseConfigPage/BaseConfigSelectors';\nimport { ParkopediaParking } from '../../interfaces/ParkopediaParking';\nimport { RouterProps } from '../../interfaces/RouterProps';\n\nexport const routeLocationSelector = (state: RootReducer) => state.router.location;\nexport const routerPropsSelector = (_: RootReducer, routerProps: RouterProps) => routerProps;\n\nexport const routeParamsSelector = createSelector(\n  [routeLocationSelector],\n  paramsFromLocation,\n);\n\nfunction paramsFromLocation({ search }: { search: Search }) {\n  let params = null;\n\n  try {\n    params = JSON.parse(decodeURI(search.slice(1)));\n  } catch (e) {\n    params = search\n      .slice(1)\n      .split('&')\n      .reduce((params: any, currPair: string) => {\n        const [key, value] = currPair.split('=');\n        return {\n          ...params,\n          ...{ [key]: value },\n        };\n      }, {});\n  }\n\n  return params;\n}\n\nexport const latLonSelector = createSelector(\n  [routeParamsSelector, defaultLatLonSelector],\n  ({ lat: latFromUrl, lon: lonFromUrl }: { lat?: number, lon?: number }, defaultLatLon) => {\n    return ({\n      lat: isFinite(Number(latFromUrl)) ? Number(latFromUrl) : defaultLatLon.lat,\n      lon: isFinite(Number(lonFromUrl)) ? Number(lonFromUrl) : defaultLatLon.lon,\n    });\n  },\n);\n\nexport const zoomLevelSelector = (state: RootReducer) => state.parkingsPage.zoomLevel;\n\nconst parkingsPageDomainSelector = (state: RootReducer) => state.parkingsPage;\n\nexport const allParkingsSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.allParkings,\n);\n\nexport const freeParkingsSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.freeParkings,\n);\n\nexport const isParkingFetchInProgressSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.isFetchInProgress,\n);\n\nexport const wasFetchPerformedSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.wasFetchPerformed,\n);\n\nexport const centerCoordinatesSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => ({\n    lat: parkingsPageDomain.centerLat,\n    lon: parkingsPageDomain.centerLon,\n  }),\n);\n\nexport const centerCoordinatesLatitudeSelector = createSelector(\n  [centerCoordinatesSelector],\n  (centerCoordinates) => centerCoordinates.lat,\n);\n\nexport const centerCoordinatesLongitudeSelector = createSelector(\n  [centerCoordinatesSelector],\n  (centerCoordinates) => centerCoordinates.lon,\n);\n\nexport const lastParkingsCheckTimestampSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.lastParkingsCheckTimestamp,\n);\n\ntype selectedParkingSelector = (rr: RootReducer) => ParkopediaParking | null;\n// @ts-ignore\nexport const selectedParkingSelector: selectedParkingSelector = createSelector(\n  [routerPropsSelector, allParkingsSelector],\n  (routerProps, allParkings) => {\n    const selectedParkingId = routerProps.match.params.selectedParkingId;\n    const selectedParking = allParkings.find(({ id }) => id === selectedParkingId) || null;\n    return selectedParking;\n  },\n);\n","import { RootReducer } from '../rootReducer';\n\n\nexport const areVoiceNotificationsEnabledSelector = (state: RootReducer) => state.parkingSettings.areVoiceNotificationsEnabled;\n\nexport const isParkingAutoSearchEnabledSelector = (state: RootReducer) => state.parkingSettings.isParkingAutoSearchEnabled;\n","export const CHANGE_CENTER_LOCATION = 'App/CHANGE_CENTER_LOCATION';\nexport const CHANGE_ZOOM_LEVEL = 'App/CHANGE_ZOOM_LEVEL';\n\nexport const SYNCHRONIZE_LAT_LON = 'Parkings Page/SYNCHRONIZE_LAT_LON';\nexport const ASK_PERMISSION_FOR_GEO_LOCATION = 'Parkings Page/ASK_PERMISSION_FOR_GEO_LOCATION';\n\nexport const PARKINGS_FETCH_START = 'Parkings Page/PARKINGS_FETCH_START';\nexport const PARKINGS_REQUEST_FOR_FETCH = 'Parkings Page/PARKINGS_REQUEST_FOR_FETCH';\nexport const PARKINGS_FETCH_SUCCESS = 'Parkings Page/PARKINGS_FETCH_SUCCESS';\n\nexport const POST_PARKING_ATTEMPT = 'Parkings Page/POST_PARKING_ATTEMPT';\nexport const POST_PARKING_SUCCESS = 'Parkings Page/POST_PARKING_SUCCESS';\nexport const POST_PARKING_ERROR = 'Parkings Page/POST_PARKING_ERROR';\n\nexport const SET_PARKING_FREE_STATUS = 'Parkings Page/SET_PARKING_FREE_STATUS';\n\nexport const CHECK_PARKOPEDIA_UPDATES_REQUEST = 'Parkings Page/CHECK_PARKOPEDIA_UPDATES_REQUEST';\nexport const CHECK_PARKOPEDIA_UPDATES_SUCCESS = 'Parkings Page/CHECK_PARKOPEDIA_UPDATES_SUCCESS';\n\nexport const DELETE_PARKING = 'Parkings Page/DELETE_PARKING';\nexport const DELETE_ALL_FREE_SLOTS = 'Parkings Page/DELETE_ALL_FREE_SLOTS';\nexport const DELETE_VISIBLE_FREE_SLOTS = 'Parkings Page/DELETE_VISIBLE_FREE_SLOTS';\n","import findParkings from '../assets/images/findParking.png';\nimport myAccount from '../assets/images/myAccount.svg';\nimport myDrives from '../assets/images/myDrives.png';\nimport defaultUserIcon from '../assets/images/defaultUserIcon.svg';\n\n\nexport default class ImagesService {\n  public static commonImages = {\n    defaultUserIcon,\n  };\n\n  public static driverImages = {\n    findParkings,\n    myAccount,\n    myDrives,\n  };\n\n  public static getBase64(file?: File): Promise<string> {\n    if (!file) {\n      return Promise.resolve('');\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      // @ts-ignore\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    })\n      .then(value => value ? String(value) : '')\n      .catch(err => String(err));\n  };\n}\n","import { RootReducer } from '../rootReducer';\n\nexport const carInfoSelector = (state: RootReducer) => state.car.carInfo;\n\nexport const carManufacturersSelector = (state: RootReducer) => state.car.carManufacturers;\n\nexport const carPageIsInProgressSelector = (state: RootReducer) => state.car.isInProgress;\nexport const carPageIsErrorSelector = (state: RootReducer) => state.car.isError;\nexport const carPageIsCachedSelector = (state: RootReducer) => state.car.isCached;\n","import * as path from 'path';\n\nimport { UserInfo } from '../interfaces/UserInfo';\nimport { USER_ROLE_ADMIN, USER_ROLE_DRIVER, USER_ROLE_GUEST } from '../store/userState/reducer';\n\n\nexport default class UrlService {\n  private static rootUrl = '/free-parkings-ui';\n\n  public static readonly loginPageUrl = path.join(UrlService.rootUrl, '/login');\n  public static readonly loginPageRolesAllowed = new Set([\n    USER_ROLE_GUEST,\n  ]);\n\n  public static readonly signupPageUrl = path.join(UrlService.rootUrl, '/signup');\n  public static readonly signupPageRolesAllowed = new Set([\n    USER_ROLE_GUEST,\n  ]);\n\n  public static readonly configPageUrl = path.join(UrlService.rootUrl, '/config');\n  public static readonly configPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly dashboardPageUrl = path.join(UrlService.rootUrl, '/dashboard');\n  public static readonly dashboardPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly settingsPageUrl = path.join(UrlService.rootUrl, '/driver-account');\n  public static readonly settingsPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly parkingsPageUrl = path.join(UrlService.rootUrl, '/parkings');\n  public static readonly parkingsPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly findParkingsPageUrl = path.join(UrlService.parkingsPageUrl, '/find-parking');\n  public static readonly findParkingsPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly createParkingPageUrl = path.join(UrlService.parkingsPageUrl, '/create-parking');\n  public static readonly editParkingPageUrl = path.join(UrlService.parkingsPageUrl, '/edit-parking');\n  public static readonly editParkingPageUrlWithParams = (parkingId: string) => path.join(UrlService.editParkingPageUrl, parkingId);\n  public static readonly editParkingPageUrlRoute = `${UrlService.editParkingPageUrl}/:selectedParkingId`;\n\n  public static readonly myDrivesPageUrl = path.join(UrlService.rootUrl, '/my-drives');\n  public static readonly myDrivesPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly detectPageByUserInfo = function(userInfo?: UserInfo): string {\n    if (!userInfo || !userInfo.role || userInfo.role === USER_ROLE_GUEST) {\n      return UrlService.loginPageUrl;\n    } else if (userInfo.role === USER_ROLE_ADMIN || userInfo.role === USER_ROLE_DRIVER) {\n      return UrlService.dashboardPageUrl;\n    }\n    return UrlService.rootUrl;\n  };\n\n  public static readonly isRouteAllowed = function(userInfo: UserInfo, routeRolesAllowed: Set<string>): boolean {\n    return routeRolesAllowed.has(userInfo.role);\n  }\n}\n"],"sourceRoot":""}
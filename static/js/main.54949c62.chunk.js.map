{"version":3,"sources":["components/CommonStyled/commonStyled.ts","components/CommonStyled/PageWrapper.styled.ts","store/car/selectors.ts","services/Images.service.ts","components/Loader/Loader.tsx","containers/App/App.module.css","store/parkings/constants.ts","assets/images/findParking.png","assets/images/myAccount.svg","assets/images/drivers.png","assets/images/defaultUserIcon.svg","components/Loader/Loader.module.css","services/Url.service.ts","containers/App/constants.ts","assets/audio/parking-found.mp3","store/userState/reducer.ts","store/car/constants.ts","store/userState/constants.ts","store/userState/selectors.ts","store/allUsers/constants.ts","components/Header/Header.tsx","HOCs/ProtectedRoute.jsx","containers/App/App.tsx","serviceWorker.js","store/parkings/adapters.ts","constants/backend.ts","utils/serialize.ts","services/GeoLocation.service.ts","services/Authentication.service.ts","services/AudioService.ts","store/parkingSettings/saga.ts","store/parkings/saga.ts","services/LocalStorage.service.ts","store/userState/adapters.ts","store/userState/saga.ts","store/car/adapters.ts","store/car/saga.ts","store/allUsers/saga.ts","store/rootSaga.ts","containers/BaseConfigPage/BaseConfigReducer.ts","store/parkings/reducer.ts","store/car/reducer.ts","store/parkingSettings/reducer.ts","store/allUsers/reducer.ts","store/rootReducer.ts","store/history.ts","themes.styled.ts","index.tsx","store/configureStore.ts","components/Header/Header.module.css","containers/BaseConfigPage/BaseConfigConstants.ts","store/userState/actions.ts","store/car/actions.ts","store/parkings/actions.ts","containers/BaseConfigPage/BaseConfigSelectors.ts","store/parkingSettings/constants.ts","store/allUsers/actions.ts","components/CommonStyled/Tile.styled.ts","store/parkings/selectors.ts","constants/colors.ts","store/parkingSettings/selectors.ts"],"names":["_PageWrapper_styled__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_Tile_styled__WEBPACK_IMPORTED_MODULE_1__","PageWrapper","styled","section","_templateObject","carInfoSelector","isCarInfoFullyFilledSelector","carManufacturersSelector","carPageIsInProgressSelector","carPageIsErrorSelector","carPageIsCachedSelector","reselect__WEBPACK_IMPORTED_MODULE_0__","state","car","carInfo","createSelector","Boolean","length","width","height","carManufacturers","isInProgress","isError","isCached","ImagesService","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","then","value","String","catch","err","commonImages","defaultUserIcon","driverImages","findParkings","myAccount","drivers","Loader","react__WEBPACK_IMPORTED_MODULE_5__","className","styles","React","module","exports","AppContainer","CHANGE_CENTER_LOCATION","CHANGE_ZOOM_LEVEL","SYNCHRONIZE_LAT_LON","ASK_PERMISSION_FOR_GEO_LOCATION","PARKINGS_FETCH_START","PARKINGS_REQUEST_FOR_FETCH","PARKINGS_FETCH_SUCCESS","POST_PARKING_ATTEMPT","POST_PARKING_SUCCESS","POST_PARKING_ERROR","CHECK_PARKINGS_UPDATES_REQUEST","CHECK_PARKINGS_UPDATES_SUCCESS","DELETE_PARKING","DELETE_ALL_FREE_SLOTS","DELETE_VISIBLE_FREE_SLOTS","p","loader","load8","UrlService","rootUrl","loginPageUrl","path","loginPageRolesAllowed","Set","USER_ROLE_GUEST","signupPageUrl","signupPageRolesAllowed","configPageUrl","configPageRolesAllowed","USER_ROLE_DRIVER","USER_ROLE_ADMIN","dashboardPageUrl","dashboardPageRolesAllowed","settingsPageUrl","settingsPageRolesAllowed","parkingsPageUrl","parkingsPageRolesAllowed","findParkingsPageUrl","findParkingsPageRolesAllowed","createParkingPageUrl","editParkingPageUrl","editParkingPageUrlWithParams","parkingId","editParkingPageUrlRoute","allUsersPageUrl","allUsersPageRolesAllowed","detectPageByUserInfo","userInfo","role","isRouteAllowed","routeRolesAllowed","has","INIT_USER_AUTH_INFO_ON_LOAD","INIT_USER_INFO_ON_LOAD","NOT_ALLOWED_WITH_GUEST_PERMISSION","USER_SIGN_IN_ATTEMPT","USER_SIGN_IN_SUCCESS","USER_SIGN_IN_ERROR","USER_SIGN_OUT_ATTEMPT","USER_SIGN_OUT_SUCCESS","USER_SIGN_OUT_ERROR","USER_SIGN_UP_ATTEMPT","USER_SIGN_UP_SUCCESS","USER_SIGN_UP_ERROR","USER_GENDER_NOT_APPLIED","POSSIBLE_GENDER_LIST","userInitialState","id","isLoginInProgress","isSignupInProgress","isLoginError","signupError","isAuthorized","imageUrl","username","fullname","defaultCountry","userReducer","arguments","undefined","action","type","Object","_home_travis_build_goodwin64_free_parkings_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","payload","gender","USER_UPDATE_AVATAR","USER_UPDATE_USERNAME","USER_UPDATE_FULLNAME","USER_UPDATE_GENDER","USER_UPDATE_DEFAULT_COUNTRY","LOAD_CAR_PARAMETERS_ATTEMPT","LOAD_CAR_PARAMETERS_SUCCESS","LOAD_CAR_PARAMETERS_ERROR","LOAD_CAR_PARAMETERS_RESET","UPDATE_CAR_PARAMETER_VALUE_ATTEMPT","UPDATE_CAR_PARAMETER_VALUE_SUCCESS","UPDATE_CAR_PARAMETER_VALUE_ERROR","LOAD_CAR_MANUFACTURERS_ATTEMPT","LOAD_CAR_MANUFACTURERS_SUCCESS","LOAD_CAR_MANUFACTURERS_ERROR","userInfoSelector","areCredentialsInvalidSelector","signupErrorSelector","isSigninAttemptInProgressSelector","isSignupAttemptInProgressSelector","isUserAuthorizedSelector","userAccessTokenSelector","usernameSelector","userIdSelector","avatarUrlSelector","user","accessToken","LOAD_ALL_USERS_ATTEMPT","LOAD_ALL_USERS_SUCCESS","LOAD_ALL_USERS_ERROR","SET_USER_ROLE_ATTEMPT","SET_USER_ROLE_SUCCESS","SET_USER_ROLE_ERROR","Header","react_default","a","createElement","react_router_dom","to","this","props","onClick","userSignOut","src","alt","renderUserActionsDropdown","renderLogo","renderUserPanel","PureComponent","mapStateToProps","createStructuredSelector","mapDispatchToProps","userSignOutAttempt","withConnect","connect","compose","ProtectedRoute","_ref","Component","component","allowed","_ref$RedirectComponen","RedirectComponent","_ref$redirectPath","redirectPath","rest","objectWithoutProperties","react_router","assign","render","pathname","from","location","defaultProps","redirectComponent","LoginPage","lazy","e","bind","SignupPage","AllUsersPage","ParkingsPage","all","DashboardPage","UserSettingsPage","App","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","css","components_Header_Header","Suspense","fallback","commonStyled","HOCs_ProtectedRoute","exact","isUserAuthorized","window","hostname","match","prepareParkings","rawResponseParkings","preparedResponse","Array","isArray","map","prepareParkopediaParkingSlot","parkingSlot","prepareParkingParametersFromClientToServer","rawParkingParameters","rawGeometry","parkingsGeoJsonSource","isLatLon","parkingLength","parkingWidth","parkingHeight","restParameters","geometry","rawParkingGeometry","parkingPoints","split","rawParkingPoint","_rawParkingPoint$spli","s","parseFloat","trim","_rawParkingPoint$spli2","slicedToArray","lat","lon","prepareUserInputParkingPoint","filter","isValidPoint","prepareUserInputParkingGeometry","objectSpread","pointGeometry","every","isFinite","backendEndpoint","serialize","obj","prefix","str","hasOwnProperty","k","v","push","encodeURIComponent","join","GeoLocation_service","getUserLocation","navigator","geolocation","getCurrentPosition","watchUserLocation","watchPosition","getUserLatLon","coords","latitude","longitude","requestToFreeParkingsAPI","checkStatus","response","status","parseJSON","json","url","options","_args","regenerator_default","wrap","_context","prev","next","select","sent","fetch","headers","Content-Type","access_token","abrupt","stop","_marked","parkingIsFoundPath","require","AudioService","startCheckingParkopediaUpdatesSaga","parkingVoiceNotification","defaultParkingSettingsSaga","checkParkopediaUpdatesTimer","isParkingAutoSearchEnabled","isParkingAutoSearchEnabledSelector","call","checkForParkingsUpdates","delay","saga_marked","stopCheckingParkopediaUpdatesSaga","preparedResponseParkings","_context2","areVoiceNotificationsEnabledSelector","Audio","play","_marked2","_context3","takeLatest","parkingSettinsConstants","_marked3","fetchParkingsSaga","updateUrlLatLonSaga","synchronizeLatLonSaga","clearAllFreeSlotsSaga","clearVisibleFreeSlotsSaga","detectGeoLocationSaga","createParkingSaga","updateParkingSaga","postParkingSaga","deleteParkingSaga","defaultParkingsSaga","searchRadius","canFetchParkings","searchQuery","centerCoordinatesSelector","searchRadiusSelector","MAX_SEARCH_RADIUS_TO_FETCH","put","ParkingsPageActions","radius","concat","t0","console","parkings_saga_marked","search","saga_marked2","_ref2","latFromUrl","lonFromUrl","latLonSelector","setParkingsPageCenter","saga_marked3","_context4","fetchParkingsRequest","_marked4","_context5","method","_marked5","_ref3","uid","_context6","sessionUidSelector","body","JSON","stringify","Accept","_marked6","_ref4","_context7","GeoLocationService","_marked7","preparedParkingParameters","createdParking","_context8","_marked8","_context9","_marked9","parking","_context10","postParkingSuccess","postParkingError","_marked10","_context11","_marked11","_context12","throttle","parkingsConstants","takeEvery","_marked12","updateUserInfoLocallySaga","LocalStorageService","userAuthInfoJSON","localStorage","getItem","parse","getUserInfo","info","setItem","removeItem","saveUserInfoRequiredForAuth","LocalStorage_service_marked","userInfoAdapter","loginInfo","name","personalInfo","surname","redirectToPageByRole","signinUserAttemptSaga","signinUserSuccessSaga","signoutUserSuccessSaga","signoutUserAttemptSaga","loadUserInfoByAccessToken","initUserInfoOnLoadSaga","signupUserAttemptSaga","signupUserSuccessSaga","updatePersonalInfoField","updateAvatarSaga","updateUsernameSaga","updateFullnameSaga","updateGenderSaga","updateDefaultCountrySaga","userState_saga_marked","_action$payload","password","signinUserSuccess","signinUserError","userState_saga_marked2","loadCarParametersAttempt","userState_saga_marked3","loadCarParametersReset","removeUserInfo","saga_marked4","userSignOutSuccess","saga_marked5","userId","initUserInfoOnLoad","saga_marked6","userInfoRequiredForAuth","getUserInfoRequiredForAuth","initUserAuthInfoOnLoad","saga_marked7","_action$payload2","errorData","errorMessage","signupUserSuccess","isString","message","signupUserError","saga_marked8","alert","saga_marked9","defineProperty","saga_marked10","saga_marked11","saga_marked12","_context13","_marked13","_context14","_marked14","_context15","_marked15","defaultLoginPageSaga","mark","_context16","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","prepareCarInfo","rawCarInfo","isObject","loadCarDataIfAbsent","updateCarParameterValueSaga","loadCarManufacturers","defaultCarPageSaga","carPageIsCached","preparedCarInfo","loadCarParametersSuccess","loadCarParametersError","car_saga_marked","paramKey","paramValue","updateCarParameterValueSuccess","updateCarParameterValueError","car_saga_marked2","manufacturersList","loadCarManufacturersAttempt","loadCarManufacturersSuccess","loadCarManufacturersError","car_saga_marked3","car_saga_marked4","loadAllUsersSaga","setUserRoleSaga","defaultAllUsersSaga","allUsers","loadAllUsersSuccess","loadAllUsersError","allUsers_saga_marked","setUserRoleSuccess","setUserRoleError","allUsers_saga_marked2","constants","allUsers_saga_marked3","initSaga","rootSaga_marked","BaseConfigInitialState","parkingSearchRadius","BaseConfigConstants","startPointLat","startPointLon","defaultZoomLevel","sessionUid","Math","random","slice","isSidebarOpen","baseConfigReducer","ParkingsPageInitialState","centerLat","centerLon","zoomLevel","lastParkingsCheckTimestamp","lastParkingsCheckUpdatesCount","isFetchInProgress","wasFetchPerformed","allParkings","freeParkings","reducer","uniqBy","toConsumableArray","timestamp","updatesCount","carPageInitialState","carPageReducer","parkingSettingsInitialState","areVoiceNotificationsEnabled","parkingSettingsReducer","allUsersPageInitialState","users","allUsersReducer","userIndex","findIndex","updatedUser","updatedUsersList","setWith","clone","createRootReducer","history","combineReducers","router","connectRouter","config","parkingsPage","parkingsPageReducer","parkingSettings","createBrowserHistory","lightTheme","borderColor","store","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","run","initialSaga","configureStore","ReactDOM","es","esm","styled_components_browser_esm","theme","containers_App_App","document","getElementById","serviceWorker","ready","registration","unregister","HeaderContainer","HeaderLogo","HeaderLogoFull","HeaderUserPanel","HeaderUserPanelAvatar","HeaderUserActionsDropdownList","HeaderUserActionsDropdownListDivider","HeaderUserActionsDropdownLink","BASE_CONFIG_RADIUS_SET","BASE_CONFIG_RADIUS_RESET","BASE_CONFIG_OPEN_SIDEBAR","BASE_CONFIG_CLOSE_SIDEBAR","INITIAL_SEARCH_RADIUS","KYIV_CENTER_LAT","KYIV_CENTER_LON","DEFAULT_ZOOM_LEVEL","signinUserAttempt","signupUserAttempt","updateAvatar","updateUsername","updateFullname","updateGender","updateDefaultCountry","typesafe_actions__WEBPACK_IMPORTED_MODULE_0__","_containers_App_constants__WEBPACK_IMPORTED_MODULE_1__","_constants__WEBPACK_IMPORTED_MODULE_2__","userAuthInfo","avatarUrl","country","updateCarParameterValueAttempt","_constants__WEBPACK_IMPORTED_MODULE_1__","setZoomLevel","fetchParkingsStart","synchronizeLatLon","fetchParkingsSuccess","checkParkopediaUpdatesRequest","postParkingAttempt","deleteParking","deleteAllFreeSlots","deleteVisibleFreeSlots","askPermissionForGeoLocation","parkings","parkingCreated","isSearchRadiusTooBigSelector","defaultLatLonSelector","isSidebarOpenSelector","_BaseConfigConstants__WEBPACK_IMPORTED_MODULE_1__","configDomainSelector","configDomain","SET_VOICE_NOTIFICATIONS","START_CHECKING_PARKOPEDIA_UPDATES","STOP_CHECKING_PARKOPEDIA_UPDATES","SET_CHECKING_PARKOPEDIA_UPDATES","loadAllUsersAttempt","setUserRoleAttempt","Tile","COLORS","colorAntiMain","withRoundedCorners","withShadow","TileHeader","header","_templateObject2","colorBorder","TileBody","main","_templateObject3","routeParamsSelector","params","decodeURI","reduce","currPair","_currPair$split","_currPair$split2","_home_travis_build_goodwin64_free_parkings_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_goodwin64_free_parkings_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_home_travis_build_goodwin64_free_parkings_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","defaultLatLon","Number","zoomLevelSelector","parkingsPageDomainSelector","allParkingsSelector","parkingsPageDomain","freeParkingsSelector","isParkingFetchInProgressSelector","wasFetchPerformedSelector","centerCoordinatesLatitudeSelector","centerCoordinates","centerCoordinatesLongitudeSelector","selectedParkingSelector","_","routerProps","selectedParkingId","find","colorMainText","colorGreyPopup","colorExtraText","colorAccent1","colorAccent2","colorAccent3","colorAccent4","colorInactive","colorBorderError","pageBackground"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,KAAAA,EAAAC,EAAAC,EAAA,sBAAAH,EAAA,QAAAI,EAAAH,EAAA,IAAAA,EAAAC,EAAAC,EAAA,sBAAAC,EAAA,IAAAH,EAAAC,EAAAC,EAAA,sBAAAC,EAAA,IAAAH,EAAAC,EAAAC,EAAA,sBAAAC,EAAA,8QCGO,IAAMC,QAAcC,EAAOC,QAAVC,uCCFxBP,EAAAC,EAAAC,EAAA,sBAAAM,IAAAR,EAAAC,EAAAC,EAAA,sBAAAO,IAAAT,EAAAC,EAAAC,EAAA,sBAAAQ,IAAAV,EAAAC,EAAAC,EAAA,sBAAAS,IAAAX,EAAAC,EAAAC,EAAA,sBAAAU,IAAAZ,EAAAC,EAAAC,EAAA,sBAAAW,IAAA,IAAAC,EAAAd,EAAA,IAEaQ,EAAkB,SAACO,GAAD,OAAwBA,EAAMC,IAAIC,SAEpDR,EAA+BS,YAC1C,CAACV,GACD,SAAAS,GAAO,OAAIE,QAAQF,EAAQG,QAAUH,EAAQI,OAASJ,EAAQK,UAGnDZ,EAA2B,SAACK,GAAD,OAAwBA,EAAMC,IAAIO,kBAE7DZ,EAA8B,SAACI,GAAD,OAAwBA,EAAMC,IAAIQ,cAChEZ,EAAyB,SAACG,GAAD,OAAwBA,EAAMC,IAAIS,SAC3DZ,EAA0B,SAACE,GAAD,OAAwBA,EAAMC,IAAIU,wKCRpDC,yGAWKC,GACtB,OAAKA,EAIE,IAAIC,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GAErBI,EAAOG,OAAS,kBAAML,EAAQE,EAAOI,SACrCJ,EAAOK,QAAU,SAAAC,GAAK,OAAIP,EAAOO,MAEhCC,KAAK,SAAAC,GAAK,OAAIA,EAAQC,OAAOD,GAAS,KACtCE,MAAM,SAAAC,GAAG,OAAIF,OAAOE,KAXdd,QAAQC,QAAQ,aAbRH,EACLiB,aAAe,CAC3BC,qBAFiBlB,EAKLmB,aAAe,CAC3BC,iBACAC,cACAC,2GCVEC,mLAEF,OACEC,EAAA,qBAAKC,UAAWC,UAAhB,qBAHeC,iBAQNJ,2BCXfK,EAAAC,QAAA,CAAkBC,aAAA,4DCDlBzD,EAAAC,EAAAC,EAAA,sBAAAwD,IAAA1D,EAAAC,EAAAC,EAAA,sBAAAyD,IAAA3D,EAAAC,EAAAC,EAAA,sBAAA0D,IAAA5D,EAAAC,EAAAC,EAAA,sBAAA2D,IAAA7D,EAAAC,EAAAC,EAAA,sBAAA4D,IAAA9D,EAAAC,EAAAC,EAAA,sBAAA6D,IAAA/D,EAAAC,EAAAC,EAAA,sBAAA8D,IAAAhE,EAAAC,EAAAC,EAAA,sBAAA+D,IAAAjE,EAAAC,EAAAC,EAAA,sBAAAgE,IAAAlE,EAAAC,EAAAC,EAAA,sBAAAiE,IAAAnE,EAAAC,EAAAC,EAAA,sBAAAkE,IAAApE,EAAAC,EAAAC,EAAA,sBAAAmE,IAAArE,EAAAC,EAAAC,EAAA,sBAAAoE,IAAAtE,EAAAC,EAAAC,EAAA,sBAAAqE,IAAAvE,EAAAC,EAAAC,EAAA,sBAAAsE,IAAO,IAAMd,EAAyB,6BACzBC,EAAoB,wBAEpBC,EAAsB,oCACtBC,EAAkC,gDAElCC,EAAuB,qCACvBC,EAA6B,2CAC7BC,EAAyB,uCAEzBC,EAAuB,qCACvBC,EAAuB,qCACvBC,EAAqB,mCAIrBC,EAAiC,+CACjCC,EAAiC,+CAEjCC,EAAiB,+BACjBC,EAAwB,sCACxBC,EAA4B,+DCrBzCjB,EAAAC,QAAiBxD,EAAAyE,EAAuB,6DCAxClB,EAAAC,QAAiBxD,EAAAyE,EAAuB,2DCAxClB,EAAAC,QAAiBxD,EAAAyE,EAAuB,yDCAxClB,EAAAC,QAAiBxD,EAAAyE,EAAuB,iECCxClB,EAAAC,QAAA,CAAkBkB,OAAA,uBAAAC,MAAA,oHCKGC,sCACLC,QAAU,oBADLD,EAGIE,aAAeC,OAAUH,EAAWC,QAAS,UAHjDD,EAIII,sBAAwB,IAAIC,IAAI,CACrDC,MALiBN,EAQIO,cAAgBJ,OAAUH,EAAWC,QAAS,WARlDD,EASIQ,uBAAyB,IAAIH,IAAI,CACtDC,MAViBN,EAaIS,cAAgBN,OAAUH,EAAWC,QAAS,WAblDD,EAcIU,uBAAyB,IAAIL,IAAI,CACtDM,IAAkBC,MAfDZ,EAkBIa,iBAAmBV,OAAUH,EAAWC,QAAS,cAlBrDD,EAmBIc,0BAA4B,IAAIT,IAAI,CACzDM,IAAkBC,MApBDZ,EAuBIe,gBAAkBZ,OAAUH,EAAWC,QAAS,mBAvBpDD,EAwBIgB,yBAA2B,IAAIX,IAAI,CACxDM,IAAkBC,MAzBDZ,EA4BIiB,gBAAkBd,OAAUH,EAAWC,QAAS,aA5BpDD,EA6BIkB,yBAA2B,IAAIb,IAAI,CACxDM,IAAkBC,MA9BDZ,EAiCImB,oBAAsBhB,OAAUH,EAAWiB,gBAAiB,iBAjChEjB,EAkCIoB,6BAA+B,IAAIf,IAAI,CAC5DM,IAAkBC,MAnCDZ,EAsCIqB,qBAAuBlB,OAAUH,EAAWiB,gBAAiB,mBAtCjEjB,EAuCIsB,mBAAqBnB,OAAUH,EAAWiB,gBAAiB,iBAvC/DjB,EAwCIuB,6BAA+B,SAACC,GAAD,OAAuBrB,OAAUH,EAAWsB,mBAAoBE,IAxCnGxB,EAyCIyB,kCAA6BzB,EAAWsB,0CAzC5CtB,EA2CI0B,gBAAkBvB,OAAUH,EAAWC,QAAS,cA3CpDD,EA4CI2B,yBAA2B,IAAItB,IAAI,CACxDO,MA7CiBZ,EAgDI4B,qBAAuB,SAASC,GACrD,OAAKA,GAAaA,EAASC,MAAQD,EAASC,OAASxB,IAE1CuB,EAASC,OAASlB,KAAmBiB,EAASC,OAASnB,IACzDX,EAAWa,iBAEbb,EAAWC,QAJTD,EAAWE,cAlDHF,EAyDI+B,eAAiB,SAASF,EAAoBG,GACnE,OAAOA,EAAkBC,IAAIJ,EAASC,8EChE1C1G,EAAAC,EAAAC,EAAA,sBAAA4G,IAAA9G,EAAAC,EAAAC,EAAA,sBAAA6G,IAAA/G,EAAAC,EAAAC,EAAA,sBAAA8G,IAAAhH,EAAAC,EAAAC,EAAA,sBAAA+G,IAAAjH,EAAAC,EAAAC,EAAA,sBAAAgH,IAAAlH,EAAAC,EAAAC,EAAA,sBAAAiH,IAAAnH,EAAAC,EAAAC,EAAA,sBAAAkH,IAAApH,EAAAC,EAAAC,EAAA,sBAAAmH,IAAArH,EAAAC,EAAAC,EAAA,sBAAAoH,IAAAtH,EAAAC,EAAAC,EAAA,sBAAAqH,IAAAvH,EAAAC,EAAAC,EAAA,sBAAAsH,IAAAxH,EAAAC,EAAAC,EAAA,sBAAAuH,IAAO,IAAMX,EAA8B,8BAC9BC,EAAyB,yBACzBC,EAAoC,oCAEpCC,EAAuB,uBACvBC,EAAuB,uBACvBC,EAAqB,qBAErBC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAsB,sBAEtBC,EAAuB,uBACvBC,EAAuB,uBACvBC,EAAqB,gECdlClE,EAAAC,QAAiBxD,EAAAyE,EAAuB,sUCsB3BS,EAAkB,QAClBM,EAAkB,QAClBD,EAAmB,SAInBmC,EAA0B,MAE1BC,EAAuB,CAJJ,OACE,SAMhCD,GAGWE,EAA6B,CACxCC,GAAI,KACJC,mBAAmB,EACnBC,oBAAoB,EACpBC,cAAc,EACdC,YAAa,KACbC,cAAc,EACdxB,KAAMxB,EACNiD,SAAU,mFACVC,SAAU,mBACVC,SAAU,GACVC,eAAgB,IAGH,SAASC,IAGZ,IAFVxH,EAEUyH,UAAApH,OAAA,QAAAqH,IAAAD,UAAA,GAAAA,UAAA,GAFQZ,EAClBc,EACUF,UAAApH,OAAA,EAAAoH,UAAA,QAAAC,EACV,OAAQC,EAAOC,MACb,KAAK7B,IAOL,KAAKC,IACH,OAAO6B,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EACA2H,EAAOI,QAFZ,CAGEZ,cAAc,IAGlB,KAAKjB,IACH,OAAO2B,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEE+G,mBAAmB,EACnBE,cAAc,IAGlB,KAAKd,IACH,OAAO0B,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EACA2H,EAAOI,QAFZ,CAGEhB,mBAAmB,EACnBE,cAAc,EACdE,cAAc,IAGlB,KAAKf,IACH,OAAOyB,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEE+G,mBAAmB,EACnBE,cAAc,EACdE,cAAc,EACdC,SAAUP,EAAiBO,SAC3BC,SAAUR,EAAiBQ,SAC3BW,OAAQnB,EAAiBmB,SAG7B,KAAK1B,IACH,OAAOO,EAET,KAAKL,IACH,OAAOqB,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEEgH,oBAAoB,EACpBE,YAAa,OAGjB,KAAKT,IACH,OAAOoB,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEEgH,oBAAoB,EACpBE,YAAa,OAGjB,KAAKR,IACH,OAAOmB,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEEgH,oBAAoB,EACpBE,YAAaS,EAAOI,QAAQb,cAGhC,KAAKe,IACH,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEEoH,SAAUO,EAAOI,UAGrB,KAAKG,IACH,OAAOL,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEEqH,SAAUM,EAAOI,UAGrB,KAAKI,IACH,OAAON,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEEsH,SAAUK,EAAOI,UAGrB,KAAKK,IACH,OAAOP,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEEgI,OAAQL,EAAOI,UAGnB,KAAKM,IACH,OAAOR,OAAAC,EAAA,EAAAD,CAAA,GACF7H,EADL,CAEEuH,eAAgBI,EAAOI,UAG3B,QACE,OAAO/H,qCCvJbf,EAAAC,EAAAC,EAAA,sBAAAmJ,IAAArJ,EAAAC,EAAAC,EAAA,sBAAAoJ,IAAAtJ,EAAAC,EAAAC,EAAA,sBAAAqJ,IAAAvJ,EAAAC,EAAAC,EAAA,sBAAAsJ,IAAAxJ,EAAAC,EAAAC,EAAA,sBAAAuJ,IAAAzJ,EAAAC,EAAAC,EAAA,sBAAAwJ,IAAA1J,EAAAC,EAAAC,EAAA,sBAAAyJ,IAAA3J,EAAAC,EAAAC,EAAA,sBAAA0J,IAAA5J,EAAAC,EAAAC,EAAA,sBAAA2J,IAAA7J,EAAAC,EAAAC,EAAA,sBAAA4J,IAAO,IAAMT,EAA8B,8BAC9BC,EAA8B,8BAC9BC,EAA4B,4BAC5BC,EAA4B,4BAE5BC,EAAqC,qCACrCC,EAAqC,qCACrCC,EAAmC,mCAEnCC,EAAiC,iCACjCC,EAAiC,iCACjCC,EAA+B,gECX5C9J,EAAAC,EAAAC,EAAA,sBAAA8I,IAAAhJ,EAAAC,EAAAC,EAAA,sBAAA+I,IAAAjJ,EAAAC,EAAAC,EAAA,sBAAAgJ,IAAAlJ,EAAAC,EAAAC,EAAA,sBAAAiJ,IAAAnJ,EAAAC,EAAAC,EAAA,sBAAAkJ,IAAO,IAAMJ,EAAqB,qBACrBC,EAAuB,uBACvBC,EAAuB,uBACvBC,EAAqB,qBACrBC,EAA8B,+DCF3CpJ,EAAAC,EAAAC,EAAA,sBAAA6J,IAAA/J,EAAAC,EAAAC,EAAA,sBAAA8J,IAAAhK,EAAAC,EAAAC,EAAA,sBAAA+J,IAAAjK,EAAAC,EAAAC,EAAA,sBAAAgK,IAAAlK,EAAAC,EAAAC,EAAA,sBAAAiK,IAAAnK,EAAAC,EAAAC,EAAA,sBAAAkK,IAAApK,EAAAC,EAAAC,EAAA,sBAAAmK,IAAArK,EAAAC,EAAAC,EAAA,sBAAAoK,IAAAtK,EAAAC,EAAAC,EAAA,sBAAAqK,IAAAvK,EAAAC,EAAAC,EAAA,sBAAAsK,IAAO,IAAMT,EAAmB,SAAChJ,GAAD,OAAwBA,EAAM0J,MAEjDT,EAAgC,SAACjJ,GAAD,OAAwBA,EAAM0J,KAAKzC,cAEnEiC,EAAsB,SAAClJ,GAAD,OAAwBA,EAAM0J,KAAKxC,aAEzDiC,EAAoC,SAACnJ,GAAD,OAAwBA,EAAM0J,KAAK3C,mBAEvEqC,EAAoC,SAACpJ,GAAD,OAAwBA,EAAM0J,KAAK1C,oBAEvEqC,EAA2B,SAACrJ,GAAD,OAAwBA,EAAM0J,KAAKvC,cAE9DmC,EAA0B,SAACtJ,GAAD,OAAwBA,EAAM0J,KAAKC,aAE7DJ,EAAmB,SAACvJ,GAAD,OAAwBA,EAAM0J,KAAKrC,UAEtDmC,EAAiB,SAACxJ,GAAD,OAAwBA,EAAM0J,KAAK5C,IAEpD2C,EAAoB,SAACzJ,GAAD,OAAwBA,EAAM0J,KAAKtC,2CCpBpEnI,EAAAC,EAAAC,EAAA,sBAAAyK,IAAA3K,EAAAC,EAAAC,EAAA,sBAAA0K,IAAA5K,EAAAC,EAAAC,EAAA,sBAAA2K,IAAA7K,EAAAC,EAAAC,EAAA,sBAAA4K,IAAA9K,EAAAC,EAAAC,EAAA,sBAAA6K,IAAA/K,EAAAC,EAAAC,EAAA,sBAAA8K,IAAO,IAAML,EAAyB,sCACzBC,EAAyB,sCACzBC,EAAuB,oCAEvBC,EAAwB,qCACxBC,EAAwB,qCACxBC,EAAsB,0QCqB7BC,uLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAI1G,IAAW4B,qBAAqB+E,KAAKC,MAAMf,OACnDS,EAAAC,EAAAC,cAAA,MAAIhI,UAAWC,cAAf,IACG6H,EAAAC,EAAAC,cAAA,QAAMhI,UAAWC,kBAAjB,OACA,IAFH,IAGG6H,EAAAC,EAAAC,cAAA,QAAMhI,UAAWC,kBAAjB,iEAOP,OACE6H,EAAAC,EAAAC,cAAA,MACEhI,UAAWC,iCAEX6H,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,GAAI,IACJlI,UAAWC,iCAFb,UAQF6H,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,GAAI1G,IAAWS,cACfjC,UAAWC,iCAFb,aAQF6H,EAAAC,EAAAC,cAAA,MAAIhI,UAAWC,yCAEf6H,EAAAC,EAAAC,cAAA,MACEhI,UAAWC,iCAEX6H,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,GAAI1G,IAAWE,aACf2G,QAASF,KAAKC,MAAME,YACpBtI,UAAWC,iCAHb,sDAaN,OAAKkI,KAAKC,MAAMf,KAAKvC,aAKnBgD,EAAAC,EAAAC,cAAA,WAAShI,UAAWC,mBAClB6H,EAAAC,EAAAC,cAAA,OACEO,IAAKJ,KAAKC,MAAMf,KAAKtC,UAAYxG,IAAciB,aAAaC,gBAC5D+I,IAAI,SACJxI,UAAWC,0BAEZkI,KAAKM,6BAVD,sCAgBT,OACEX,EAAAC,EAAAC,cAAA,UAAQhI,UAAWC,mBACfkI,KAAKO,aACLP,KAAKQ,0BA1EMzI,IAAM0I,eAgFrBC,EAAkBC,YAAsD,CAC5EzB,KAAMV,MAGFoC,EAAqB,CACzBT,YAAaU,KAGTC,EAAcC,YAAQL,EAAiBE,GAE9BI,oBACbF,EADaE,CAEbtB,oBCjHIuB,EAAiB,SAAAC,GAAA,IAAcC,EAAdD,EAAGE,UAAsBC,EAAzBH,EAAyBG,QAAzBC,EAAAJ,EAAkCK,yBAAlC,IAAAD,EAAsD,KAAtDA,EAAAE,EAAAN,EAA4DO,oBAA5D,IAAAD,EAA2E,GAA3EA,EAAkFE,EAAlFrE,OAAAsE,EAAA,EAAAtE,CAAA6D,EAAA,mEACrBvB,EAAAC,EAAAC,cAAC+B,EAAA,EAADvE,OAAAwE,OAAA,GACMH,EADN,CAEEI,OAAQ,SAAC7B,GAAD,OACNoB,EACI1B,EAAAC,EAAAC,cAACsB,EAAclB,GACfsB,EAAoB5B,EAAAC,EAAAC,cAAC0B,EAAD,MACpB5B,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACE7B,GAAI,CACFgC,SAAUN,EACVjM,MAAO,CAAEwM,KAAM/B,EAAMgC,kBAgBnChB,EAAeiB,aAAe,CAC5BT,aAAcpI,IAAWE,aACzB4I,kBAAmB,MAGNlB,iBCtBTmB,EAAYrK,IAAMsK,KAAK,kBAAM5N,EAAA6N,EAAA,GAAAtL,KAAAvC,EAAA8N,KAAA,aAC7BC,EAAazK,IAAMsK,KAAK,kBAAM5N,EAAA6N,EAAA,GAAAtL,KAAAvC,EAAA8N,KAAA,aAC9BE,EAAe1K,IAAMsK,KAAK,kBAAM5N,EAAA6N,EAAA,GAAAtL,KAAAvC,EAAA8N,KAAA,aAChCG,EAAe3K,IAAMsK,KAAK,kBAAM/L,QAAAqM,IAAA,CAAAlO,EAAA6N,EAAA,GAAA7N,EAAA6N,EAAA,KAAAtL,KAAAvC,EAAA8N,KAAA,aAChCK,EAAgB7K,IAAMsK,KAAK,kBAAM5N,EAAA6N,EAAA,GAAAtL,KAAAvC,EAAA8N,KAAA,aACjCM,EAAmB9K,IAAMsK,KAAK,kBAAM5N,EAAA6N,EAAA,GAAAtL,KAAAvC,EAAA8N,KAAA,aAQ7BO,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAzF,OAAA2F,EAAA,EAAA3F,CAAA2C,KAAA8C,GAAAzF,OAAA4F,EAAA,EAAA5F,CAAA2C,KAAA3C,OAAA6F,EAAA,EAAA7F,CAAAyF,GAAAK,MAAAnD,KAAA/C,YAAA,OAAAI,OAAA+F,EAAA,EAAA/F,CAAAyF,EAAAC,GAAA1F,OAAAgG,EAAA,EAAAhG,CAAAyF,EAAA,EAAAQ,IAAA,SAAArM,MAAA,WAEI,OACE0I,EAAAC,EAAAC,cAAA,QAAMhI,UAAW0L,gBACf5D,EAAAC,EAAAC,cAAC2D,EAAD,MACA7D,EAAAC,EAAAC,cAACF,EAAAC,EAAM6D,SAAP,CAAgBC,SAAU/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KAAahE,EAAAC,EAAAC,cAAClI,EAAA,EAAD,QACrCgI,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAAC+D,EAAD,CACEpK,KAAMH,IAAWE,aACjB6H,UAAWgB,EACXf,QAAShI,IAAW+B,eAAe4E,KAAKC,MAAM/E,SAAU7B,IAAWI,uBACnEgI,aAAcpI,IAAW4B,qBAAqB+E,KAAKC,MAAM/E,YAE3DyE,EAAAC,EAAAC,cAAC+D,EAAD,CACEpK,KAAMH,IAAWO,cACjBwH,UAAWoB,EACXnB,QAAShI,IAAW+B,eAAe4E,KAAKC,MAAM/E,SAAU7B,IAAWQ,wBACnE0H,kBAAmBa,IAErBzC,EAAAC,EAAAC,cAAC+D,EAAD,CACEpK,KAAMH,IAAWiB,gBACjB8G,UAAWsB,EACXrB,QAAShI,IAAW+B,eAAe4E,KAAKC,MAAM/E,SAAU7B,IAAWkB,0BACnEgH,kBAAmBa,IAErBzC,EAAAC,EAAAC,cAAC+D,EAAD,CACEpK,KAAMH,IAAWa,iBACjBkH,UAAWwB,EACXvB,QAAShI,IAAW+B,eAAe4E,KAAKC,MAAM/E,SAAU7B,IAAWc,2BACnEoH,kBAAmBa,IAErBzC,EAAAC,EAAAC,cAAC+D,EAAD,CACEpK,KAAMH,IAAWe,gBACjBgH,UAAWyB,EACXxB,QAAShI,IAAW+B,eAAe4E,KAAKC,MAAM/E,SAAU7B,IAAWgB,0BACnEkH,kBAAmBa,IAErBzC,EAAAC,EAAAC,cAAC+D,EAAD,CACEpK,KAAMH,IAAW0B,gBACjBqG,UAAWqB,EACXpB,QAAShI,IAAW+B,eAAe4E,KAAKC,MAAM/E,SAAU7B,IAAW2B,0BACnEuG,kBAAmBa,IAErBzC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACEiC,OAAK,EACLrK,KAAK,IACLuG,GAAI1G,IAAW4B,qBAAqB+E,KAAKC,MAAM/E,YAEjDyE,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACEiC,OAAK,EACLrK,KAAMH,IAAWC,QACjByG,GAAI1G,IAAW4B,qBAAqB+E,KAAKC,MAAM/E,mBAnD7D4H,EAAA,CAAyB/K,IAAMoJ,WA4DzBT,EAAkBC,YAAgD,CACtEzF,SAAUsD,IACVsF,iBAAkBjF,MAGLkC,cAAQL,EAARK,CAAyB+B,GCjFpBlN,QACW,cAA7BmO,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,6ICRC,SAASC,GACdC,GAEA,IAAIC,EAAqC,GAEzC,OAAKD,GAAwBE,MAAMC,QAAQH,GAI3CC,EAA6CD,EAM1BI,IAAIC,IATdJ,EAYX,SAASI,GAA6BC,GACpC,OAAOA,EAIF,SAASC,GAA2CC,GAA2D,IAE3FC,EAMrBD,EANFE,sBACAC,EAKEH,EALFG,SACejP,EAIb8O,EAJFI,cACcjP,EAGZ6O,EAHFK,aACejP,EAEb4O,EAFFM,cACGC,EAP+G7H,OAAAsE,EAAA,EAAAtE,CAQhHsH,EARgH,qFAS9GQ,EAWD,SAAyCC,EAA4BN,GAC1E,IAAMO,EAAgBD,EACnBE,MAAM,MACNf,IAAI,SAAArL,GAAC,OAUV,SAAsCqM,EAAyBT,GAAkC,IAAAU,EAC5ED,EAChBD,MAAM,KACNf,IAAI,SAAAkB,GAAC,OAAIC,WAAWD,EAAEE,UAHsEC,EAAAvI,OAAAwI,EAAA,EAAAxI,CAAAmI,EAAA,GACxFM,EADwFF,EAAA,GACnFG,EADmFH,EAAA,GAK/F,OAAOd,EAAW,CAACgB,EAAKC,GAAO,CAACA,EAAKD,GAfzBE,CAA6B9M,EAAG4L,KACzCmB,OAAOC,IAGV,GAAIb,EAAcxP,OAAS,EACzB,MAAO,GAET,OAAOwP,EArBUc,CAAgCvB,EAAaE,GAE9D,OAAOzH,OAAA+I,EAAA,EAAA/I,CAAA,GACF6H,EADL,CAEEC,WACAtP,SACAC,QACAC,WAyBJ,SAASmQ,GAAaG,GACpB,OAAOhC,MAAMC,QAAQ+B,IAA2C,IAAzBA,EAAcxQ,QAAgBwQ,EAAcC,MAAMC,gCC3E9EC,GAEP,mDCFS,SAASC,GAAUC,EAAUC,GAC1C,IACIzN,EADA0N,EAAM,GAEV,IAAK1N,KAAKwN,EACR,GAAIA,EAAIG,eAAe3N,GAAI,CACzB,IAAM4N,EAAIH,EACNA,EAAS,IAAMzN,EAAI,IACnBA,EACE6N,EAAIL,EAAIxN,GACd0N,EAAII,KACK,OAAND,GAA2B,kBAANA,EAClBN,GAAUM,EAAGD,GACbG,mBAAmBH,GAAK,IAAMG,mBAAmBF,IAI3D,OAAOH,EAAIM,KAAK,kBCFHC,GAAA,CACbC,gBAfsB,kBAAM,IAAI9Q,QAAQ,SAACC,EAASC,GAClD6Q,UAAUC,YAAYC,mBACpB,SAAAtF,GAAQ,OAAI1L,EAAQ0L,IACpB,SAAAlL,GAAK,OAAIP,EAAOO,QAalByQ,kBATwB,kBAAM,IAAIlR,QAAQ,SAACC,EAASC,GACpD6Q,UAAUC,YAAYG,cACpB,SAAAxF,GAAQ,OAAI1L,EAAQ0L,IACpB,SAAAlL,GAAK,OAAIP,EAAOO,QAOlB2Q,cAAe,SAACzF,GAAD,MAAyB,CACtC6D,IAAK7D,EAAS0F,OAAOC,SACrB7B,IAAK9D,EAAS0F,OAAOE,yBCKRC,IAnBjB,SAASC,GAAYC,GACnB,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC9C,OAAOD,EAET,MAAMA,EAGR,SAASE,GAAUF,GACjB,OAAwB,MAApBA,EAASC,QAAsC,MAApBD,EAASC,OAC/B,KAEFD,EAASG,OAQX,SAAUL,GAAyBM,GAAnC,IAAAC,EAAAlJ,EAAA6I,EAAAM,EAAArL,UAAA,OAAAsL,EAAA3I,EAAA4I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACe,OADiCN,EAAhDC,EAAAzS,OAAA,QAAAqH,IAAAoL,EAAA,GAAAA,EAAA,GAAuE,GAAvEG,EAAAE,KAAA,EACqBC,YAAO9J,KAD5B,OAGY,OAFXK,EADDsJ,EAAAI,KAAAJ,EAAAE,KAAA,EAGkBG,MAAMV,EAAD/K,OAAA+I,EAAA,EAAA/I,CAAA,GACvBgL,EADuB,CAE1BU,QAAQ1L,OAAA+I,EAAA,EAAA/I,CAAA,CACN2L,eAAgB,oBACb7J,EAAc,CAAC8J,aAAgB9J,GAAe,OAGlDnI,KAAK+Q,IACL/Q,KAAKkR,IAXH,cAGCF,EAHDS,EAAAI,KAAAJ,EAAAS,OAAA,SAaElB,GAbF,wBAAAS,EAAAU,SAAAC,GAAApJ,4BCxBDqJ,GAAqBC,EAAQ,KAGdC,wCACZF,mBAA6BA,mBCO5BG,gBAaOC,gBAOQC,IArBrBC,IAAuC,EAC3C,SAAUH,KAAV,IAAAI,EAAA,OAAArB,EAAA3I,EAAA4I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACqC,OADrCF,EAAAE,KAAA,EAC2CC,YAAOiB,MADlD,OACQD,EADRnB,EAAAI,KAEEc,IAA8B,EAFhC,WAGSA,KAA+BC,EAHxC,CAAAnB,EAAAE,KAAA,SAII,OAJJF,EAAAE,KAAA,EAIUmB,YAAKC,IAJf,OAKI,OALJtB,EAAAE,KAAA,EAKUqB,YAAM,KALhB,OAAAvB,EAAAE,KAAA,iCAAAF,EAAAU,SAAAc,GAAAjK,MASA,SAASkK,KACPP,IAA8B,EAGzB,SAAUF,GAAyBU,GAAnC,OAAA5B,EAAA3I,EAAA4I,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OACgC,OADhCyB,EAAAzB,KAAA,EACsCC,YAAOyB,MAD7C,OAAAD,EAAAvB,MAE+BsB,EAAyBtU,OAAS,GACpE,IAAIyU,MAAMf,GAAaF,oBAAoBkB,OAHxC,wBAAAH,EAAAjB,SAAAqB,GAAAxK,MAOQ,SAAU0J,KAAV,OAAAnB,EAAA3I,EAAA4I,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OACb,OADa8B,EAAA9B,KAAA,EACPhG,YAAI,CACR+H,YAAWC,KAA2DnB,IACtEkB,YAAWC,KAA0DT,MAH1D,wBAAAO,EAAAtB,SAAAyB,GAAA5K,sBCLE6K,gBAmBAC,gBAUAC,gBAKAhB,gBAIAiB,gBAUAC,gBAqBPC,gBAcAC,gBASAC,gBASAC,gBAiBAC,gBAYeC,IAlIlB,SAAUV,KAAV,IAAA3J,EAAA4E,EAAAC,EAAAyF,EAAAC,EAAAC,EAAAvH,EAAAgG,EAAA,OAAA5B,EAAA3I,EAAA4I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACgB,OADhBF,EAAAE,KAAA,EACsBC,YAAO+C,KAD7B,OAEgB,OAFhBzK,EAAAuH,EAAAI,KACG/C,EADH5E,EACG4E,IAAKC,EADR7E,EACQ6E,IADR0C,EAAAE,KAAA,EAEsBC,YAAOgD,MAF7B,UAECJ,EAFD/C,EAAAI,KAIC4C,EAAmBD,EAAeK,KAJnCpD,EAAAC,KAAA,GAMC+C,EAND,CAAAhD,EAAAE,KAAA,SAOD,OAPCF,EAAAE,KAAA,GAOKmD,YAAIC,QAPT,QAS6C,OADxCL,EAAcjF,GAAU,CAAEX,MAAKC,MAAKiG,OAAQR,IARjD/C,EAAAE,KAAA,GASmDmB,YAAKhC,GAAD,GAAAmE,OAA8BzF,GAA9B,cAAAyF,OAA0DP,IATjH,QAWD,OAFMvH,EATLsE,EAAAI,KAUKsB,EAA6CjG,GAAgBC,GAVlEsE,EAAAE,KAAA,GAWKmB,YAAKL,GAA0BU,GAXpC,QAYD,OAZC1B,EAAAE,KAAA,GAYKmD,YAAIC,KAAyC5B,IAZlD,QAAA1B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAyD,GAAAzD,EAAA,SAeH0D,QAAQpV,MAAM,kBAAd0R,EAAAyD,IAfG,yBAAAzD,EAAAU,SAAAiD,GAAApM,KAAA,UAmBA,SAAU8K,GAAoB3N,GAA9B,OAAAoL,EAAA3I,EAAA4I,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OAEH,OAFGyB,EAAA1B,KAAA,EAAA0B,EAAAzB,KAAA,EAEGmD,YAAI9E,YAAK,CACbqF,OAAM,QAAAJ,OAAU9O,EAAOI,QAAQuI,IAAzB,SAAAmG,OAAoC9O,EAAOI,QAAQwI,QAHxD,OAAAqE,EAAAzB,KAAA,eAAAyB,EAAA1B,KAAA,EAAA0B,EAAA8B,GAAA9B,EAAA,SAMH+B,QAAQpV,MAARqT,EAAA8B,IANG,wBAAA9B,EAAAjB,SAAAmD,GAAAtM,KAAA,SAUA,SAAU+K,KAAV,IAAAwB,EAAAC,EAAAC,EAAA,OAAAlE,EAAA3I,EAAA4I,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OACwC,OADxC8B,EAAA9B,KAAA,EAC8CC,YAAO8D,KADrD,OAEL,OAFKH,EAAA9B,EAAA5B,KACQ2D,EADRD,EACGzG,IAAsB2G,EADzBF,EACoBxG,IADpB0E,EAAA9B,KAAA,EAECmD,YAAIa,aAAsBH,EAAYC,IAFvC,wBAAAhC,EAAAtB,SAAAyD,GAAA5M,MAKA,SAAU+J,KAAV,OAAAxB,EAAA3I,EAAA4I,KAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,OACL,OADKkE,EAAAlE,KAAA,EACCmD,YAAIgB,gBADL,wBAAAD,EAAA1D,SAAA4D,GAAA/M,MAIA,SAAUgL,KAAV,OAAAzC,EAAA3I,EAAA4I,KAAA,SAAAwE,GAAA,cAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,OAEH,OAFGqE,EAAAtE,KAAA,EAAAsE,EAAArE,KAAA,EAEGmB,YAAKhB,MAAD,GAAAmD,OAAWzF,GAAX,2BAAqD,CAC7DyG,OAAQ,SAHP,OAAAD,EAAArE,KAAA,eAAAqE,EAAAtE,KAAA,EAAAsE,EAAAd,GAAAc,EAAA,SAMHb,QAAQpV,MAAM,kCANX,wBAAAiW,EAAA7D,SAAA+D,GAAAlN,KAAA,SAUA,SAAUiL,KAAV,IAAAkC,EAAArH,EAAAC,EAAAiG,EAAAoB,EAAA,OAAA7E,EAAA3I,EAAA4I,KAAA,SAAA6E,GAAA,cAAAA,EAAA3E,KAAA2E,EAAA1E,MAAA,OACgB,OADhB0E,EAAA1E,KAAA,EACsBC,YAAO+C,KAD7B,OAEU,OAFVwB,EAAAE,EAAAxE,KACG/C,EADHqH,EACGrH,IAAKC,EADRoH,EACQpH,IADRsH,EAAA1E,KAAA,EAEgBC,YAAOgD,MAFvB,OAGO,OADNI,EAFDqB,EAAAxE,KAAAwE,EAAA1E,KAAA,GAGaC,YAAO0E,MAHpB,QAMH,OAHIF,EAHDC,EAAAxE,KAAAwE,EAAA3E,KAAA,GAAA2E,EAAA1E,KAAA,GAMGmB,YAAKhB,MAAD,GAAAmD,OAAWzF,GAAX,gCAA0D,CAClEyG,OAAQ,OACRM,KAAMC,KAAKC,UAAU,CAAE3H,MAAKC,MAAKiG,SAAQoB,QACzCrE,QAAS,CACP2E,OAAU,mBACV1E,eAAgB,sBAXjB,QAAAqE,EAAA1E,KAAA,iBAAA0E,EAAA3E,KAAA,GAAA2E,EAAAnB,GAAAmB,EAAA,UAeHlB,QAAQpV,MAAM,sCAfX,QAkBL,OAlBKsW,EAAA1E,KAAA,GAkBCmD,YAAIgB,gBAlBL,yBAAAO,EAAAlE,SAAAwE,GAAA3N,KAAA,WAqBP,SAAUkL,KAAV,IAAAjJ,EAAA2L,EAAA9H,EAAAC,EAAA,OAAAwC,EAAA3I,EAAA4I,KAAA,SAAAqF,GAAA,cAAAA,EAAAnF,KAAAmF,EAAAlF,MAAA,YACM,gBAAiBtB,WADvB,CAAAwG,EAAAlF,KAAA,SAGuB,OAHvBkF,EAAAnF,KAAA,EAAAmF,EAAAlF,KAAA,EAG6BmB,YAAKgE,GAAmB1G,iBAHrD,OAI2B,OADfnF,EAHZ4L,EAAAhF,KAAAgF,EAAAlF,KAAA,EAIiCmB,YAAKgE,GAAmBpG,cAAezF,GAJxE,OAKM,OALN2L,EAAAC,EAAAhF,KAIc/C,EAJd8H,EAIc9H,IAAKC,EAJnB6H,EAImB7H,IAJnB8H,EAAAlF,KAAA,GAKYmD,YAAIa,aAAsB7G,EAAKC,IAL3C,QAAA8H,EAAAlF,KAAA,iBAAAkF,EAAAnF,KAAA,GAAAmF,EAAA3B,GAAA2B,EAAA,SAOM1B,QAAQpV,MAAR8W,EAAA3B,IAPN,QAAA2B,EAAAlF,KAAA,kCAAAkF,EAAA1E,SAAA4E,GAAA/N,KAAA,UAcA,SAAUmL,GAAkB6C,GAA5B,IAAA5F,EAAA6F,EAAA,OAAA1F,EAAA3I,EAAA4I,KAAA,SAAA0F,GAAA,cAAAA,EAAAxF,KAAAwF,EAAAvF,MAAA,OAEyB,OADjBP,EADR,GAAA6D,OACiBzF,GADjB,aAAA0H,EAAAvF,KAAA,EAE+BmB,YAAKhC,GAA0BM,EAAK,CAC/D6E,OAAQ,MACRM,KAAMC,KAAKC,UAAUO,KAJzB,cAEQC,EAFRC,EAAArF,KAAAqF,EAAAhF,OAAA,SAMS+E,GANT,wBAAAC,EAAA/E,SAAAgF,GAAAnO,MASA,SAAUoL,GAAkB4C,GAA5B,IAAA5F,EAAA,OAAAG,EAAA3I,EAAA4I,KAAA,SAAA4F,GAAA,cAAAA,EAAA1F,KAAA0F,EAAAzF,MAAA,OAEE,OADMP,EADR,GAAA6D,OACiBzF,GADjB,cAAAyF,OAC6C+B,EAA0B1R,IADvE8R,EAAAzF,KAAA,EAEQmB,YAAKhC,GAA0BM,EAAK,CACxC6E,OAAQ,MACRM,KAAMC,KAAKC,UAAUO,KAJzB,cAAAI,EAAAlF,OAAA,UAMS,GANT,wBAAAkF,EAAAjF,SAAAkF,GAAArO,MASA,SAAUqL,GAAgBlO,GAA1B,IAAA6Q,EAAAM,EAAA,OAAA/F,EAAA3I,EAAA4I,KAAA,SAAA+F,GAAA,cAAAA,EAAA7F,KAAA6F,EAAA5F,MAAA,UACQqF,EAA4BtJ,GAA2CvH,EAAOI,SADtFgR,EAAA7F,KAAA,EAGQ4F,EAAU,MAEVN,EAA0B1R,GALlC,CAAAiS,EAAA5F,KAAA,QAMM,OANN4F,EAAA5F,KAAA,EAMYmB,YAAKsB,GAAmB4C,GANpC,OAOMM,EAAUN,EAPhBO,EAAA5F,KAAA,gBASgB,OAThB4F,EAAA5F,KAAA,GASsBmB,YAAKqB,GAAmB6C,GAT9C,QASMM,EATNC,EAAA1F,KAAA,QAWI,OAXJ0F,EAAA5F,KAAA,GAWUmD,YAAI0C,aAAmBF,IAXjC,QAAAC,EAAA5F,KAAA,iBAaI,OAbJ4F,EAAA7F,KAAA,GAAA6F,EAAArC,GAAAqC,EAAA,SAAAA,EAAA5F,KAAA,GAaUmD,YAAI2C,gBAbd,yBAAAF,EAAApF,SAAAuF,GAAA1O,KAAA,UAiBA,SAAUsL,GAAkBnO,GAA5B,IAAAtC,EAAAuN,EAAA,OAAAG,EAAA3I,EAAA4I,KAAA,SAAAmG,GAAA,cAAAA,EAAAjG,KAAAiG,EAAAhG,MAAA,OAII,OAHI9N,EAAYsC,EAAOI,QACnB6K,EAFR,GAAA6D,OAEiBzF,GAFjB,cAAAyF,OAE6CpR,GAF7C8T,EAAAjG,KAAA,EAAAiG,EAAAhG,KAAA,EAIUmB,YAAKhC,GAA0BM,EAAK,CACxC6E,OAAQ,WALd,OAAA0B,EAAAhG,KAAA,gBAAAgG,EAAAjG,KAAA,EAAAiG,EAAAzC,GAAAyC,EAAA,SAQIxC,QAAQpV,MAAM,wBAAd4X,EAAAzC,IARJ,yBAAAyC,EAAAxF,SAAAyF,GAAA5O,KAAA,SAYe,SAAUuL,KAAV,OAAAhD,EAAA3I,EAAA4I,KAAA,SAAAqG,GAAA,cAAAA,EAAAnG,KAAAmG,EAAAlG,MAAA,OACb,OADakG,EAAAlG,KAAA,EACPhG,YAAI,CACRmM,YAAS,IAAMC,KAA8ClE,IAC7DmE,YAAUD,KAA0CjE,IACpDkE,YAAUD,KAAkDhF,IAC5DW,YAAWqE,KAAuChE,IAClDiE,YAAUD,KAAkCzD,IAC5C0D,YAAUD,KAAyC/D,IACnDgE,YAAUD,KAA6C9D,IACvD+D,YAAUD,KAAmD7D,IAC7D8D,YAAUD,KAAwC1D,MAVvC,wBAAAwD,EAAA1F,SAAA8F,GAAAjP,wCCjHEkP,IAtCIC,8GAEjB,IAAMC,EAAkCC,aAAaC,QAAQ,gBAC7D,OAAKF,EAGE5B,KAAK+B,MAAMH,GAFT,2CAMT,OAAOxZ,QAAQyZ,aAAaC,QAAQ,0DAIpC,IAAMpU,EAAWiU,EAAoBK,cACrC,OAAKtU,GAAaA,EAASiE,YAGpBjE,EAASiE,YAFP,0DAMT,IAAMiQ,EAAkCC,aAAaC,QAAQ,gBAC7D,OAAKF,EAGE5B,KAAK+B,MAAMH,GAFT,yDAK+BK,GACxCJ,aAAaK,QAAQ,eAAgBlC,KAAKC,UAAUgC,6CAIpDJ,aAAaM,WAAW,yBAIrB,SAAUT,KAAV,IAAAhU,EAAA,OAAAqN,EAAA3I,EAAA4I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACY,OADZF,EAAAE,KAAA,EACkBC,YAAOpK,KADzB,OAEL,OADMtD,EADDuN,EAAAI,KAAAJ,EAAAE,KAAA,EAECmB,YAAKqF,GAAoBS,4BAA6B,CAC1DtT,GAAIpB,EAASoB,GACb6C,YAAajE,EAASiE,cAJnB,wBAAAsJ,EAAAU,SAAA0G,GAAA7P,iDCpCA,SAAS8P,GAAiBC,GAC/B,IAAKA,EACH,OAAO1T,KAGT,IAAM2T,EAAOD,EAAUE,aAAaD,MAAQ,GACtCE,EAAUH,EAAUE,aAAaC,SAAW,GAC5CpT,EAAQ,GAAAmP,OAAM+D,EAAN,KAAA/D,OAAciE,GAE5B,OAAO7S,OAAA+I,EAAA,EAAA/I,CAAA,GACFhB,KADL,CAEE8C,YAAa4Q,EAAU5Q,aACpB4Q,EAAUE,aAHf,CAIEnT,+CC2BMqT,gBAKAC,gBAgBAC,gBAMAC,gBAMAC,gBAoBAC,gBAWAC,gBAYAC,gBAiBAC,gBAKAC,gBAeAC,gBAIAC,gBAIAC,gBAIAC,gBAIAC,IAjIV,SAAUd,KAAV,IAAAjV,EAAA,OAAAqN,EAAA3I,EAAA4I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACmB,OADnBF,EAAAE,KAAA,EACyBC,YAAOpK,KADhC,OAEE,OADMtD,EADRuN,EAAAI,KAAAJ,EAAAE,KAAA,EAEQmD,YAAI9E,YAAK3N,IAAW4B,qBAAqBC,KAFjD,wBAAAuN,EAAAU,SAAA+H,GAAAlR,MAKA,SAAUoQ,GAAsBjT,GAAhC,IAAAgU,EAAAtU,EAAAuU,EAAAhJ,EAAA2H,EAAA7U,EAAA,OAAAqN,EAAA3I,EAAA4I,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OAKyC,OALzCwI,EACiChU,EAAOI,QAA9BV,EADVsU,EACUtU,SAAUuU,EADpBD,EACoBC,SACZhJ,EAFR,GAAA6D,OAEiBzF,GAFjB,eAAA4D,EAAA1B,KAAA,EAAA0B,EAAAzB,KAAA,EAK+CmB,YAAKhC,GAA0BM,EAAK,CAC7E6E,OAAQ,OACRM,KAAMC,KAAKC,UAAU,CAAE5Q,WAAUuU,eAPvC,OAUI,OALMrB,EALV3F,EAAAvB,KASU3N,EAAW4U,GAAgBC,GATrC3F,EAAAzB,KAAA,EAUUmD,YAAIuF,YAAkBnW,IAVhC,OAAAkP,EAAAzB,KAAA,iBAYI,OAZJyB,EAAA1B,KAAA,GAAA0B,EAAA8B,GAAA9B,EAAA,SAAAA,EAAAzB,KAAA,GAYUmD,YAAIwF,eAZd,yBAAAlH,EAAAjB,SAAAoI,GAAAvR,KAAA,UAgBA,SAAUqQ,KAAV,OAAA9H,EAAA3I,EAAA4I,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OACE,OADF8B,EAAA9B,KAAA,EACQmB,YAAKoF,IADb,OAEE,OAFFzE,EAAA9B,KAAA,EAEQmB,YAAKqG,IAFb,OAGE,OAHF1F,EAAA9B,KAAA,EAGQmD,YAAI0F,gBAHZ,wBAAA/G,EAAAtB,SAAAsI,GAAAzR,MAMA,SAAUsQ,KAAV,OAAA/H,EAAA3I,EAAA4I,KAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,OACE,OADFkE,EAAAlE,KAAA,EACQmD,YAAI4F,gBADZ,OAEE,OAFF7E,EAAAlE,KAAA,EAEQmB,YAAKqF,GAAoBwC,gBAFjC,OAGE,OAHF9E,EAAAlE,KAAA,EAGQmB,YAAKqG,IAHb,wBAAAtD,EAAA1D,SAAAyI,GAAA5R,MAMA,SAAUuQ,KAAV,IAAAnI,EAAA,OAAAG,EAAA3I,EAAA4I,KAAA,SAAAwE,GAAA,cAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,OAEsB,OADdP,EADR,GAAA6D,OACiBzF,GADjB,gBAAAwG,EAAArE,KAAA,EAE4BC,YAAO9J,KAFnC,UAAAkO,EAAAnE,KAAA,CAAAmE,EAAArE,KAAA,QAII,OAJJqE,EAAArE,KAAA,EAIUmD,YAAI+F,eAJd,cAAA7E,EAAA9D,OAAA,iBASI,OATJ8D,EAAAtE,KAAA,EAAAsE,EAAArE,KAAA,GASUmB,YAAKhC,GAA0BM,EAAK,CACxC6E,OAAQ,SAVd,QAYI,OAZJD,EAAArE,KAAA,GAYUmD,YAAI+F,eAZd,QAAA7E,EAAArE,KAAA,iBAcI,OAdJqE,EAAAtE,KAAA,GAAAsE,EAAAd,GAAAc,EAAA,SAAAA,EAAArE,KAAA,GAcUmD,YAAI3O,kBAAOpB,OAdrB,QAiBE,OAjBFiR,EAAArE,KAAA,GAiBQmB,YAAKqF,GAAoBwC,gBAjBjC,yBAAA3E,EAAA7D,SAAA2I,GAAA9R,KAAA,UAoBA,SAAUwQ,KAAV,IAAAuB,EAAA7W,EAAA,OAAAqN,EAAA3I,EAAA4I,KAAA,SAAA6E,GAAA,cAAAA,EAAA3E,KAAA2E,EAAA1E,MAAA,OACiB,OADjB0E,EAAA1E,KAAA,EACuBC,YAAO5J,KAD9B,OAI+B,OAHvB+S,EADR1E,EAAAxE,KAAAwE,EAAA3E,KAAA,EAAA2E,EAAA1E,KAAA,EAIqCmB,YAAKhC,GAAD,GAAAmE,OAA8BzF,GAA9B,WAAAyF,OAAuD8F,IAJhG,OAKI,OADM7W,EAJVmS,EAAAxE,KAAAwE,EAAA1E,KAAA,EAKUmD,YAAIkG,YAAmB9W,IALjC,OAAAmS,EAAA1E,KAAA,iBAOI,OAPJ0E,EAAA3E,KAAA,GAAA2E,EAAAnB,GAAAmB,EAAA,SAAAA,EAAA1E,KAAA,GAOUmD,YAAI+F,eAPd,yBAAAxE,EAAAlE,SAAA8I,GAAAjS,KAAA,UAWA,SAAUyQ,KAAV,IAAAyB,EAAA,OAAA3J,EAAA3I,EAAA4I,KAAA,SAAAqF,GAAA,cAAAA,EAAAnF,KAAAmF,EAAAlF,MAAA,OACkE,OADlEkF,EAAAlF,KAAA,EACwEmB,YAAKqF,GAAoBgD,4BADjG,YACQD,EADRrE,EAAAhF,QAGiCqJ,EAAwB/S,YAHzD,CAAA0O,EAAAlF,KAAA,SAII,OAJJkF,EAAAlF,KAAA,EAIUmD,YAAIsG,YAAuBF,IAJrC,OAKI,OALJrE,EAAAlF,KAAA,EAKUmB,YAAK0G,IALf,OAMI,OANJ3C,EAAAlF,KAAA,GAMUmD,YAAI0F,gBANd,QAAA3D,EAAAlF,KAAA,iBAQI,OARJkF,EAAAlF,KAAA,GAQUmB,YAAKwG,IARf,yBAAAzC,EAAA1E,SAAAkJ,GAAArS,MAYA,SAAU0Q,GAAsBvT,GAAhC,IAAAmV,EAAAzV,EAAAuU,EAAAhJ,EAAAmK,EAAAC,EAAA,OAAAjK,EAAA3I,EAAA4I,KAAA,SAAA0F,GAAA,cAAAA,EAAAxF,KAAAwF,EAAAvF,MAAA,OAKI,OALJ2J,EACiCnV,EAAOI,QAA9BV,EADVyV,EACUzV,SAAUuU,EADpBkB,EACoBlB,SACZhJ,EAFR,GAAA6D,OAEiBzF,GAFjB,gBAAA0H,EAAAxF,KAAA,EAAAwF,EAAAvF,KAAA,EAKUmB,YAAKhC,GAA0BM,EAAK,CACxC6E,OAAQ,OACRM,KAAMC,KAAKC,UAAU,CAAE5Q,WAAUuU,eAPvC,OASI,OATJlD,EAAAvF,KAAA,EASUmD,YAAI2G,eATd,OAAAvE,EAAAvF,KAAA,gBAWsB,OAXtBuF,EAAAxF,KAAA,EAAAwF,EAAAhC,GAAAgC,EAAA,SAAAA,EAAAvF,KAAA,GAW4BuF,EAAAhC,GAAE/D,OAX9B,QAaI,OAFMoK,EAXVrE,EAAArF,KAYU2J,GD/GyBpb,EC+GSmb,GD3GtCG,KAAStb,GACJA,EAEL,YAAaA,EACRA,EAAIub,QAEN,KARE,KCiGXzE,EAAAvF,KAAA,GAaUmD,YAAI8G,YAAgBJ,IAb9B,yBAAAtE,EAAA/E,ODnGO,IAA4B/R,GCmGnCyb,GAAA7S,KAAA,SAiBA,SAAU2Q,KAAV,OAAApI,EAAA3I,EAAA4I,KAAA,SAAA4F,GAAA,cAAAA,EAAA1F,KAAA0F,EAAAzF,MAAA,OAEE,OADAmK,MAAM,0BADR1E,EAAAzF,KAAA,EAEQmD,YAAI9E,YAAK3N,IAAWE,eAF5B,wBAAA6U,EAAAjF,SAAA4J,GAAA/S,MAKA,SAAU4Q,GAAwBtN,EAAarM,GAA/C,IAAA8a,EAAA3J,EAAA,OAAAG,EAAA3I,EAAA4I,KAAA,SAAA+F,GAAA,cAAAA,EAAA7F,KAAA6F,EAAA5F,MAAA,OACiB,OADjB4F,EAAA5F,KAAA,EACuBC,YAAO5J,KAD9B,OAKI,OAJI+S,EADRxD,EAAA1F,KAEQT,EAFR,GAAA6D,OAEiBzF,GAFjB,WAAAyF,OAE0C8F,GAF1CxD,EAAA7F,KAAA,EAAA6F,EAAA5F,KAAA,EAKUmB,YAAKhC,GAA0BM,EAAK,CACxC6E,OAAQ,OACRM,KAAMC,KAAKC,UAALpQ,OAAA2V,GAAA,EAAA3V,CAAA,GAAkBiG,EAAMrM,MAPpC,OASI,OATJsX,EAAA5F,KAAA,EASUmB,YAAKoF,IATf,OAAAX,EAAA5F,KAAA,iBAAA4F,EAAA7F,KAAA,GAAA6F,EAAArC,GAAAqC,EAAA,SAWIpC,QAAQpV,MAARwX,EAAArC,IAXJ,yBAAAqC,EAAApF,SAAA8J,GAAAjT,KAAA,UAeA,SAAU6Q,GAAiB1T,GAA3B,OAAAoL,EAAA3I,EAAA4I,KAAA,SAAAmG,GAAA,cAAAA,EAAAjG,KAAAiG,EAAAhG,MAAA,OACE,OADFgG,EAAAhG,KAAA,EACQmB,YAAK8G,GAAyB,WAAYzT,EAAOI,SADzD,wBAAAoR,EAAAxF,SAAA+J,GAAAlT,MAIA,SAAU8Q,GAAmB3T,GAA7B,OAAAoL,EAAA3I,EAAA4I,KAAA,SAAAqG,GAAA,cAAAA,EAAAnG,KAAAmG,EAAAlG,MAAA,OACE,OADFkG,EAAAlG,KAAA,EACQmB,YAAK8G,GAAyB,WAAYzT,EAAOI,SADzD,wBAAAsR,EAAA1F,SAAAgK,GAAAnT,MAIA,SAAU+Q,GAAmB5T,GAA7B,OAAAoL,EAAA3I,EAAA4I,KAAA,SAAA4K,GAAA,cAAAA,EAAA1K,KAAA0K,EAAAzK,MAAA,OACE,OADFyK,EAAAzK,KAAA,EACQmB,YAAK8G,GAAyB,WAAYzT,EAAOI,SADzD,wBAAA6V,EAAAjK,SAAAkK,GAAArT,MAIA,SAAUgR,GAAiB7T,GAA3B,OAAAoL,EAAA3I,EAAA4I,KAAA,SAAA8K,GAAA,cAAAA,EAAA5K,KAAA4K,EAAA3K,MAAA,OACE,OADF2K,EAAA3K,KAAA,EACQmB,YAAK8G,GAAyB,SAAUzT,EAAOI,SADvD,wBAAA+V,EAAAnK,SAAAoK,GAAAvT,MAIA,SAAUiR,GAAyB9T,GAAnC,OAAAoL,EAAA3I,EAAA4I,KAAA,SAAAgL,GAAA,cAAAA,EAAA9K,KAAA8K,EAAA7K,MAAA,OACE,OADF6K,EAAA7K,KAAA,EACQmB,YAAK8G,GAAyB,iBAAkBzT,EAAOI,SAD/D,wBAAAiW,EAAArK,SAAAsK,GAAAzT,MAIA,IAiBe0T,GAjBWnL,EAAA3I,EAAA+T,KAAG,SAAvBD,IAAuB,OAAAnL,EAAA3I,EAAA4I,KAAA,SAAAoL,GAAA,cAAAA,EAAAlL,KAAAkL,EAAAjL,MAAA,OAazB,OAbyBiL,EAAA1H,GACrBvJ,IADqBiR,EAAAC,GAEzBnJ,YAAWhP,KAAsB0U,IAFRwD,EAAAE,GAGzBpJ,YAAW/O,KAAsB0U,IAHRuD,EAAAG,GAIzBrJ,YAAW7O,KAAuB0U,IAJTqD,EAAAI,GAKzBtJ,YAAW5O,KAAuBwU,IALTsD,EAAAK,GAMzBvJ,YAAW1O,KAAsB0U,IANRkD,EAAAM,GAOzBxJ,YAAWzO,KAAsB0U,IAPRiD,EAAAO,GAQzBzJ,YAAWjN,KAAoBoT,IARN+C,EAAAQ,GASzB1J,YAAWhN,KAAsBoT,IATR8C,EAAAS,GAUzB3J,YAAW/M,KAAsBoT,IAVR6C,EAAAU,IAWzB5J,YAAW9M,KAAoBoT,IAXN4C,EAAAW,IAYzB7J,YAAW7M,KAA6BoT,IAZf2C,EAAAjL,KAAA,GAanBmB,YAAK2G,IAbc,QAC3B,OAD2BmD,EAAAY,IAAAZ,EAAA/K,KAAA+K,EAAAa,IAAA,CAAAb,EAAAC,GAAAD,EAAAE,GAAAF,EAAAG,GAAAH,EAAAI,GAAAJ,EAAAK,GAAAL,EAAAM,GAAAN,EAAAO,GAAAP,EAAAQ,GAAAR,EAAAS,GAAAT,EAAAU,IAAAV,EAAAW,IAAAX,EAAAY,KAAAZ,EAAAjL,KAAA,IAC3B,EAAAiL,EAAA1H,IAAA0H,EAAAa,KAD2B,yBAAAb,EAAAzK,SAAvBuK,EAAuB1T,sCC/KtB,SAAS0U,GAAeC,GAC7B,OAAKA,GAAeC,KAASD,GAItBA,EAHE,4BCWDE,gBAgBAC,gBAeAC,gBAWeC,IA1CzB,SAAUH,KAAV,IAAAI,EAAAlD,EAAA4C,EAAAO,EAAA,OAAA3M,EAAA3I,EAAA4I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC0B,OAD1BF,EAAAE,KAAA,EACgCC,YAAOtT,MADvC,OAEiB,OADT2f,EADRxM,EAAAI,KAAAJ,EAAAE,KAAA,EAEuBC,YAAO5J,KAF9B,UAEQ+S,EAFRtJ,EAAAI,MAGMoM,EAHN,CAAAxM,EAAAE,KAAA,eAAAF,EAAAS,OAAA,iBAQuB,OARvBT,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAQ6BmB,YAAKhC,GAAD,GAAAmE,OAA8BzF,GAA9B,WAAAyF,OAAuD8F,EAAvD,SARjC,QAUI,OAFM4C,EARVlM,EAAAI,KASUqM,EAAkBR,GAAeC,GAT3ClM,EAAAE,KAAA,GAUUmD,YAAIqJ,aAAyBD,IAVvC,QAAAzM,EAAAE,KAAA,iBAYI,OAZJF,EAAAC,KAAA,GAAAD,EAAAyD,GAAAzD,EAAA,SAAAA,EAAAE,KAAA,GAYUmD,YAAIsJ,gBAZd,yBAAA3M,EAAAU,SAAAkM,GAAArV,KAAA,UAgBA,SAAU8U,GAA4B3X,GAAtC,IAAA4U,EAAA,OAAAxJ,EAAA3I,EAAA4I,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OACiB,OADjByB,EAAAzB,KAAA,EACuBC,YAAO5J,KAD9B,OAGI,OAFI+S,EADR3H,EAAAvB,KAAAuB,EAAA1B,KAAA,EAAA0B,EAAAzB,KAAA,EAGUmB,YAAKhC,GAAD,GAAAmE,OAA8BzF,GAA9B,WAAAyF,OAAuD8F,EAAvD,QAAqE,CAC7E9E,OAAQ,OACRM,KAAMC,KAAKC,UAALpQ,OAAA2V,GAAA,EAAA3V,CAAA,GACHF,EAAOI,QAAQ+X,SAAWnY,EAAOI,QAAQgY,eANlD,OASI,OATJnL,EAAAzB,KAAA,EASUmD,YAAI0J,aAA+BrY,EAAOI,UATpD,OAAA6M,EAAAzB,KAAA,iBAWI,OAXJyB,EAAA1B,KAAA,GAAA0B,EAAA8B,GAAA9B,EAAA,SAAAA,EAAAzB,KAAA,GAWUmD,YAAI2J,gBAXd,yBAAArL,EAAAjB,SAAAuM,GAAA1V,KAAA,UAeA,SAAU+U,KAAV,IAAAY,EAAA,OAAApN,EAAA3I,EAAA4I,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OAEI,OAFJ8B,EAAA/B,KAAA,EAAA+B,EAAA9B,KAAA,EAEUmD,YAAI8J,gBAFd,OAGwC,OAHxCnL,EAAA9B,KAAA,EAG8CmB,YAAKhC,GAAD,GAAAmE,OAA8BzF,GAA9B,wBAHlD,OAII,OADMmP,EAHVlL,EAAA5B,KAAA4B,EAAA9B,KAAA,EAIUmD,YAAI+J,aAA4BF,IAJ1C,OAAAlL,EAAA9B,KAAA,iBAMI,OANJ8B,EAAA/B,KAAA,GAAA+B,EAAAyB,GAAAzB,EAAA,SAAAA,EAAA9B,KAAA,GAMUmD,YAAIgK,gBANd,yBAAArL,EAAAtB,SAAA4M,GAAA/V,KAAA,UAWe,SAAUgV,KAAV,OAAAzM,EAAA3I,EAAA4I,KAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,OAEX,OAFWkE,EAAAX,GACPvJ,IADOkK,EAAAlE,KAAA,EAEL+B,YAAW5M,KAA6B+W,IAFnC,OAGX,OAHWhI,EAAAgH,GAAAhH,EAAAhE,KAAAgE,EAAAlE,KAAA,EAGL+B,YAAWxM,KAAoC4W,IAH1C,OAIX,OAJWjI,EAAAiH,GAAAjH,EAAAhE,KAAAgE,EAAAlE,KAAA,EAILmB,YAAKiL,IAJA,OACb,OADalI,EAAAkH,GAAAlH,EAAAhE,KAAAgE,EAAAmH,GAAA,CAAAnH,EAAAgH,GAAAhH,EAAAiH,GAAAjH,EAAAkH,IAAAlH,EAAAlE,KAAA,IACb,EAAAkE,EAAAX,IAAAW,EAAAmH,IADa,yBAAAnH,EAAA1D,SAAA6M,GAAAhW,wCClDLiW,gBAUAC,gBAaeC,IAvBzB,SAAUF,KAAV,IAAA7N,EAAAgO,EAAA,OAAA7N,EAAA3I,EAAA4I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGiC,OAFzBP,EADR,GAAA6D,OACiBzF,GADjB,UAAAiC,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGuCmB,YAAKhC,GAA0BM,GAHtE,OAII,OADMgO,EAHV3N,EAAAI,KAAAJ,EAAAE,KAAA,EAIUmD,YAAIuK,aAAoBD,IAJlC,OAAA3N,EAAAE,KAAA,gBAMI,OANJF,EAAAC,KAAA,EAAAD,EAAAyD,GAAAzD,EAAA,SAAAA,EAAAE,KAAA,GAMUmD,YAAIwK,gBANd,yBAAA7N,EAAAU,SAAAoN,GAAAvW,KAAA,SAUA,SAAUkW,GAAgB/Y,GAA1B,IAAAiL,EAAA,OAAAG,EAAA3I,EAAA4I,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OAGI,OAFIP,EADR,GAAA6D,OACiBzF,GADjB,WAAAyF,OAC0C9O,EAAOI,QAAQjB,IADzD8N,EAAA1B,KAAA,EAAA0B,EAAAzB,KAAA,EAGUmB,YAAKhC,GAA0BM,EAAK,CACxC6E,OAAQ,OACRM,KAAMC,KAAKC,UAAU,CAAEtS,KAAMgC,EAAOI,QAAQpC,SALlD,OAOI,OAPJiP,EAAAzB,KAAA,EAOUmD,YAAI0K,aAAmBrZ,EAAOI,QAAQjB,GAAIa,EAAOI,QAAQpC,OAPnE,OAAAiP,EAAAzB,KAAA,gBASI,OATJyB,EAAA1B,KAAA,EAAA0B,EAAA8B,GAAA9B,EAAA,SAAAA,EAAAzB,KAAA,GASUmD,YAAI2K,gBATd,yBAAArM,EAAAjB,SAAAuN,GAAA1W,KAAA,SAae,SAAUmW,KAAV,OAAA5N,EAAA3I,EAAA4I,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OACb,OADa8B,EAAA9B,KAAA,EACPhG,YAAI,CACR+H,YAAWiM,KAAkCV,IAC7CvL,YAAWiM,KAAiCT,MAHjC,wBAAAzL,EAAAtB,SAAAyN,GAAA5W,sBCxBL6W,IAAV,SAAUA,KAAV,OAAAtO,EAAA3I,EAAA4I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACE,OADFF,EAAAE,KAAA,EACQhG,YAAI,CACR4I,KACAmI,KACAsB,KACAtL,KACAyM,OANJ,wBAAA1N,EAAAU,SAAA2N,GAAA9W,MAUe6W,UCNFE,GAA0C,CACrDC,oBAAqBC,KACrBC,cAAeD,KACfE,cAAeF,KACfG,iBAAkB,EAClBC,WAAYngB,OAAOogB,KAAKC,UAAUC,MAAM,GACxCC,eAAe,GAIF,SAASC,KAGL,IAFjBliB,EAEiByH,UAAApH,OAAA,QAAAqH,IAAAD,UAAA,GAAAA,UAAA,GAFQ8Z,GACzB5Z,EACiBF,UAAApH,OAAA,EAAAoH,UAAA,QAAAC,EACjB,OAAQC,EAAOC,MACb,KAAK6Z,KACH,OAAO5Z,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEwhB,oBAAqB7Z,EAAOI,UAGhC,KAAK0Z,KACH,OAAO5Z,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEwhB,oBAAqBD,GAAuBC,sBAGhD,KAAKC,KACH,OAAO5Z,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEiiB,eAAe,IAGnB,KAAKR,KACH,OAAO5Z,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEiiB,eAAe,IAGnB,QACE,OAAOjiB,qCCtBAmiB,GAA8C,CACzDC,UAAWb,GAAuBG,cAClCW,UAAWd,GAAuBI,cAClCW,UAAWf,GAAuBK,iBAClCW,2BAA4B,EAC5BC,8BAA+B,EAC/BC,mBAAmB,EACnBC,mBAAmB,EACnBC,YAAa,GACbC,aAAc,IAID,SAASC,KAGH,IAFnB7iB,EAEmByH,UAAApH,OAAA,QAAAqH,IAAAD,UAAA,GAAAA,UAAA,GAFQ0a,GAC3Bxa,EACmBF,UAAApH,OAAA,EAAAoH,UAAA,QAAAC,EACnB,OAAQC,EAAOC,MACb,KAAKjF,KACH,OAAOkF,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEoiB,UAAWza,EAAOI,QAAQuI,IAC1B+R,UAAW1a,EAAOI,QAAQwI,IAC1BgS,2BAA4BJ,GAAyBI,2BACrDC,8BAA+BL,GAAyBK,gCAG5D,KAAK5f,KACH,OAAOiF,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEsiB,UAAW3a,EAAOI,UAGtB,KAAK/E,KACH,OAAO6E,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEyiB,mBAAmB,IAGvB,KAAK1f,KACH,OAAO8E,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEE0iB,mBAAmB,IAGvB,KAAKzf,KACH,OAAO4E,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEE2iB,YAAaG,KAAM,GAAArM,OAAA5O,OAAAkb,GAAA,EAAAlb,CACd7H,EAAM2iB,aADQ9a,OAAAkb,GAAA,EAAAlb,CAEdF,EAAOI,UACT,MACH0a,mBAAmB,IAGvB,KAAKvf,KACH,OAAO2E,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEyiB,mBAAmB,IAGvB,KAAKtf,KACH,OAAO0E,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEE2iB,YAAaG,KAAM,CACjBnb,EAAOI,SADU0O,OAAA5O,OAAAkb,GAAA,EAAAlb,CAEd7H,EAAM2iB,cACR,MACHF,mBAAmB,IAGvB,KAAKnf,KACH,OAAOuE,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEuiB,2BAA4B5a,EAAOI,QAAQib,UAC3CR,8BAA+B7a,EAAOI,QAAQkb,aAC9CR,mBAAmB,IAGvB,KAAKlf,KACH,OAAOsE,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEE2iB,YAAa3iB,EAAM2iB,YAAYlS,OAAO,SAAA/E,GAAA,OAAAA,EAAE5E,KAAea,EAAOI,YAGlE,KAAKvE,KACH,OAAOqE,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEE4iB,aAAcT,GAAyBS,aACvCL,2BAA4BJ,GAAyBI,6BAGzD,QACE,OAAOviB,GCzGN,IAAMkjB,GAAuC,CAClDziB,cAAc,EACdC,SAAS,EACTC,UAAU,EACVH,iBAAkB,GAClBN,QAAS,IAGI,SAASijB,KAGL,IAFjBnjB,EAEiByH,UAAApH,OAAA,QAAAqH,IAAAD,UAAA,GAAAA,UAAA,GAFQyb,GACzBvb,EACiBF,UAAApH,OAAA,EAAAoH,UAAA,QAAAC,EACjB,OAAQC,EAAOC,MACb,KAAKc,KACH,OAAOb,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEE,QAAQ2H,OAAA+I,EAAA,EAAA/I,CAAA,GACH7H,EAAME,QADJ2H,OAAA2V,GAAA,EAAA3V,CAAA,GAEJF,EAAOI,QAAQ+X,SAAWnY,EAAOI,QAAQgY,eAIhD,KAAKzX,KACH,OAAOT,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEES,cAAc,EACdC,SAAS,IAGb,KAAK6H,KACH,OAAOV,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEES,cAAc,EACdC,SAAS,EACTC,UAAU,EACVT,QAASyH,EAAOI,UAGpB,KAAKS,KACH,OAAOX,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEES,cAAc,EACdC,SAAS,IAGb,KAAK+H,KACH,OAAOya,GAET,KAAKpa,KACH,OAAOjB,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEQ,iBAAkBmH,EAAOI,UAG7B,QACE,OAAO/H,GCjEb,IAAMojB,GAAsE,CAC1EC,8BAA8B,EAC9BjP,4BAA4B,GAGf,SAASkP,KAGkB,IAFxCtjB,EAEwCyH,UAAApH,OAAA,QAAAqH,IAAAD,UAAA,GAAAA,UAAA,GAFQ2b,GAChDzb,EACwCF,UAAApH,OAAA,EAAAoH,UAAA,QAAAC,EACxC,OAAQC,EAAOC,MACb,KAAKuZ,KACH,OAAOtZ,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEqjB,6BAA8B1b,EAAOI,UAGzC,KAAKoZ,KACH,OAAOtZ,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEoU,2BAA4BzM,EAAOI,UAGvC,QACE,OAAO/H,iDCnBPujB,GAAiD,CACrDC,MAAO,GACP/iB,cAAc,GAGD,SAASgjB,KAGA,IAFtBzjB,EAEsByH,UAAApH,OAAA,QAAAqH,IAAAD,UAAA,GAAAA,UAAA,GAFQ8b,GAC9B5b,EACsBF,UAAApH,OAAA,EAAAoH,UAAA,QAAAC,EACtB,OAAQC,EAAOC,MACb,KAAKgC,KACH,OAAO/B,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEES,cAAc,IAGlB,KAAKoJ,KACH,OAAOhC,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEES,cAAc,EACd+iB,MAAO7b,EAAOI,UAGlB,KAAK+B,KACH,OAAOjC,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEES,cAAc,IAGlB,KAAKuJ,KACH,IAAM0Z,EAAY1jB,EAAMwjB,MAAMG,UAAU,SAAAjY,GAAA,OAAAA,EAAG5E,KAAgBa,EAAOI,QAAQjB,KACpE8c,EAAqB/b,OAAA+I,EAAA,EAAA/I,CAAA,GACtB7H,EAAMwjB,MAAME,GADU,CAEzB/d,KAAMgC,EAAOI,QAAQpC,OAEjBke,EAAmBC,KAAQC,KAAM/jB,EAAMwjB,OAAQ,CAACE,GAAYE,EAAaG,MAC/E,OAAOlc,OAAA+I,EAAA,EAAA/I,CAAA,GACF7H,EADL,CAEEwjB,MAAOK,IAGX,QACE,OAAO7jB,GCpBEgkB,OAZf,SAA2BC,GACzB,OAAOC,0BAAgB,CACrBC,OAAQC,YAAcH,GACtBI,OAAQnC,GACRoC,aAAcC,GACd7a,KAAMlC,KACNvH,IAAKkjB,GACLqB,gBAAiBlB,GACjB1C,SAAU6C,oBC7BDQ,GAAUQ,eCEVC,GAAgC,CAC3CC,YAAa,WCSTC,GCHS,SAAwBX,GACrC,IAAMY,EAAiBC,cACjBC,EAAc,CAACC,YAAiBf,GAAUY,GAE1CI,EAAY,CADSC,kBAAevX,WAAf,EAAmBoX,IAExCI,EAAoBC,sBAAmBzX,WAAnB,EAAuBsX,GAE3CL,EAAQS,sBACZrB,GAAkBC,QAClBvc,EACAyd,GAKF,OAFAN,EAAeS,IAAIC,IAEZX,EDZKY,CAAevB,IAgB7BwB,IAASnZ,OAAOnC,EAAAC,EAAAC,cAVK,kBACnBF,EAAAC,EAAAC,cAACqb,EAAA,EAAD,CAAUd,MAAOA,IACfza,EAAAC,EAAAC,cAACsb,EAAA,EAAD,CAAiB1B,QAASA,IACxB9Z,EAAAC,EAAAC,cAACub,EAAA,EAAD,CAAeC,MAAOnB,IANJva,EAAAC,EAAAC,cAACyb,EAAD,UAaR,MAAiBC,SAASC,eAAe,SxBmGnD,kBAAmBnU,WACrBA,UAAUoU,cAAcC,MAAM1kB,KAAK,SAAA2kB,GACjCA,EAAaC,mC0BlInB5jB,EAAAC,QAAA,CAAkB4jB,gBAAA,gCAAAC,WAAA,2BAAAC,eAAA,+BAAAC,gBAAA,gCAAAC,sBAAA,sCAAAC,8BAAA,8CAAAC,qCAAA,qDAAAC,8BAAA,gFCDlB3nB,EAAAC,EAAAC,EAAA,sBAAA0nB,IAAA5nB,EAAAC,EAAAC,EAAA,sBAAA2nB,IAAA7nB,EAAAC,EAAAC,EAAA,sBAAA4nB,IAAA9nB,EAAAC,EAAAC,EAAA,sBAAA6nB,IAAA/nB,EAAAC,EAAAC,EAAA,sBAAAkX,IAAApX,EAAAC,EAAAC,EAAA,sBAAA8nB,IAAAhoB,EAAAC,EAAAC,EAAA,sBAAA+nB,IAAAjoB,EAAAC,EAAAC,EAAA,sBAAAgoB,IAAAloB,EAAAC,EAAAC,EAAA,sBAAAioB,IAAO,IAAMP,EAAyB,gCACzBC,EAA2B,kCAC3BC,EAA2B,kCAC3BC,EAA4B,mCAO5B3Q,EAA6B,IAE7B4Q,EAAwB,IACxBC,EAAkB,QAClBC,EAAkB,QAElBC,EAAqB,wCChBlCnoB,EAAAC,EAAAC,EAAA,sBAAAyd,IAAA3d,EAAAC,EAAAC,EAAA,sBAAAqd,IAAAvd,EAAAC,EAAAC,EAAA,sBAAAkoB,IAAApoB,EAAAC,EAAAC,EAAA,sBAAA0c,IAAA5c,EAAAC,EAAAC,EAAA,sBAAA2c,IAAA7c,EAAAC,EAAAC,EAAA,sBAAAkM,IAAApM,EAAAC,EAAAC,EAAA,sBAAAkd,IAAApd,EAAAC,EAAAC,EAAA,sBAAAmoB,IAAAroB,EAAAC,EAAAC,EAAA,sBAAA8d,IAAAhe,EAAAC,EAAAC,EAAA,sBAAAie,IAAAne,EAAAC,EAAAC,EAAA,sBAAAooB,IAAAtoB,EAAAC,EAAAC,EAAA,sBAAAqoB,IAAAvoB,EAAAC,EAAAC,EAAA,sBAAAsoB,IAAAxoB,EAAAC,EAAAC,EAAA,sBAAAuoB,IAAAzoB,EAAAC,EAAAC,EAAA,sBAAAwoB,IAAA,IAAAC,EAAA3oB,EAAA,IAAA4oB,EAAA5oB,EAAA,IAAA6oB,EAAA7oB,EAAA,IAyBa2d,EAAyB,SAACmL,GAAD,OAA2CpgB,iBAAO5B,IAA6BgiB,IAIxGvL,EAAqB,SAAC9W,GAAD,OAAwBiC,iBAAO3B,IAAwBN,IAI5E2hB,EAAoB,SAAChgB,EAAkBuU,GAAnB,OAAwCjU,iBAAOzB,IAAsB,CAAEmB,WAAUuU,cAIrGC,EAAoB,SAACnW,GAAD,OAAwBiC,iBAAOxB,IAAsBT,IAIzEoW,EAAkB,kBAAMnU,iBAAOvB,MAI/BiF,EAAqB,kBAAM1D,iBAAOtB,MAIlCgW,EAAqB,kBAAM1U,iBAAOrB,MAIlCghB,EAAoB,SAACjgB,EAAkBuU,GAAnB,OAAwCjU,iBAAOnB,IAAsB,CAAEa,WAAUuU,cAIrGqB,EAAoB,kBAAMtV,iBAAOlB,MAIjC2W,EAAkB,SAAClW,GAAD,OAAgCS,iBAAOjB,IAAoB,CAAEQ,iBAQ/EqgB,EAAe,SAACS,GAAD,OAAuBrgB,iBAAOM,IAAoB+f,IAIjER,EAAiB,SAACngB,GAAD,OAAsBM,iBAAOO,IAAsBb,IAIpEogB,EAAiB,SAACngB,GAAD,OAAsBK,iBAAOQ,IAAsBb,IAIpEogB,EAAe,SAAC1f,GAAD,OAA4BL,iBAAOS,IAAoBJ,IAItE2f,EAAuB,SAACM,GAAD,OAAqBtgB,iBAAOU,IAA6B4f,qCCrF7FhpB,EAAAC,EAAAC,EAAA,sBAAA6c,IAAA/c,EAAAC,EAAAC,EAAA,sBAAAwgB,IAAA1gB,EAAAC,EAAAC,EAAA,sBAAAygB,IAAA3gB,EAAAC,EAAAC,EAAA,sBAAA+c,IAAAjd,EAAAC,EAAAC,EAAA,sBAAA+oB,IAAAjpB,EAAAC,EAAAC,EAAA,sBAAA6gB,IAAA/gB,EAAAC,EAAAC,EAAA,sBAAA8gB,IAAAhhB,EAAAC,EAAAC,EAAA,sBAAAihB,IAAAnhB,EAAAC,EAAAC,EAAA,sBAAAkhB,IAAAphB,EAAAC,EAAAC,EAAA,sBAAAmhB,IAAA,IAAAsH,EAAA3oB,EAAA,IAAAkpB,EAAAlpB,EAAA,IAea+c,EAA2B,kBAAMrU,iBAAOW,MAIxCqX,EAA2B,SAACzf,GAAD,OAAsByH,iBAAOY,IAA6BrI,IAIrF0f,EAAyB,kBAAMjY,iBAAOa,MAItC0T,EAAyB,kBAAMvU,iBAAOc,MAItCyf,EAAiC,SAACpI,EAAkBC,GAAnB,OAAoDpY,iBAAOe,IAAoC,CAAEoX,WAAUC,gBAI5IC,EAAiC,SAAAtU,GAAA,IAAGoU,EAAHpU,EAAGoU,SAAUC,EAAbrU,EAAaqU,WAAb,OAAkFpY,iBAAOgB,IAAoC,CAAEmX,WAAUC,gBAI1KE,EAA+B,kBAAMtY,iBAAOiB,MAI5CwX,EAA8B,kBAAMzY,iBAAOkB,MAI3CwX,EAA8B,SAACF,GAAD,OAAiCxY,iBAAOmB,IAAgCqX,IAItGG,EAA4B,kBAAM3Y,iBAAOoB,uCCnDtD9J,EAAAC,EAAAC,EAAA,sBAAAgY,IAAAlY,EAAAC,EAAAC,EAAA,sBAAAipB,IAAAnpB,EAAAC,EAAAC,EAAA,sBAAAkpB,IAAAppB,EAAAC,EAAAC,EAAA,sBAAAmY,IAAArY,EAAAC,EAAAC,EAAA,sBAAAmpB,IAAArpB,EAAAC,EAAAC,EAAA,sBAAAopB,IAAAtpB,EAAAC,EAAAC,EAAA,sBAAAqpB,IAAAvpB,EAAAC,EAAAC,EAAA,sBAAAspB,IAAAxpB,EAAAC,EAAAC,EAAA,sBAAA6Z,IAAA/Z,EAAAC,EAAAC,EAAA,sBAAA8Z,IAAAha,EAAAC,EAAAC,EAAA,sBAAAupB,IAAAzpB,EAAAC,EAAAC,EAAA,sBAAAwpB,IAAA1pB,EAAAC,EAAAC,EAAA,sBAAAypB,IAAA3pB,EAAAC,EAAAC,EAAA,sBAAA0pB,IAAA,IAAAjB,EAAA3oB,EAAA,IAAAkpB,EAAAlpB,EAAA,IAwBakY,EAAwB,SAAC7G,EAAaC,GAAd,OAA8B5I,iBAAOhF,IAAwB,CAAE2N,MAAKC,SAK5F6X,EAAe,SAAC9F,GAAD,OAAuB3a,iBAAO/E,IAAmB0f,IAKhE+F,EAAqB,kBAAM1gB,iBAAO5E,MAKlCuU,EAAuB,kBAAM3P,iBAAO3E,MAKpCslB,EAAoB,kBAAM3gB,iBAAO9E,MAKjC0lB,EAAuB,SAACO,GAAD,OAAgCnhB,iBAAO1E,IAAwB6lB,IAKtFN,EAAgC,kBAAM7gB,iBAAOtE,MAU7ColB,EAAqB,SAACM,GAAD,OAAmCphB,iBAAOzE,IAAsB6lB,IAKrF/P,EAAqB,SAAC+P,GAAD,OAA6BphB,iBAAOxE,IAAsB4lB,IAK/E9P,EAAmB,kBAAMtR,iBAAOvE,MAKhCslB,EAAgB,SAACrjB,GAAD,OAAuBsC,iBAAOpE,IAAgB8B,IAK9DsjB,EAAqB,kBAAMhhB,iBAAOnE,MAKlColB,EAAyB,kBAAMjhB,iBAAOlE,MAKtColB,EAA8B,kBAAMlhB,iBAAO7E,uCC9FxD7D,EAAAC,EAAAC,EAAA,sBAAAiX,IAAAnX,EAAAC,EAAAC,EAAA,sBAAA6pB,IAAA/pB,EAAAC,EAAAC,EAAA,sBAAA8pB,IAAAhqB,EAAAC,EAAAC,EAAA,sBAAA2Y,IAAA7Y,EAAAC,EAAAC,EAAA,sBAAA+pB,IAAA,IAAAnpB,EAAAd,EAAA,IAAAkqB,EAAAlqB,EAAA,IAKamqB,EAAuB,SAACppB,GAAD,OAAwBA,EAAMqkB,QAErDjO,EAAuBjW,YAClC,CAACipB,GACD,SAACC,GAAD,OAAkBA,EAAa7H,sBAGpBwH,EAA+B7oB,YAC1C,CAACiW,GACD,SAACJ,GAAD,OAAkBA,EAAeK,MAGtB4S,EAAwB9oB,YACnC,CAACipB,GACD,SAACC,GAAD,MAAmB,CACjB/Y,IAAK+Y,EAAa3H,cAClBnR,IAAK8Y,EAAa1H,iBAIT7J,EAAqB3X,YAChC,CAACipB,GACD,SAACC,GAAD,OAAkBA,EAAaxH,aAGpBqH,EAAwB/oB,YACnC,CAACipB,GACD,SAACC,GAAD,OAAkBA,EAAapH,iDChCjChjB,EAAAC,EAAAC,EAAA,sBAAAmqB,IAAArqB,EAAAC,EAAAC,EAAA,sBAAAoqB,IAAAtqB,EAAAC,EAAAC,EAAA,sBAAAqqB,IAAAvqB,EAAAC,EAAAC,EAAA,sBAAAsqB,IAAO,IAAMH,EAA0B,0BAE1BC,EAAoC,kDACpCC,EAAmC,iDACnCC,EAAkC,iFCJ/CxqB,EAAAC,EAAAC,EAAA,sBAAAuqB,IAAAzqB,EAAAC,EAAAC,EAAA,sBAAA0hB,IAAA5hB,EAAAC,EAAAC,EAAA,sBAAA2hB,IAAA7hB,EAAAC,EAAAC,EAAA,sBAAAwqB,IAAA1qB,EAAAC,EAAAC,EAAA,sBAAA6hB,IAAA/hB,EAAAC,EAAAC,EAAA,sBAAA8hB,IAAA,IAAA2G,EAAA3oB,EAAA,IAAAkpB,EAAAlpB,EAAA,IAMayqB,EAAsB,kBAAM/hB,iBAAOwZ,MAKnCN,EAAsB,SAAC2C,GAAD,OAAuB7b,iBAAOwZ,IAAkCqC,IAKtF1C,EAAoB,kBAAMnZ,iBAAOwZ,MAKjCwI,EAAqB,SAAC7iB,EAAYnB,GAAb,OAAgCgC,iBAAOwZ,IAAiC,CAAEra,KAAInB,UAKnGqb,EAAqB,SAACla,EAAYnB,GAAb,OAAgCgC,iBAAOwZ,IAAiC,CAAEra,KAAInB,UAKnGsb,EAAmB,kBAAMtZ,iBAAOwZ,2gBC5BtC,IAAMyI,EAAOtqB,IAAOC,QAAVC,IAIKqqB,IAAOC,cACV,SAAApe,GAAA,OAAAA,EAAGqe,mBAA8C,GAAK,GACzD,SAAAhT,GAAA,OAAAA,EAAGiT,WAA8B,qCAAuC,SAG3EC,EAAa3qB,IAAO4qB,OAAVC,IAEMN,IAAOO,aAGvBC,EAAW/qB,IAAOgrB,KAAVC,KAKrBX,EAAKld,aAAe,CAClBsd,YAAY,EACZD,oBAAoB,+YCbTS,EAAsBrqB,YACjC,CAJmC,SAACH,GAAD,OAAwBA,EAAMmkB,OAAO1X,WAQ1E,SAAAf,GAA4D,IAA9BmL,EAA8BnL,EAA9BmL,OACxB4T,EAAS,KAEb,IACEA,EAASzS,KAAK+B,MAAM2Q,UAAU7T,EAAOmL,MAAM,KAC3C,MAAOlV,GACP2d,EAAS5T,EACNmL,MAAM,GACNlS,MAAM,KACN6a,OAAO,SAACF,EAAaG,GAAqB,IAAAC,EACpBD,EAAS9a,MAAM,KADKgb,EAAAjjB,OAAAkjB,EAAA,EAAAljB,CAAAgjB,EAAA,GAClC/c,EADkCgd,EAAA,GAC7BrpB,EAD6BqpB,EAAA,GAEzC,OAAOjjB,OAAAmjB,EAAA,EAAAnjB,CAAA,GACF4iB,EADL5iB,OAAAojB,EAAA,EAAApjB,CAAA,GAEQiG,EAAMrM,KAEb,IAGP,OAAOgpB,IAGF,IAAMvT,EAAiB/W,YAC5B,CAACqqB,EAAqBvB,KACtB,SAAAlS,EAAuEmU,GAAkB,IAAjFlU,EAAiFD,EAAtFzG,IAAsB2G,EAAgEF,EAArExG,IAClB,MAAQ,CACND,IAAKS,SAASoa,OAAOnU,IAAemU,OAAOnU,GAAckU,EAAc5a,IACvEC,IAAKQ,SAASoa,OAAOlU,IAAekU,OAAOlU,GAAciU,EAAc3a,OAKhE6a,EAAoB,SAACprB,GAAD,OAAwBA,EAAMskB,aAAahC,WAEtE+I,EAA6B,SAACrrB,GAAD,OAAwBA,EAAMskB,cAEpDgH,EAAsBnrB,YACjC,CAACkrB,GACD,SAACE,GAAD,OAAwBA,EAAmB5I,cAGhC6I,EAAuBrrB,YAClC,CAACkrB,GACD,SAACE,GAAD,OAAwBA,EAAmB3I,eAGhC6I,EAAmCtrB,YAC9C,CAACkrB,GACD,SAACE,GAAD,OAAwBA,EAAmB9I,oBAGhCiJ,EAA4BvrB,YACvC,CAACkrB,GACD,SAACE,GAAD,OAAwBA,EAAmB7I,oBAGhCvM,EAA4BhW,YACvC,CAACkrB,GACD,SAACE,GAAD,MAAyB,CACvBjb,IAAKib,EAAmBnJ,UACxB7R,IAAKgb,EAAmBlJ,aAIfsJ,EAAoCxrB,YAC/C,CAACgW,GACD,SAACyV,GAAD,OAAuBA,EAAkBtb,MAG9Bub,EAAqC1rB,YAChD,CAACgW,GACD,SAACyV,GAAD,OAAuBA,EAAkBrb,MAU9Bub,GAPqC3rB,YAChD,CAACkrB,GACD,SAACE,GAAD,OAAwBA,EAAmBhJ,6BAKmBpiB,YAC9D,CAxFiC,SAAC4rB,EAAgBC,GAAjB,OAA8CA,GAwFzDV,GACtB,SAACU,EAAarJ,GACZ,IAAMsJ,EAAoBD,EAAYvd,MAAMgc,OAAOwB,kBAEnD,OADwBtJ,EAAYuJ,KAAK,SAAAvU,GAAA,OAAAA,EAAG7Q,KAAgBmlB,KAAsB,yCCrFtFhtB,EAAAC,EAAAC,EAAA,sBAAA0qB,IAAO,IAAMA,EAAwB,CACnCsC,cAAe,UACfC,eAAgB,UAChBtC,cAAe,UACfuC,eAAgB,UAChBC,aAAc,UACdC,aAAc,UACdC,aAAc,UACdC,aAAc,UACdC,cAAe,UACftC,YAAa,UACbuC,iBAAkB,UAClBC,eAAgB,4CCxBlB3tB,EAAAC,EAAAC,EAAA,sBAAA0V,IAAA5V,EAAAC,EAAAC,EAAA,sBAAAkV,IAAO,IAAMQ,EAAuC,SAAC7U,GAAD,OAAwBA,EAAMwkB,gBAAgBnB,8BAErFhP,EAAqC,SAACrU,GAAD,OAAwBA,EAAMwkB,gBAAgBpQ","file":"static/js/main.54949c62.chunk.js","sourcesContent":["import { PageWrapper } from './PageWrapper.styled';\nimport { Tile, TileHeader, TileBody } from './Tile.styled';\n\n\nexport {\n  PageWrapper,\n  Tile,\n  TileHeader,\n  TileBody,\n};\n","import styled from 'styled-components';\n\n\nexport const PageWrapper = styled.section`\n  padding: 40px 40px 60px;\n  background: #cdcdff;\n  background: -webkit-linear-gradient(45deg, #cdcdff, #ffdcf3);\n`;\n","import { RootReducer } from '../rootReducer';\nimport { createSelector } from 'reselect';\n\nexport const carInfoSelector = (state: RootReducer) => state.car.carInfo;\n\nexport const isCarInfoFullyFilledSelector = createSelector(\n  [carInfoSelector],\n  carInfo => Boolean(carInfo.length && carInfo.width && carInfo.height),\n);\n\nexport const carManufacturersSelector = (state: RootReducer) => state.car.carManufacturers;\n\nexport const carPageIsInProgressSelector = (state: RootReducer) => state.car.isInProgress;\nexport const carPageIsErrorSelector = (state: RootReducer) => state.car.isError;\nexport const carPageIsCachedSelector = (state: RootReducer) => state.car.isCached;\n","import findParkings from '../assets/images/findParking.png';\nimport myAccount from '../assets/images/myAccount.svg';\nimport drivers from '../assets/images/drivers.png';\nimport defaultUserIcon from '../assets/images/defaultUserIcon.svg';\n\n\nexport default class ImagesService {\n  public static commonImages = {\n    defaultUserIcon,\n  };\n\n  public static driverImages = {\n    findParkings,\n    myAccount,\n    drivers,\n  };\n\n  public static getBase64(file?: File): Promise<string> {\n    if (!file) {\n      return Promise.resolve('');\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      // @ts-ignore\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    })\n      .then(value => value ? String(value) : '')\n      .catch(err => String(err));\n  };\n}\n","import * as React from 'react';\n\nimport * as styles from './Loader.module.css';\n\nclass Loader extends React.PureComponent {\n  render() {\n    return (\n      <div className={styles['loader']}>Loading...</div>\n    );\n  }\n}\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContainer\":\"App_AppContainer__1nBhh\"};","export const CHANGE_CENTER_LOCATION = 'App/CHANGE_CENTER_LOCATION';\nexport const CHANGE_ZOOM_LEVEL = 'App/CHANGE_ZOOM_LEVEL';\n\nexport const SYNCHRONIZE_LAT_LON = 'Parkings Page/SYNCHRONIZE_LAT_LON';\nexport const ASK_PERMISSION_FOR_GEO_LOCATION = 'Parkings Page/ASK_PERMISSION_FOR_GEO_LOCATION';\n\nexport const PARKINGS_FETCH_START = 'Parkings Page/PARKINGS_FETCH_START';\nexport const PARKINGS_REQUEST_FOR_FETCH = 'Parkings Page/PARKINGS_REQUEST_FOR_FETCH';\nexport const PARKINGS_FETCH_SUCCESS = 'Parkings Page/PARKINGS_FETCH_SUCCESS';\n\nexport const POST_PARKING_ATTEMPT = 'Parkings Page/POST_PARKING_ATTEMPT';\nexport const POST_PARKING_SUCCESS = 'Parkings Page/POST_PARKING_SUCCESS';\nexport const POST_PARKING_ERROR = 'Parkings Page/POST_PARKING_ERROR';\n\nexport const SET_PARKING_FREE_STATUS = 'Parkings Page/SET_PARKING_FREE_STATUS';\n\nexport const CHECK_PARKINGS_UPDATES_REQUEST = 'Parkings Page/CHECK_PARKINGS_UPDATES_REQUEST';\nexport const CHECK_PARKINGS_UPDATES_SUCCESS = 'Parkings Page/CHECK_PARKINGS_UPDATES_SUCCESS';\n\nexport const DELETE_PARKING = 'Parkings Page/DELETE_PARKING';\nexport const DELETE_ALL_FREE_SLOTS = 'Parkings Page/DELETE_ALL_FREE_SLOTS';\nexport const DELETE_VISIBLE_FREE_SLOTS = 'Parkings Page/DELETE_VISIBLE_FREE_SLOTS';\n","module.exports = __webpack_public_path__ + \"static/media/findParking.00c2ce8e.png\";","module.exports = __webpack_public_path__ + \"static/media/myAccount.56343e72.svg\";","module.exports = __webpack_public_path__ + \"static/media/drivers.e5e1fefe.png\";","module.exports = __webpack_public_path__ + \"static/media/defaultUserIcon.98e63c1e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__3ZbKj\",\"load8\":\"Loader_load8__tO1dv\"};","import * as path from 'path';\n\nimport { UserInfo } from '../interfaces/UserInfo';\nimport { USER_ROLE_ADMIN, USER_ROLE_DRIVER, USER_ROLE_GUEST } from '../store/userState/reducer';\n\n\nexport default class UrlService {\n  public static rootUrl = '/free-parkings-ui';\n\n  public static readonly loginPageUrl = path.join(UrlService.rootUrl, '/login');\n  public static readonly loginPageRolesAllowed = new Set([\n    USER_ROLE_GUEST,\n  ]);\n\n  public static readonly signupPageUrl = path.join(UrlService.rootUrl, '/signup');\n  public static readonly signupPageRolesAllowed = new Set([\n    USER_ROLE_GUEST,\n  ]);\n\n  public static readonly configPageUrl = path.join(UrlService.rootUrl, '/config');\n  public static readonly configPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly dashboardPageUrl = path.join(UrlService.rootUrl, '/dashboard');\n  public static readonly dashboardPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly settingsPageUrl = path.join(UrlService.rootUrl, '/driver-account');\n  public static readonly settingsPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly parkingsPageUrl = path.join(UrlService.rootUrl, '/parkings');\n  public static readonly parkingsPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly findParkingsPageUrl = path.join(UrlService.parkingsPageUrl, '/find-parking');\n  public static readonly findParkingsPageRolesAllowed = new Set([\n    USER_ROLE_DRIVER, USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly createParkingPageUrl = path.join(UrlService.parkingsPageUrl, '/create-parking');\n  public static readonly editParkingPageUrl = path.join(UrlService.parkingsPageUrl, '/edit-parking');\n  public static readonly editParkingPageUrlWithParams = (parkingId: string) => path.join(UrlService.editParkingPageUrl, parkingId);\n  public static readonly editParkingPageUrlRoute = `${UrlService.editParkingPageUrl}/:selectedParkingId`;\n\n  public static readonly allUsersPageUrl = path.join(UrlService.rootUrl, '/all-users');\n  public static readonly allUsersPageRolesAllowed = new Set([\n    USER_ROLE_ADMIN,\n  ]);\n\n  public static readonly detectPageByUserInfo = function(userInfo?: UserInfo): string {\n    if (!userInfo || !userInfo.role || userInfo.role === USER_ROLE_GUEST) {\n      return UrlService.loginPageUrl;\n    } else if (userInfo.role === USER_ROLE_ADMIN || userInfo.role === USER_ROLE_DRIVER) {\n      return UrlService.dashboardPageUrl;\n    }\n    return UrlService.rootUrl;\n  };\n\n  public static readonly isRouteAllowed = function(userInfo: UserInfo, routeRolesAllowed: Set<string>): boolean {\n    return routeRolesAllowed.has(userInfo.role);\n  }\n}\n","export const INIT_USER_AUTH_INFO_ON_LOAD = 'INIT_USER_AUTH_INFO_ON_LOAD';\nexport const INIT_USER_INFO_ON_LOAD = 'INIT_USER_INFO_ON_LOAD';\nexport const NOT_ALLOWED_WITH_GUEST_PERMISSION = 'NOT_ALLOWED_WITH_GUEST_PERMISSION';\n\nexport const USER_SIGN_IN_ATTEMPT = 'USER_SIGN_IN_ATTEMPT';\nexport const USER_SIGN_IN_SUCCESS = 'USER_SIGN_IN_SUCCESS';\nexport const USER_SIGN_IN_ERROR = 'USER_SIGN_IN_ERROR';\n\nexport const USER_SIGN_OUT_ATTEMPT = 'USER_SIGN_OUT_ATTEMPT';\nexport const USER_SIGN_OUT_SUCCESS = 'USER_SIGN_OUT_SUCCESS';\nexport const USER_SIGN_OUT_ERROR = 'USER_SIGN_OUT_ERROR';\n\nexport const USER_SIGN_UP_ATTEMPT = 'USER_SIGN_UP_ATTEMPT';\nexport const USER_SIGN_UP_SUCCESS = 'USER_SIGN_UP_SUCCESS';\nexport const USER_SIGN_UP_ERROR = 'USER_SIGN_UP_ERROR';\n","module.exports = __webpack_public_path__ + \"static/media/parking-found.57a4105f.mp3\";","import { UserAction } from './actions';\nimport {\n  INIT_USER_AUTH_INFO_ON_LOAD,\n  INIT_USER_INFO_ON_LOAD,\n  USER_SIGN_IN_ATTEMPT,\n  USER_SIGN_IN_ERROR,\n  USER_SIGN_IN_SUCCESS,\n  USER_SIGN_OUT_SUCCESS,\n  USER_SIGN_UP_ATTEMPT,\n  USER_SIGN_UP_ERROR,\n  USER_SIGN_UP_SUCCESS,\n} from '../../containers/App/constants';\nimport {\n  USER_UPDATE_AVATAR,\n  USER_UPDATE_DEFAULT_COUNTRY,\n  USER_UPDATE_FULLNAME,\n  USER_UPDATE_GENDER,\n  USER_UPDATE_USERNAME,\n} from './constants';\nimport { UserInfo } from '../../interfaces/UserInfo';\n\n\nexport const USER_ROLE_GUEST = 'GUEST';\nexport const USER_ROLE_ADMIN = 'ADMIN';\nexport const USER_ROLE_DRIVER = 'DRIVER';\n\nexport const USER_GENDER_MALE = 'male';\nexport const USER_GENDER_FEMALE = 'female';\nexport const USER_GENDER_NOT_APPLIED = 'n/a';\n\nexport const POSSIBLE_GENDER_LIST = [\n  USER_GENDER_MALE,\n  USER_GENDER_FEMALE,\n  USER_GENDER_NOT_APPLIED,\n];\n\nexport const userInitialState: UserInfo = {\n  id: '-1',\n  isLoginInProgress: false,\n  isSignupInProgress: false,\n  isLoginError: false,\n  signupError: null,\n  isAuthorized: false,\n  role: USER_ROLE_GUEST,\n  imageUrl: 'https://i0.wp.com/www.winhelponline.com/blog/wp-content/uploads/2017/12/user.png',\n  username: 'default username',\n  fullname: '',\n  defaultCountry: '',\n};\n\nexport default function userReducer(\n  state: UserInfo = userInitialState,\n  action: UserAction,\n): UserInfo {\n  switch (action.type) {\n    case INIT_USER_AUTH_INFO_ON_LOAD: {\n      return {\n        ...state,\n        ...action.payload,\n        isAuthorized: true,\n      };\n    }\n    case INIT_USER_INFO_ON_LOAD: {\n      return {\n        ...state,\n        ...action.payload,\n        isAuthorized: true,\n      };\n    }\n    case USER_SIGN_IN_ATTEMPT: {\n      return {\n        ...state,\n        isLoginInProgress: true,\n        isLoginError: false,\n      };\n    }\n    case USER_SIGN_IN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n        isLoginInProgress: false,\n        isLoginError: false,\n        isAuthorized: true,\n      };\n    }\n    case USER_SIGN_IN_ERROR: {\n      return {\n        ...state,\n        isLoginInProgress: false,\n        isLoginError: true,\n        isAuthorized: false,\n        imageUrl: userInitialState.imageUrl,\n        username: userInitialState.username,\n        gender: userInitialState.gender,\n      };\n    }\n    case USER_SIGN_OUT_SUCCESS: {\n      return userInitialState;\n    }\n    case USER_SIGN_UP_ATTEMPT: {\n      return {\n        ...state,\n        isSignupInProgress: true,\n        signupError: null,\n      };\n    }\n    case USER_SIGN_UP_SUCCESS: {\n      return {\n        ...state,\n        isSignupInProgress: false,\n        signupError: null,\n      };\n    }\n    case USER_SIGN_UP_ERROR: {\n      return {\n        ...state,\n        isSignupInProgress: false,\n        signupError: action.payload.signupError,\n      };\n    }\n    case USER_UPDATE_AVATAR: {\n      return {\n        ...state,\n        imageUrl: action.payload,\n      };\n    }\n    case USER_UPDATE_USERNAME: {\n      return {\n        ...state,\n        username: action.payload,\n      };\n    }\n    case USER_UPDATE_FULLNAME: {\n      return {\n        ...state,\n        fullname: action.payload,\n      };\n    }\n    case USER_UPDATE_GENDER: {\n      return {\n        ...state,\n        gender: action.payload,\n      };\n    }\n    case USER_UPDATE_DEFAULT_COUNTRY: {\n      return {\n        ...state,\n        defaultCountry: action.payload,\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export const LOAD_CAR_PARAMETERS_ATTEMPT = 'LOAD_CAR_PARAMETERS_ATTEMPT';\nexport const LOAD_CAR_PARAMETERS_SUCCESS = 'LOAD_CAR_PARAMETERS_SUCCESS';\nexport const LOAD_CAR_PARAMETERS_ERROR = 'LOAD_CAR_PARAMETERS_ERROR';\nexport const LOAD_CAR_PARAMETERS_RESET = 'LOAD_CAR_PARAMETERS_RESET';\n\nexport const UPDATE_CAR_PARAMETER_VALUE_ATTEMPT = 'UPDATE_CAR_PARAMETER_VALUE_ATTEMPT';\nexport const UPDATE_CAR_PARAMETER_VALUE_SUCCESS = 'UPDATE_CAR_PARAMETER_VALUE_SUCCESS';\nexport const UPDATE_CAR_PARAMETER_VALUE_ERROR = 'UPDATE_CAR_PARAMETER_VALUE_ERROR';\n\nexport const LOAD_CAR_MANUFACTURERS_ATTEMPT = 'LOAD_CAR_MANUFACTURERS_ATTEMPT';\nexport const LOAD_CAR_MANUFACTURERS_SUCCESS = 'LOAD_CAR_MANUFACTURERS_SUCCESS';\nexport const LOAD_CAR_MANUFACTURERS_ERROR = 'LOAD_CAR_MANUFACTURERS_ERROR';\n","export const USER_UPDATE_AVATAR = 'USER_UPDATE_AVATAR';\nexport const USER_UPDATE_USERNAME = 'USER_UPDATE_USERNAME';\nexport const USER_UPDATE_FULLNAME = 'USER_UPDATE_FULLNAME';\nexport const USER_UPDATE_GENDER = 'USER_UPDATE_GENDER';\nexport const USER_UPDATE_DEFAULT_COUNTRY = 'USER_UPDATE_DEFAULT_COUNTRY';\n","import { RootReducer } from '../rootReducer';\n\nexport const userInfoSelector = (state: RootReducer) => state.user;\n\nexport const areCredentialsInvalidSelector = (state: RootReducer) => state.user.isLoginError;\n\nexport const signupErrorSelector = (state: RootReducer) => state.user.signupError;\n\nexport const isSigninAttemptInProgressSelector = (state: RootReducer) => state.user.isLoginInProgress;\n\nexport const isSignupAttemptInProgressSelector = (state: RootReducer) => state.user.isSignupInProgress;\n\nexport const isUserAuthorizedSelector = (state: RootReducer) => state.user.isAuthorized;\n\nexport const userAccessTokenSelector = (state: RootReducer) => state.user.accessToken;\n\nexport const usernameSelector = (state: RootReducer) => state.user.username;\n\nexport const userIdSelector = (state: RootReducer) => state.user.id;\n\nexport const avatarUrlSelector = (state: RootReducer) => state.user.imageUrl;\n","export const LOAD_ALL_USERS_ATTEMPT = 'Drivers page/LOAD_ALL_USERS_ATTEMPT';\nexport const LOAD_ALL_USERS_SUCCESS = 'Drivers page/LOAD_ALL_USERS_SUCCESS';\nexport const LOAD_ALL_USERS_ERROR = 'Drivers page/LOAD_ALL_USERS_ERROR';\n\nexport const SET_USER_ROLE_ATTEMPT = 'Drivers page/SET_USER_ROLE_ATTEMPT';\nexport const SET_USER_ROLE_SUCCESS = 'Drivers page/SET_USER_ROLE_SUCCESS';\nexport const SET_USER_ROLE_ERROR = 'Drivers page/SET_USER_ROLE_ERROR';\n","import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\n\nimport { userInfoSelector } from '../../store/userState/selectors';\nimport { RootReducer } from '../../store/rootReducer';\nimport * as styles from './Header.module.css';\nimport UrlService from '../../services/Url.service';\nimport { UserInfo } from '../../interfaces/UserInfo';\nimport { userSignOutAttempt, userSignOutAttemptActionCreator } from '../../store/userState/actions';\nimport ImagesService from '../../services/Images.service';\n\n\ninterface HeaderOwnProps {\n  user: UserInfo,\n}\n\ninterface HeaderDispatchProps {\n  userSignOut: userSignOutAttemptActionCreator,\n}\n\ninterface HeaderProps extends HeaderOwnProps, HeaderDispatchProps {}\n\ninterface HeaderLocalState {}\n\nclass Header extends React.PureComponent<HeaderProps, HeaderLocalState> {\n  renderLogo() {\n    return (\n      <Link to={UrlService.detectPageByUserInfo(this.props.user)}>\n        <h1 className={styles['HeaderLogo']}>\n          F<span className={styles['HeaderLogoFull']}>ree</span>\n          {' '}\n          P<span className={styles['HeaderLogoFull']}>arkings</span>\n        </h1>\n      </Link>\n    );\n  }\n\n  renderUserActionsDropdown() {\n    return (\n      <ul\n        className={styles['HeaderUserActionsDropdownList']}\n      >\n        <li>\n          <Link\n            to={'#'}\n            className={styles['HeaderUserActionsDropdownLink']}\n          >\n            About\n          </Link>\n        </li>\n\n        <li>\n          <Link\n            to={UrlService.configPageUrl}\n            className={styles['HeaderUserActionsDropdownLink']}\n          >\n            Settings\n          </Link>\n        </li>\n\n        <hr className={styles['HeaderUserActionsDropdownListDivider']} />\n\n        <li\n          className={styles['HeaderUserActionsDropdownItem']}\n        >\n          <Link\n            to={UrlService.loginPageUrl}\n            onClick={this.props.userSignOut}\n            className={styles['HeaderUserActionsDropdownLink']}\n          >\n            Logout\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  renderUserPanel() {\n    if (!this.props.user.isAuthorized) {\n      return null;\n    }\n\n    return (\n      <section className={styles['HeaderUserPanel']}>\n        <img\n          src={this.props.user.imageUrl || ImagesService.commonImages.defaultUserIcon}\n          alt=\"Avatar\"\n          className={styles['HeaderUserPanelAvatar']}\n        />\n        {this.renderUserActionsDropdown()}\n      </section>\n    );\n  }\n\n  render() {\n    return (\n      <header className={styles['HeaderContainer']}>\n        { this.renderLogo() }\n        { this.renderUserPanel() }\n      </header>\n    )\n  }\n}\n\nconst mapStateToProps = createStructuredSelector<RootReducer, HeaderOwnProps>({\n  user: userInfoSelector,\n});\n\nconst mapDispatchToProps = {\n  userSignOut: userSignOutAttempt,\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(\n  withConnect,\n)(Header);\n","import React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Redirect, Route } from 'react-router';\nimport UrlService from '../services/Url.service';\n\n\nconst ProtectedRoute = ({ component: Component, allowed, RedirectComponent = null, redirectPath = '', ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) =>\n      allowed\n        ? <Component {...props} />\n        : RedirectComponent ? <RedirectComponent/> : (\n          <Redirect\n            to={{\n              pathname: redirectPath,\n              state: { from: props.location },\n            }}\n          />\n        )\n    }\n  />\n);\n\nProtectedRoute.propTypes = {\n  component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  allowed: PropTypes.bool.isRequired,\n  redirectPath: PropTypes.string,\n  redirectComponent: PropTypes.any,\n  location: PropTypes.object,\n};\n\nProtectedRoute.defaultProps = {\n  redirectPath: UrlService.loginPageUrl,\n  redirectComponent: null,\n};\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Switch } from 'react-router';\nimport { createStructuredSelector } from 'reselect';\n\nimport * as css from './App.module.css';\nimport Header from '../../components/Header/Header';\nimport Loader from '../../components/Loader/Loader';\nimport UrlService from '../../services/Url.service';\nimport ProtectedRoute from '../../HOCs/ProtectedRoute';\nimport { isUserAuthorizedSelector, userInfoSelector } from '../../store/userState/selectors';\nimport { RootReducer } from '../../store/rootReducer';\nimport { UserInfo } from '../../interfaces/UserInfo';\nimport { PageWrapper } from '../../components/CommonStyled/commonStyled';\n\nconst LoginPage = React.lazy(() => import('../LoginPage/LoginPage'));\nconst SignupPage = React.lazy(() => import('../SignupPage/SignupPage'));\nconst AllUsersPage = React.lazy(() => import('../AllUsersPage/AllUsersPage'));\nconst ParkingsPage = React.lazy(() => import('../ParkingsPage/ParkingsPage'));\nconst DashboardPage = React.lazy(() => import('../DashboardPage/DashboardPage'));\nconst UserSettingsPage = React.lazy(() => import('../UserSettingsPage/UserSettingsPage'));\n\n\ninterface AppProps {\n  isUserAuthorized: boolean,\n  userInfo: UserInfo,\n}\n\nexport class App extends React.Component<AppProps> {\n  render() {\n    return (\n      <main className={css['AppContainer']}>\n        <Header/>\n        <React.Suspense fallback={<PageWrapper><Loader/></PageWrapper>}>\n          <Switch>\n            <ProtectedRoute\n              path={UrlService.loginPageUrl}\n              component={LoginPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.loginPageRolesAllowed)}\n              redirectPath={UrlService.detectPageByUserInfo(this.props.userInfo)}\n            />\n            <ProtectedRoute\n              path={UrlService.signupPageUrl}\n              component={SignupPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.signupPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <ProtectedRoute\n              path={UrlService.parkingsPageUrl}\n              component={ParkingsPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.parkingsPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <ProtectedRoute\n              path={UrlService.dashboardPageUrl}\n              component={DashboardPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.dashboardPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <ProtectedRoute\n              path={UrlService.settingsPageUrl}\n              component={UserSettingsPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.settingsPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <ProtectedRoute\n              path={UrlService.allUsersPageUrl}\n              component={AllUsersPage}\n              allowed={UrlService.isRouteAllowed(this.props.userInfo, UrlService.allUsersPageRolesAllowed)}\n              RedirectComponent={LoginPage}\n            />\n            <Redirect\n              exact\n              path=\"/\"\n              to={UrlService.detectPageByUserInfo(this.props.userInfo)}\n            />\n            <Redirect\n              exact\n              path={UrlService.rootUrl}\n              to={UrlService.detectPageByUserInfo(this.props.userInfo)}\n            />\n          </Switch>\n        </React.Suspense>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector<RootReducer, AppProps>({\n  userInfo: userInfoSelector,\n  isUserAuthorized: isUserAuthorizedSelector,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.info(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ClientParking,\n  Parking,\n  ParkingServerExpects,\n} from '../../interfaces/Parking';\nimport { PointGeometry } from '../../interfaces/PointGeometry';\nimport { ResponseParking } from '../../interfaces/Parking';\nimport { PreparedParkings, ResponseParkings } from '../../interfaces/ResponseParkings';\n\n\nexport function prepareParkings(\n  rawResponseParkings?: ResponseParkings\n): PreparedParkings {\n  let preparedResponse: PreparedParkings = [];\n\n  if (!rawResponseParkings || !Array.isArray(rawResponseParkings)) {\n    return preparedResponse;\n  }\n\n  preparedResponse = prepareParkopediaParkings(rawResponseParkings);\n\n  return preparedResponse;\n}\n\nfunction prepareParkopediaParkings(allParkings: ResponseParking[]): Parking[] {\n  return allParkings.map(prepareParkopediaParkingSlot);\n}\n\nfunction prepareParkopediaParkingSlot(parkingSlot: ResponseParking): Parking {\n  return parkingSlot;\n}\n\n\nexport function prepareParkingParametersFromClientToServer(rawParkingParameters: ClientParking): ParkingServerExpects {\n  const {\n    parkingsGeoJsonSource: rawGeometry,\n    isLatLon,\n    parkingLength: length,\n    parkingWidth: width,\n    parkingHeight: height,\n    ...restParameters\n  } = rawParkingParameters;\n  const geometry = prepareUserInputParkingGeometry(rawGeometry, isLatLon);\n\n  return {\n    ...restParameters,\n    geometry,\n    length,\n    width,\n    height,\n  }\n}\n\nexport function prepareUserInputParkingGeometry(rawParkingGeometry: string, isLatLon: boolean): PointGeometry[] {\n  const parkingPoints = rawParkingGeometry\n    .split('\\n')\n    .map(p => prepareUserInputParkingPoint(p, isLatLon))\n    .filter(isValidPoint)\n  ;\n\n  if (parkingPoints.length < 2) {\n    return [];\n  }\n  return parkingPoints;\n}\n\nfunction prepareUserInputParkingPoint(rawParkingPoint: string, isLatLon: boolean): PointGeometry {\n  const [lat, lon] = rawParkingPoint\n    .split(',')\n    .map(s => parseFloat(s.trim()))\n  ;\n  return isLatLon ? [lat, lon] : [lon, lat];\n}\n\nfunction isValidPoint(pointGeometry: PointGeometry) {\n  return Array.isArray(pointGeometry) && pointGeometry.length === 2 && pointGeometry.every(isFinite);\n}\n","export const backendEndpoint = (\n  process.env.NODE_ENV === 'production'\n    ? 'https://free-parkings-api.herokuapp.com'\n    : 'http://localhost:8000'\n);\n","export default function serialize(obj: any, prefix?: string): string {\n  let str = [];\n  let p;\n  for (p in obj) {\n    if (obj.hasOwnProperty(p)) {\n      const k = prefix\n        ? prefix + '[' + p + ']'\n        : p;\n      const v = obj[p];\n      str.push(\n        (v !== null && typeof v === \"object\")\n          ? serialize(v, k)\n          : encodeURIComponent(k) + \"=\" + encodeURIComponent(v)\n      );\n    }\n  }\n  return str.join(\"&\");\n}\n","const getUserLocation = () => new Promise((resolve, reject) => {\n  navigator.geolocation.getCurrentPosition(\n    location => resolve(location),\n    error => reject(error),\n  )\n});\n\nconst watchUserLocation = () => new Promise((resolve, reject) => {\n  navigator.geolocation.watchPosition(\n    location => resolve(location),\n    error => reject(error),\n  )\n});\n\nexport default {\n  getUserLocation,\n  watchUserLocation,\n  getUserLatLon: (location: Position) => ({\n    lat: location.coords.latitude,\n    lon: location.coords.longitude,\n  }),\n};\n","import { select } from 'redux-saga/effects';\n\nimport { userAccessTokenSelector } from '../store/userState/selectors';\n\n\nfunction checkStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  throw response;\n}\n\nfunction parseJSON(response: Response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\nexport function request(url: string, options: RequestInit = {}, json: boolean = true) {\n  const promise = fetch(url, options).then(checkStatus);\n  return json ? promise.then(parseJSON) : promise;\n}\n\nexport function* requestToFreeParkingsAPI(url: string, options: RequestInit = {}) {\n  const accessToken = yield select(userAccessTokenSelector);\n\n  const response = yield fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...accessToken ? {'access_token': accessToken} : {},\n    },\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n  ;\n  return response;\n}\n","const parkingIsFoundPath = require('../assets/audio/parking-found.mp3');\n\n\nexport default class AudioService {\n  static parkingIsFoundPath: string = parkingIsFoundPath;\n}\n","import { delay } from 'redux-saga';\nimport { all, call, select, takeLatest } from 'redux-saga/effects';\n\nimport * as parkingSettinsConstants from './constants';\nimport { checkForParkingsUpdates } from '../parkings/saga';\nimport { PreparedParkings } from '../../interfaces/ResponseParkings';\nimport { areVoiceNotificationsEnabledSelector, isParkingAutoSearchEnabledSelector } from './selectors';\nimport AudioService from '../../services/AudioService';\n\n\nlet checkParkopediaUpdatesTimer: boolean = false;\nfunction* startCheckingParkopediaUpdatesSaga() {\n  const isParkingAutoSearchEnabled = yield select(isParkingAutoSearchEnabledSelector);\n  checkParkopediaUpdatesTimer = true;\n  while (checkParkopediaUpdatesTimer && isParkingAutoSearchEnabled) {\n    yield call(checkForParkingsUpdates);\n    yield delay(5000);\n  }\n}\n\nfunction stopCheckingParkopediaUpdatesSaga() {\n  checkParkopediaUpdatesTimer = false;\n}\n\nexport function* parkingVoiceNotification(preparedResponseParkings: PreparedParkings) {\n  const areVoiceNotificationsEnabled = yield select(areVoiceNotificationsEnabledSelector);\n  if (areVoiceNotificationsEnabled && preparedResponseParkings.length > 0) {\n    new Audio(AudioService.parkingIsFoundPath).play();\n  }\n}\n\nexport default function* defaultParkingSettingsSaga() {\n  yield all([\n    takeLatest(parkingSettinsConstants.START_CHECKING_PARKOPEDIA_UPDATES, startCheckingParkopediaUpdatesSaga),\n    takeLatest(parkingSettinsConstants.STOP_CHECKING_PARKOPEDIA_UPDATES, stopCheckingParkopediaUpdatesSaga),\n  ]);\n}\n","import { push } from 'connected-react-router';\nimport { all, call, put, select, takeEvery, takeLatest, throttle } from 'redux-saga/effects';\n\nimport { centerCoordinatesSelector, latLonSelector } from './selectors';\nimport { prepareParkingParametersFromClientToServer, prepareParkings } from './adapters';\nimport { searchRadiusSelector, sessionUidSelector } from '../../containers/BaseConfigPage/BaseConfigSelectors';\nimport { PreparedParkings, ResponseParkings } from '../../interfaces/ResponseParkings';\nimport * as ParkingsPageActions from './actions';\nimport {\n  deleteParkingAction,\n  fetchParkingsRequest,\n  postParkingAttemptAction,\n  postParkingError,\n  postParkingSuccess,\n  setParkingsPageCenter,\n} from './actions';\nimport { backendEndpoint } from '../../constants/backend';\nimport { MAX_SEARCH_RADIUS_TO_FETCH } from '../../containers/BaseConfigPage/BaseConfigConstants';\nimport serialize from '../../utils/serialize';\nimport * as parkingsConstants from './constants';\nimport { default as GeoLocationService } from '../../services/GeoLocation.service';\nimport { requestToFreeParkingsAPI } from '../../services/Authentication.service';\nimport { ParkingServerExpects } from '../../interfaces/Parking';\nimport { parkingVoiceNotification } from '../parkingSettings/saga';\n\n\nexport function* fetchParkingsSaga() {\n  const { lat, lon } = yield select(centerCoordinatesSelector);\n  const searchRadius = yield select(searchRadiusSelector);\n\n  const canFetchParkings = searchRadius < MAX_SEARCH_RADIUS_TO_FETCH;\n  try {\n    if (canFetchParkings) {\n      yield put(ParkingsPageActions.fetchParkingsStart());\n      const searchQuery = serialize({ lat, lon, radius: searchRadius });\n      const rawResponseParkings: ResponseParkings = yield call(requestToFreeParkingsAPI, `${backendEndpoint}/parkings?${searchQuery}`);\n      const preparedResponseParkings: PreparedParkings = prepareParkings(rawResponseParkings);\n      yield call(parkingVoiceNotification, preparedResponseParkings);\n      yield put(ParkingsPageActions.fetchParkingsSuccess(preparedResponseParkings));\n    }\n  } catch (e) {\n    console.error('fetch parkings:', e);\n  }\n}\n\nexport function* updateUrlLatLonSaga(action: ParkingsPageActions.setParkingsPageCenterAction) {\n  try {\n    yield put(push({\n      search: `?lat=${action.payload.lat}&lon=${action.payload.lon}`,\n    }));\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport function* synchronizeLatLonSaga() {\n  const { lat: latFromUrl, lon: lonFromUrl } = yield select(latLonSelector);\n  yield put(setParkingsPageCenter(latFromUrl, lonFromUrl));\n}\n\nexport function* checkForParkingsUpdates() {\n  yield put(fetchParkingsRequest());\n}\n\nexport function* clearAllFreeSlotsSaga() {\n  try {\n    yield call(fetch, `${backendEndpoint}/admin/cloudevents/drop`, {\n      method: 'POST',\n    });\n  } catch (e) {\n    console.error('Failed to clear all free slots');\n  }\n}\n\nexport function* clearVisibleFreeSlotsSaga() {\n  const { lat, lon } = yield select(centerCoordinatesSelector);\n  const radius = yield select(searchRadiusSelector);\n  const uid = yield select(sessionUidSelector);\n\n  try {\n    yield call(fetch, `${backendEndpoint}/admin/cloudevents/drop/area`, {\n      method: 'POST',\n      body: JSON.stringify({ lat, lon, radius, uid }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n  } catch (e) {\n    console.error('Failed to clear visible free slots');\n  }\n\n  yield put(fetchParkingsRequest());\n}\n\nfunction* detectGeoLocationSaga() {\n  if ('geolocation' in navigator) {\n    try {\n      const location = yield call(GeoLocationService.getUserLocation);\n      const { lat, lon } = yield call(GeoLocationService.getUserLatLon, location);\n      yield put(setParkingsPageCenter(lat, lon));\n    } catch (e) {\n      console.error(e);\n    }\n  } else {\n    /* geolocation IS NOT available */\n  }\n}\n\nfunction* createParkingSaga(preparedParkingParameters: ParkingServerExpects) {\n  const url = `${backendEndpoint}/parkings`;\n  const createdParking = yield call(requestToFreeParkingsAPI, url, {\n    method: 'PUT',\n    body: JSON.stringify(preparedParkingParameters),\n  });\n  return createdParking;\n}\n\nfunction* updateParkingSaga(preparedParkingParameters: ParkingServerExpects) {\n  const url = `${backendEndpoint}/parkings/${preparedParkingParameters.id}`;\n  yield call(requestToFreeParkingsAPI, url, {\n    method: 'PUT',\n    body: JSON.stringify(preparedParkingParameters),\n  });\n  return true;\n}\n\nfunction* postParkingSaga(action: postParkingAttemptAction) {\n  const preparedParkingParameters = prepareParkingParametersFromClientToServer(action.payload);\n  try {\n    let parking = null;\n\n    if (preparedParkingParameters.id) {\n      yield call(updateParkingSaga, preparedParkingParameters);\n      parking = preparedParkingParameters;\n    } else {\n      parking = yield call(createParkingSaga, preparedParkingParameters);\n    }\n    yield put(postParkingSuccess(parking));\n  } catch (e) {\n    yield put(postParkingError());\n  }\n}\n\nfunction* deleteParkingSaga(action: deleteParkingAction) {\n  const parkingId = action.payload;\n  const url = `${backendEndpoint}/parkings/${parkingId}`;\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'DELETE',\n    })\n  } catch (e) {\n    console.error('cannot delete parking', e);\n  }\n}\n\nexport default function* defaultParkingsSaga() {\n  yield all([\n    throttle(3000, parkingsConstants.PARKINGS_REQUEST_FOR_FETCH, fetchParkingsSaga),\n    takeEvery(parkingsConstants.CHANGE_CENTER_LOCATION, updateUrlLatLonSaga),\n    takeEvery(parkingsConstants.CHECK_PARKINGS_UPDATES_REQUEST, checkForParkingsUpdates),\n    takeLatest(parkingsConstants.SYNCHRONIZE_LAT_LON, synchronizeLatLonSaga),\n    takeEvery(parkingsConstants.DELETE_PARKING, deleteParkingSaga),\n    takeEvery(parkingsConstants.DELETE_ALL_FREE_SLOTS, clearAllFreeSlotsSaga),\n    takeEvery(parkingsConstants.DELETE_VISIBLE_FREE_SLOTS, clearVisibleFreeSlotsSaga),\n    takeEvery(parkingsConstants.ASK_PERMISSION_FOR_GEO_LOCATION, detectGeoLocationSaga),\n    takeEvery(parkingsConstants.POST_PARKING_ATTEMPT, postParkingSaga),\n  ]);\n}\n","import { UserInfo, UserInfoRequiredForAuth } from '../interfaces/UserInfo';\nimport { userInfoSelector } from '../store/userState/selectors';\nimport { call, select } from 'redux-saga/effects';\n\n\nexport default class LocalStorageService {\n  public static getUserInfo(): UserInfo | null {\n    const userAuthInfoJSON: string | null = localStorage.getItem('userInfoAuth');\n    if (!userAuthInfoJSON) {\n      return null;\n    }\n    return JSON.parse(userAuthInfoJSON);\n  }\n\n  public static hasUserInfo() {\n    return Boolean(localStorage.getItem('userInfoAuth'));\n  }\n\n  public static getAccessToken() {\n    const userInfo = LocalStorageService.getUserInfo();\n    if (!userInfo || !userInfo.accessToken) {\n      return null;\n    }\n    return userInfo.accessToken;\n  }\n\n  public static getUserInfoRequiredForAuth(): UserInfoRequiredForAuth | null {\n    const userAuthInfoJSON: string | null = localStorage.getItem('userInfoAuth');\n    if (!userAuthInfoJSON) {\n      return null;\n    }\n    return JSON.parse(userAuthInfoJSON);\n  }\n\n  public static saveUserInfoRequiredForAuth(info: UserInfoRequiredForAuth) {\n    localStorage.setItem('userInfoAuth', JSON.stringify(info));\n  }\n\n  public static removeUserInfo() {\n    localStorage.removeItem('userInfoAuth');\n  }\n}\n\nexport function* updateUserInfoLocallySaga() {\n  const userInfo = yield select(userInfoSelector);\n  yield call(LocalStorageService.saveUserInfoRequiredForAuth, {\n    id: userInfo.id,\n    accessToken: userInfo.accessToken,\n  });\n}\n","import isString from 'lodash/isString';\n\nimport { UserInfo } from '../../interfaces/UserInfo';\nimport { userInitialState } from './reducer';\nimport { ResponseLoginInfo } from '../../interfaces/ResponseLoginInfo';\n\n\nexport function userInfoAdapter (loginInfo: ResponseLoginInfo): UserInfo {\n  if (!loginInfo) {\n    return userInitialState;\n  }\n\n  const name = loginInfo.personalInfo.name || '';\n  const surname = loginInfo.personalInfo.surname || '';\n  const fullname = `${name} ${surname}`;\n\n  return {\n    ...userInitialState,\n    accessToken: loginInfo.accessToken,\n    ...loginInfo.personalInfo,\n    fullname,\n  }\n}\n\nexport function signupErrorAdapter(err: any): string | null {\n  if (!err) {\n    return null;\n  }\n  if (isString(err)) {\n    return err;\n  }\n  if ('message' in err) {\n    return err.message;\n  }\n  return null;\n}\n","import { all, call, put, select, takeLatest } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport { action } from 'typesafe-actions';\n\nimport { backendEndpoint } from '../../constants/backend';\nimport {\n  initUserAuthInfoOnLoad,\n  initUserInfoOnLoad,\n  signinUserAttemptAction,\n  signinUserError,\n  signinUserSuccess,\n  signupUserAttemptAction,\n  signupUserError,\n  signupUserSuccess,\n  updateAvatarAction,\n  updateDefaultCountryAction,\n  updateFullnameAction,\n  updateGenderAction,\n  updateUsernameAction,\n  userSignOutSuccess,\n} from './actions';\nimport LocalStorageService, { updateUserInfoLocallySaga } from '../../services/LocalStorage.service';\nimport {\n  USER_SIGN_IN_ATTEMPT,\n  USER_SIGN_IN_SUCCESS,\n  USER_SIGN_OUT_ATTEMPT,\n  USER_SIGN_OUT_ERROR,\n  USER_SIGN_OUT_SUCCESS,\n  USER_SIGN_UP_ATTEMPT,\n  USER_SIGN_UP_SUCCESS,\n} from '../../containers/App/constants';\nimport UrlService from '../../services/Url.service';\nimport { requestToFreeParkingsAPI } from '../../services/Authentication.service';\nimport { signupErrorAdapter, userInfoAdapter } from './adapters';\nimport { userAccessTokenSelector, userIdSelector, userInfoSelector } from './selectors';\nimport { ResponseLoginInfo } from '../../interfaces/ResponseLoginInfo';\nimport {\n  USER_UPDATE_AVATAR,\n  USER_UPDATE_DEFAULT_COUNTRY,\n  USER_UPDATE_FULLNAME,\n  USER_UPDATE_GENDER,\n  USER_UPDATE_USERNAME,\n} from './constants';\nimport { loadCarParametersAttempt, loadCarParametersReset } from '../car/actions';\nimport { UserInfo, UserInfoRequiredForAuth } from '../../interfaces/UserInfo';\n\n\nfunction* redirectToPageByRole() {\n  const userInfo = yield select(userInfoSelector);\n  yield put(push(UrlService.detectPageByUserInfo(userInfo)));\n}\n\nfunction* signinUserAttemptSaga(action: signinUserAttemptAction) {\n  const { username, password } = action.payload;\n  const url = `${backendEndpoint}/auth/login`;\n\n  try {\n    const loginInfo: ResponseLoginInfo = yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n    });\n    const userInfo = userInfoAdapter(loginInfo);\n    yield put(signinUserSuccess(userInfo));\n  } catch (e) {\n    yield put(signinUserError());\n  }\n}\n\nfunction* signinUserSuccessSaga() {\n  yield call(updateUserInfoLocallySaga);\n  yield call(redirectToPageByRole);\n  yield put(loadCarParametersAttempt());\n}\n\nfunction* signoutUserSuccessSaga() {\n  yield put(loadCarParametersReset());\n  yield call(LocalStorageService.removeUserInfo);\n  yield call(redirectToPageByRole);\n}\n\nfunction* signoutUserAttemptSaga() {\n  const url = `${backendEndpoint}/auth/logout`;\n  const accessToken = yield select(userAccessTokenSelector);\n  if (!accessToken) {\n    yield put(userSignOutSuccess());\n    return;\n  }\n\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n    });\n    yield put(userSignOutSuccess());\n  } catch (e) {\n    yield put(action(USER_SIGN_OUT_ERROR));\n  }\n\n  yield call(LocalStorageService.removeUserInfo);\n}\n\nfunction* loadUserInfoByAccessToken() {\n  const userId = yield select(userIdSelector);\n\n  try {\n    const userInfo: UserInfo = yield call(requestToFreeParkingsAPI, `${backendEndpoint}/users/${userId}`);\n    yield put(initUserInfoOnLoad(userInfo));\n  } catch (e) {\n    yield put(userSignOutSuccess());\n  }\n}\n\nfunction* initUserInfoOnLoadSaga() {\n  const userInfoRequiredForAuth: UserInfoRequiredForAuth | null = yield call(LocalStorageService.getUserInfoRequiredForAuth);\n\n  if (userInfoRequiredForAuth && userInfoRequiredForAuth.accessToken) {\n    yield put(initUserAuthInfoOnLoad(userInfoRequiredForAuth));\n    yield call(loadUserInfoByAccessToken);\n    yield put(loadCarParametersAttempt());\n  } else {\n    yield call(signoutUserSuccessSaga);\n  }\n}\n\nfunction* signupUserAttemptSaga(action: signupUserAttemptAction) {\n  const { username, password } = action.payload;\n  const url = `${backendEndpoint}/auth/signup`;\n\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n    });\n    yield put(signupUserSuccess());\n  } catch (e) {\n    const errorData = yield e.json();\n    const errorMessage = signupErrorAdapter(errorData);\n    yield put(signupUserError(errorMessage));\n  }\n}\n\nfunction* signupUserSuccessSaga() {\n  alert('signed up successfully');\n  yield put(push(UrlService.loginPageUrl));\n}\n\nfunction* updatePersonalInfoField(key: string, value: string) {\n  const userId = yield select(userIdSelector);\n  const url = `${backendEndpoint}/users/${userId}`;\n\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n      body: JSON.stringify({ [key]: value }),\n    });\n    yield call(updateUserInfoLocallySaga);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction* updateAvatarSaga(action: updateAvatarAction) {\n  yield call(updatePersonalInfoField, 'imageUrl', action.payload);\n}\n\nfunction* updateUsernameSaga(action: updateUsernameAction) {\n  yield call(updatePersonalInfoField, 'username', action.payload);\n}\n\nfunction* updateFullnameSaga(action: updateFullnameAction) {\n  yield call(updatePersonalInfoField, 'fullname', action.payload);\n}\n\nfunction* updateGenderSaga(action: updateGenderAction) {\n  yield call(updatePersonalInfoField, 'gender', action.payload);\n}\n\nfunction* updateDefaultCountrySaga(action: updateDefaultCountryAction) {\n  yield call(updatePersonalInfoField, 'defaultCountry', action.payload);\n}\n\nconst defaultLoginPageSaga = function* () {\n  yield all([\n    takeLatest(USER_SIGN_IN_ATTEMPT, signinUserAttemptSaga),\n    takeLatest(USER_SIGN_IN_SUCCESS, signinUserSuccessSaga),\n    takeLatest(USER_SIGN_OUT_ATTEMPT, signoutUserAttemptSaga),\n    takeLatest(USER_SIGN_OUT_SUCCESS, signoutUserSuccessSaga),\n    takeLatest(USER_SIGN_UP_ATTEMPT, signupUserAttemptSaga),\n    takeLatest(USER_SIGN_UP_SUCCESS, signupUserSuccessSaga),\n    takeLatest(USER_UPDATE_AVATAR, updateAvatarSaga),\n    takeLatest(USER_UPDATE_USERNAME, updateUsernameSaga),\n    takeLatest(USER_UPDATE_FULLNAME, updateFullnameSaga),\n    takeLatest(USER_UPDATE_GENDER, updateGenderSaga),\n    takeLatest(USER_UPDATE_DEFAULT_COUNTRY, updateDefaultCountrySaga),\n    yield call(initUserInfoOnLoadSaga),\n  ]);\n};\n\nexport default defaultLoginPageSaga;\n","import isObject from 'lodash/isObject';\n\nimport { CarInfo } from '../../interfaces/CarInfo';\n\n\nexport function prepareCarInfo(rawCarInfo: any): CarInfo {\n  if (!rawCarInfo || !isObject(rawCarInfo)) {\n    return {};\n  }\n\n  return rawCarInfo;\n}\n","import { all, call, put, select, takeLatest } from 'redux-saga/effects';\n\nimport { carPageIsCachedSelector } from './selectors';\nimport { requestToFreeParkingsAPI } from '../../services/Authentication.service';\nimport { backendEndpoint } from '../../constants/backend';\nimport { userIdSelector } from '../userState/selectors';\nimport {\n  loadCarManufacturersAttempt, loadCarManufacturersError, loadCarManufacturersSuccess,\n  loadCarParametersError,\n  loadCarParametersSuccess,\n  updateCarParameterValueAttemptAction,\n  updateCarParameterValueError,\n  updateCarParameterValueSuccess,\n} from './actions';\nimport { prepareCarInfo } from './adapters';\nimport { LOAD_CAR_PARAMETERS_ATTEMPT, UPDATE_CAR_PARAMETER_VALUE_ATTEMPT } from './constants';\n\n\nfunction* loadCarDataIfAbsent() {\n  const carPageIsCached = yield select(carPageIsCachedSelector);\n  const userId = yield select(userIdSelector);\n  if (carPageIsCached) {\n    return;\n  }\n\n  try {\n    const rawCarInfo = yield call(requestToFreeParkingsAPI, `${backendEndpoint}/users/${userId}/car`);\n    const preparedCarInfo = prepareCarInfo(rawCarInfo);\n    yield put(loadCarParametersSuccess(preparedCarInfo));\n  } catch(err) {\n    yield put(loadCarParametersError());\n  }\n}\n\nfunction* updateCarParameterValueSaga(action: updateCarParameterValueAttemptAction) {\n  const userId = yield select(userIdSelector);\n  try {\n    yield call(requestToFreeParkingsAPI, `${backendEndpoint}/users/${userId}/car`, {\n      method: 'POST',\n      body: JSON.stringify({\n        [action.payload.paramKey]: action.payload.paramValue,\n      }),\n    });\n    yield put(updateCarParameterValueSuccess(action.payload));\n  } catch(err) {\n    yield put(updateCarParameterValueError());\n  }\n}\n\nfunction* loadCarManufacturers() {\n  try {\n    yield put(loadCarManufacturersAttempt());\n    const manufacturersList: string[] = yield call(requestToFreeParkingsAPI, `${backendEndpoint}/cars/manufacturers`);\n    yield put(loadCarManufacturersSuccess(manufacturersList));\n  } catch(err) {\n    yield put(loadCarManufacturersError());\n  }\n}\n\n\nexport default function* defaultCarPageSaga() {\n  yield all([\n    yield takeLatest(LOAD_CAR_PARAMETERS_ATTEMPT, loadCarDataIfAbsent),\n    yield takeLatest(UPDATE_CAR_PARAMETER_VALUE_ATTEMPT, updateCarParameterValueSaga),\n    yield call(loadCarManufacturers),\n  ]);\n};\n","import { all, call, put, takeLatest } from 'redux-saga/effects';\n\nimport * as actions from './actions';\nimport * as constants from './constants';\nimport { UserInfo } from '../../interfaces/UserInfo';\nimport { backendEndpoint } from '../../constants/backend';\nimport { loadAllUsersError, loadAllUsersSuccess, setUserRoleError, setUserRoleSuccess } from './actions';\nimport { requestToFreeParkingsAPI } from '../../services/Authentication.service';\n\n\nfunction* loadAllUsersSaga() {\n  const url = `${backendEndpoint}/users`;\n  try {\n    const allUsers: UserInfo[] = yield call(requestToFreeParkingsAPI, url);\n    yield put(loadAllUsersSuccess(allUsers));\n  } catch(e) {\n    yield put(loadAllUsersError());\n  }\n}\n\nfunction* setUserRoleSaga(action: actions.setUserRoleAttemptAction) {\n  const url = `${backendEndpoint}/users/${action.payload.id}`;\n  try {\n    yield call(requestToFreeParkingsAPI, url, {\n      method: 'POST',\n      body: JSON.stringify({ role: action.payload.role }),\n    });\n    yield put(setUserRoleSuccess(action.payload.id, action.payload.role));\n  } catch(e) {\n    yield put(setUserRoleError());\n  }\n}\n\nexport default function* defaultAllUsersSaga() {\n  yield all([\n    takeLatest(constants.LOAD_ALL_USERS_ATTEMPT, loadAllUsersSaga),\n    takeLatest(constants.SET_USER_ROLE_ATTEMPT, setUserRoleSaga),\n  ]);\n}\n","import { all } from 'redux-saga/effects';\n\nimport defaultParkingsSaga from './parkings/saga';\nimport defaultLoginPageSaga from './userState/saga';\nimport defaultCarPageSaga from './car/saga';\nimport defaultParkingSettingsSaga from './parkingSettings/saga';\nimport defaultAllUsersSaga from './allUsers/saga';\n\n\nfunction* initSaga() {\n  yield all([\n    defaultParkingsSaga(),\n    defaultLoginPageSaga(),\n    defaultCarPageSaga(),\n    defaultParkingSettingsSaga(),\n    defaultAllUsersSaga(),\n  ]);\n}\n\nexport default initSaga;\n","import * as BaseConfigConstants from './BaseConfigConstants';\nimport { BaseConfigAction } from './BaseConfigActions';\n\n\nexport interface BaseConfigState {\n  readonly parkingSearchRadius: number,\n  readonly startPointLat: number,\n  readonly startPointLon: number,\n  readonly defaultZoomLevel: number,\n  readonly sessionUid: string,\n  readonly isSidebarOpen: boolean,\n}\n\nexport const BaseConfigInitialState: BaseConfigState = {\n  parkingSearchRadius: BaseConfigConstants.INITIAL_SEARCH_RADIUS,\n  startPointLat: BaseConfigConstants.KYIV_CENTER_LAT,\n  startPointLon: BaseConfigConstants.KYIV_CENTER_LON,\n  defaultZoomLevel: 7,\n  sessionUid: String(Math.random()).slice(2),\n  isSidebarOpen: false,\n};\n\n\nexport default function baseConfigReducer(\n  state: BaseConfigState = BaseConfigInitialState,\n  action: BaseConfigAction,\n): BaseConfigState {\n  switch (action.type) {\n    case BaseConfigConstants.BASE_CONFIG_RADIUS_SET: {\n      return {\n        ...state,\n        parkingSearchRadius: action.payload,\n      };\n    }\n    case BaseConfigConstants.BASE_CONFIG_RADIUS_RESET: {\n      return {\n        ...state,\n        parkingSearchRadius: BaseConfigInitialState.parkingSearchRadius,\n      };\n    }\n    case BaseConfigConstants.BASE_CONFIG_OPEN_SIDEBAR: {\n      return {\n        ...state,\n        isSidebarOpen: true,\n      };\n    }\n    case BaseConfigConstants.BASE_CONFIG_CLOSE_SIDEBAR: {\n      return {\n        ...state,\n        isSidebarOpen: false,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import uniqBy from 'lodash/uniqBy';\n\nimport {\n  CHANGE_CENTER_LOCATION,\n  PARKINGS_REQUEST_FOR_FETCH,\n  PARKINGS_FETCH_SUCCESS,\n  PARKINGS_FETCH_START,\n  CHECK_PARKINGS_UPDATES_SUCCESS,\n  DELETE_PARKING,\n  DELETE_ALL_FREE_SLOTS,\n  CHANGE_ZOOM_LEVEL,\n  POST_PARKING_ATTEMPT,\n  POST_PARKING_SUCCESS,\n} from './constants';\nimport { Actions } from './actions';\nimport { BaseConfigInitialState } from '../../containers/BaseConfigPage/BaseConfigReducer';\nimport { Parking } from '../../interfaces/Parking';\n\n\nexport interface ParkingsPageState {\n  readonly centerLat: number,\n  readonly centerLon: number,\n  readonly zoomLevel: number,\n  readonly lastParkingsCheckTimestamp: number,\n  readonly lastParkingsCheckUpdatesCount: number,\n  readonly isFetchInProgress: boolean,\n  readonly wasFetchPerformed: boolean,\n  readonly allParkings: Parking[],\n  readonly freeParkings: Parking[],\n}\n\nexport const ParkingsPageInitialState: ParkingsPageState = {\n  centerLat: BaseConfigInitialState.startPointLat,\n  centerLon: BaseConfigInitialState.startPointLon,\n  zoomLevel: BaseConfigInitialState.defaultZoomLevel,\n  lastParkingsCheckTimestamp: 0,\n  lastParkingsCheckUpdatesCount: 0,\n  isFetchInProgress: false,\n  wasFetchPerformed: false,\n  allParkings: [],\n  freeParkings: [],\n};\n\n\nexport default function reducer(\n  state: ParkingsPageState = ParkingsPageInitialState,\n  action: Actions,\n): ParkingsPageState {\n  switch (action.type) {\n    case CHANGE_CENTER_LOCATION: {\n      return {\n        ...state,\n        centerLat: action.payload.lat,\n        centerLon: action.payload.lon,\n        lastParkingsCheckTimestamp: ParkingsPageInitialState.lastParkingsCheckTimestamp,\n        lastParkingsCheckUpdatesCount: ParkingsPageInitialState.lastParkingsCheckUpdatesCount,\n      };\n    }\n    case CHANGE_ZOOM_LEVEL: {\n      return {\n        ...state,\n        zoomLevel: action.payload,\n      }\n    }\n    case PARKINGS_REQUEST_FOR_FETCH: {\n      return {\n        ...state,\n        isFetchInProgress: true,\n      };\n    }\n    case PARKINGS_FETCH_START: {\n      return {\n        ...state,\n        wasFetchPerformed: true,\n      };\n    }\n    case PARKINGS_FETCH_SUCCESS: {\n      return {\n        ...state,\n        allParkings: uniqBy([\n          ...state.allParkings,\n          ...action.payload,\n        ], 'id'),\n        isFetchInProgress: false,\n      };\n    }\n    case POST_PARKING_ATTEMPT: {\n      return {\n        ...state,\n        isFetchInProgress: true,\n      };\n    }\n    case POST_PARKING_SUCCESS: {\n      return {\n        ...state,\n        allParkings: uniqBy([\n          action.payload,\n          ...state.allParkings,\n        ], 'id'),\n        isFetchInProgress: false,\n      };\n    }\n    case CHECK_PARKINGS_UPDATES_SUCCESS: {\n      return {\n        ...state,\n        lastParkingsCheckTimestamp: action.payload.timestamp,\n        lastParkingsCheckUpdatesCount: action.payload.updatesCount,\n        isFetchInProgress: false,\n      };\n    }\n    case DELETE_PARKING: {\n      return {\n        ...state,\n        allParkings: state.allParkings.filter(({id}) => id !== action.payload),\n      }\n    }\n    case DELETE_ALL_FREE_SLOTS: {\n      return {\n        ...state,\n        freeParkings: ParkingsPageInitialState.freeParkings,\n        lastParkingsCheckTimestamp: ParkingsPageInitialState.lastParkingsCheckTimestamp,\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { CarInfo } from '../../interfaces/CarInfo';\nimport { CarAction } from './actions';\nimport {\n  LOAD_CAR_MANUFACTURERS_SUCCESS,\n  LOAD_CAR_PARAMETERS_ATTEMPT,\n  LOAD_CAR_PARAMETERS_ERROR,\n  LOAD_CAR_PARAMETERS_RESET,\n  LOAD_CAR_PARAMETERS_SUCCESS, UPDATE_CAR_PARAMETER_VALUE_ATTEMPT,\n} from './constants';\n\n\nexport interface CarPageOwnProps {\n  isInProgress: boolean,\n  isError: boolean,\n  isCached: boolean,\n  carManufacturers: string[],\n  carInfo: CarInfo,\n}\n\nexport const carPageInitialState: CarPageOwnProps = {\n  isInProgress: false,\n  isError: false,\n  isCached: false,\n  carManufacturers: [],\n  carInfo: {},\n};\n\nexport default function carPageReducer(\n  state: CarPageOwnProps = carPageInitialState,\n  action: CarAction,\n): CarPageOwnProps {\n  switch (action.type) {\n    case UPDATE_CAR_PARAMETER_VALUE_ATTEMPT: {\n      return {\n        ...state,\n        carInfo: {\n          ...state.carInfo,\n          [action.payload.paramKey]: action.payload.paramValue,\n        }\n      };\n    }\n    case LOAD_CAR_PARAMETERS_ATTEMPT: {\n      return {\n        ...state,\n        isInProgress: true,\n        isError: false,\n      };\n    }\n    case LOAD_CAR_PARAMETERS_SUCCESS: {\n      return {\n        ...state,\n        isInProgress: false,\n        isError: false,\n        isCached: true,\n        carInfo: action.payload,\n      };\n    }\n    case LOAD_CAR_PARAMETERS_ERROR: {\n      return {\n        ...state,\n        isInProgress: false,\n        isError: true,\n      };\n    }\n    case LOAD_CAR_PARAMETERS_RESET: {\n      return carPageInitialState;\n    }\n    case LOAD_CAR_MANUFACTURERS_SUCCESS: {\n      return {\n        ...state,\n        carManufacturers: action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import * as constants from './constants';\nimport { ParkingSettingsAction } from './actions';\n\n\nexport interface UserSettingsParkingPreferencesOwnProps {\n  areVoiceNotificationsEnabled: boolean,\n  isParkingAutoSearchEnabled: boolean,\n}\n\nconst parkingSettingsInitialState: UserSettingsParkingPreferencesOwnProps = {\n  areVoiceNotificationsEnabled: false,\n  isParkingAutoSearchEnabled: false,\n};\n\nexport default function parkingSettingsReducer(\n  state: UserSettingsParkingPreferencesOwnProps = parkingSettingsInitialState,\n  action: ParkingSettingsAction,\n): UserSettingsParkingPreferencesOwnProps {\n  switch (action.type) {\n    case constants.SET_VOICE_NOTIFICATIONS: {\n      return {\n        ...state,\n        areVoiceNotificationsEnabled: action.payload,\n      };\n    }\n    case constants.SET_CHECKING_PARKOPEDIA_UPDATES: {\n      return {\n        ...state,\n        isParkingAutoSearchEnabled: action.payload,\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import clone from 'lodash/clone';\nimport setWith from 'lodash/setWith';\n\nimport { UserInfo } from '../../interfaces/UserInfo';\nimport { AllUsersAction } from './actions';\nimport { LOAD_ALL_USERS_ATTEMPT, LOAD_ALL_USERS_ERROR, LOAD_ALL_USERS_SUCCESS, SET_USER_ROLE_SUCCESS } from './constants';\n\n\nexport interface AllUsersPageOwnProps {\n  users: UserInfo[],\n  isInProgress: boolean,\n}\n\nconst allUsersPageInitialState: AllUsersPageOwnProps = {\n  users: [],\n  isInProgress: false,\n};\n\nexport default function allUsersReducer(\n  state: AllUsersPageOwnProps = allUsersPageInitialState,\n  action: AllUsersAction,\n): AllUsersPageOwnProps {\n  switch (action.type) {\n    case LOAD_ALL_USERS_ATTEMPT: {\n      return {\n        ...state,\n        isInProgress: true,\n      };\n    }\n    case LOAD_ALL_USERS_SUCCESS: {\n      return {\n        ...state,\n        isInProgress: false,\n        users: action.payload,\n      };\n    }\n    case LOAD_ALL_USERS_ERROR: {\n      return {\n        ...state,\n        isInProgress: false,\n      };\n    }\n    case SET_USER_ROLE_SUCCESS: {\n      const userIndex = state.users.findIndex(({ id }) => id === action.payload.id);\n      const updatedUser: UserInfo = {\n        ...state.users[userIndex],\n        role: action.payload.role,\n      };\n      const updatedUsersList = setWith(clone(state.users), [userIndex], updatedUser, clone);\n      return {\n        ...state,\n        users: updatedUsersList,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { combineReducers } from 'redux';\nimport { History, LocationState } from 'history';\nimport { connectRouter, RouterState } from 'connected-react-router';\n\nimport baseConfigReducer, { BaseConfigState } from '../containers/BaseConfigPage/BaseConfigReducer';\nimport parkingsPageReducer, { ParkingsPageState } from './parkings/reducer';\nimport userReducer from './userState/reducer';\nimport { UserInfo } from '../interfaces/UserInfo';\nimport carPageReducer, { CarPageOwnProps } from './car/reducer';\nimport parkingSettingsReducer, { UserSettingsParkingPreferencesOwnProps } from './parkingSettings/reducer';\nimport allUsersReducer, { AllUsersPageOwnProps } from './allUsers/reducer';\n\n\nexport interface RootReducer {\n  router: RouterState,\n  config: BaseConfigState,\n  parkingsPage: ParkingsPageState,\n  user: UserInfo,\n  car: CarPageOwnProps,\n  parkingSettings: UserSettingsParkingPreferencesOwnProps,\n  allUsers: AllUsersPageOwnProps,\n}\n\nfunction createRootReducer(history: History<LocationState>) {\n  return combineReducers({\n    router: connectRouter(history),\n    config: baseConfigReducer,\n    parkingsPage: parkingsPageReducer,\n    user: userReducer,\n    car: carPageReducer,\n    parkingSettings: parkingSettingsReducer,\n    allUsers: allUsersReducer,\n  });\n}\n\nexport default createRootReducer;\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","interface GlobalStyledTheme {\n  readonly borderColor: string,\n}\n\nexport const lightTheme: GlobalStyledTheme = {\n  borderColor: '#dee1e4',\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport './index.global.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\nimport { history } from './store/history';\nimport { lightTheme } from './themes.styled';\n\n\nconst store = configureStore(history);\n\n// @ts-ignore\nconst renderApp = () => <App/>;\n\n// TS check hack\nconst AppConnected = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <ThemeProvider theme={lightTheme}>\n        {renderApp()}\n      </ThemeProvider>\n    </ConnectedRouter>\n  </Provider>\n);\n\nReactDOM.render(<AppConnected/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import createSagaMiddleware from 'redux-saga';\nimport { History, LocationState } from 'history';\nimport { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport initialSaga from './rootSaga';\nimport createRootReducer from './rootReducer';\n// import monitorReducersEnhancer from './monitorReducer'; // enable to investigate Redux performance\n\n\nexport default function configureStore(history: History<LocationState>) {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [routerMiddleware(history), sagaMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n  const enhancers = [middlewareEnhancer/*, monitorReducersEnhancer*/];\n  const composedEnhancers = composeWithDevTools(...enhancers);\n\n  const store = createStore(\n    createRootReducer(history),\n    undefined,\n    composedEnhancers,\n  );\n\n  sagaMiddleware.run(initialSaga);\n\n  return store;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderContainer\":\"Header_HeaderContainer__iAc1s\",\"HeaderLogo\":\"Header_HeaderLogo__1BKBJ\",\"HeaderLogoFull\":\"Header_HeaderLogoFull__1WZzz\",\"HeaderUserPanel\":\"Header_HeaderUserPanel__1Cchf\",\"HeaderUserPanelAvatar\":\"Header_HeaderUserPanelAvatar__3YE-h\",\"HeaderUserActionsDropdownList\":\"Header_HeaderUserActionsDropdownList__ktAyG\",\"HeaderUserActionsDropdownListDivider\":\"Header_HeaderUserActionsDropdownListDivider__rFL-X\",\"HeaderUserActionsDropdownLink\":\"Header_HeaderUserActionsDropdownLink__2mZow\"};","export const BASE_CONFIG_RADIUS_SET = 'config/BASE_CONFIG_RADIUS_SET';\nexport const BASE_CONFIG_RADIUS_RESET = 'config/BASE_CONFIG_RADIUS_RESET';\nexport const BASE_CONFIG_OPEN_SIDEBAR = 'config/BASE_CONFIG_OPEN_SIDEBAR';\nexport const BASE_CONFIG_CLOSE_SIDEBAR = 'config/BASE_CONFIG_CLOSE_SIDEBAR';\n\n/**\n * Used to detect whether to fetch parkings.\n * If user sees map with size g.t. [this value * 2], in other words, city zoom level,\n * do not send request for parkings.\n */\nexport const MAX_SEARCH_RADIUS_TO_FETCH = 1000;\n\nexport const INITIAL_SEARCH_RADIUS = 2000;\nexport const KYIV_CENTER_LAT = 50.4501;\nexport const KYIV_CENTER_LON = 30.5234;\n\nexport const DEFAULT_ZOOM_LEVEL = 16.248; // ~600m search radius\n","import { action, ActionType } from 'typesafe-actions';\n\nimport {\n  INIT_USER_AUTH_INFO_ON_LOAD,\n  INIT_USER_INFO_ON_LOAD,\n  NOT_ALLOWED_WITH_GUEST_PERMISSION,\n  USER_SIGN_IN_ATTEMPT,\n  USER_SIGN_IN_ERROR,\n  USER_SIGN_IN_SUCCESS,\n  USER_SIGN_OUT_ATTEMPT,\n  USER_SIGN_OUT_SUCCESS,\n  USER_SIGN_UP_ATTEMPT,\n  USER_SIGN_UP_ERROR,\n  USER_SIGN_UP_SUCCESS,\n} from '../../containers/App/constants';\nimport {\n  USER_UPDATE_AVATAR,\n  USER_UPDATE_DEFAULT_COUNTRY,\n  USER_UPDATE_FULLNAME,\n  USER_UPDATE_GENDER,\n  USER_UPDATE_USERNAME,\n} from './constants';\nimport { UserGenderType, UserInfo, UserInfoRequiredForAuth } from '../../interfaces/UserInfo';\n\n\nexport const initUserAuthInfoOnLoad = (userAuthInfo: UserInfoRequiredForAuth) => action(INIT_USER_AUTH_INFO_ON_LOAD, userAuthInfo);\nexport type initUserAuthInfoOnLoadAction = ActionType<typeof initUserAuthInfoOnLoad>;\nexport type initUserAuthInfoOnLoadActionCreator = (userAuthInfo: UserInfoRequiredForAuth) => initUserAuthInfoOnLoadAction;\n\nexport const initUserInfoOnLoad = (userInfo: UserInfo) => action(INIT_USER_INFO_ON_LOAD, userInfo);\nexport type initUserInfoOnLoadAction = ActionType<typeof initUserInfoOnLoad>;\nexport type initUserInfoOnLoadActionCreator = (userInfo: UserInfo) => initUserInfoOnLoadAction;\n\nexport const signinUserAttempt = (username: string, password: string) => action(USER_SIGN_IN_ATTEMPT, { username, password });\nexport type signinUserAttemptAction = ActionType<typeof signinUserAttempt>;\nexport type signinUserAttemptActionCreator = (username: string, password: string) => signinUserAttemptAction;\n\nexport const signinUserSuccess = (userInfo: UserInfo) => action(USER_SIGN_IN_SUCCESS, userInfo);\nexport type signinUserSuccessAction = ActionType<typeof signinUserSuccess>;\nexport type signinUserSuccessActionCreator = (userInfo: UserInfo) => signinUserSuccessAction;\n\nexport const signinUserError = () => action(USER_SIGN_IN_ERROR);\nexport type signinUserErrorAction = ActionType<typeof signinUserError>;\nexport type signinUserErrorActionCreator = () => signinUserErrorAction;\n\nexport const userSignOutAttempt = () => action(USER_SIGN_OUT_ATTEMPT);\nexport type userSignOutAttemptAction = ActionType<typeof userSignOutAttempt>;\nexport type userSignOutAttemptActionCreator = () => userSignOutAttemptAction;\n\nexport const userSignOutSuccess = () => action(USER_SIGN_OUT_SUCCESS);\nexport type userSignOutSuccessAction = ActionType<typeof userSignOutSuccess>;\nexport type userSignOutSuccessActionCreator = () => userSignOutSuccessAction;\n\nexport const signupUserAttempt = (username: string, password: string) => action(USER_SIGN_UP_ATTEMPT, { username, password });\nexport type signupUserAttemptAction = ActionType<typeof signupUserAttempt>;\nexport type signupUserAttemptActionCreator = (username: string, password: string) => signupUserAttemptAction;\n\nexport const signupUserSuccess = () => action(USER_SIGN_UP_SUCCESS);\nexport type signupUserSuccessAction = ActionType<typeof signupUserSuccess>;\nexport type signupUserSuccessActionCreator = () => signupUserSuccessAction;\n\nexport const signupUserError = (signupError: string | null) => action(USER_SIGN_UP_ERROR, { signupError });\nexport type signupUserErrorAction = ActionType<typeof signupUserError>;\nexport type signupUserErrorActionCreator = (signupError: string | null) => signupUserErrorAction;\n\nexport const notAllowedWithGuestPermission = () => action(NOT_ALLOWED_WITH_GUEST_PERMISSION);\nexport type notAllowedWithGuestPermissionAction = ActionType<typeof notAllowedWithGuestPermission>;\nexport type notAllowedWithGuestPermissionActionCreator = () => notAllowedWithGuestPermissionAction;\n\nexport const updateAvatar = (avatarUrl: string) => action(USER_UPDATE_AVATAR, avatarUrl);\nexport type updateAvatarAction = ActionType<typeof updateAvatar>;\nexport type updateAvatarActionCreator = (avatarUrl: string) => updateAvatarAction;\n\nexport const updateUsername = (username: string) => action(USER_UPDATE_USERNAME, username);\nexport type updateUsernameAction = ActionType<typeof updateUsername>;\nexport type updateUsernameActionCreator = (username: string) => updateUsernameAction;\n\nexport const updateFullname = (fullname: string) => action(USER_UPDATE_FULLNAME, fullname);\nexport type updateFullnameAction = ActionType<typeof updateFullname>;\nexport type updateFullnameActionCreator = (fullname: string) => updateFullnameAction;\n\nexport const updateGender = (gender: UserGenderType) => action(USER_UPDATE_GENDER, gender);\nexport type updateGenderAction = ActionType<typeof updateGender>;\nexport type updateGenderActionCreator = (gender: UserGenderType) => updateGenderAction;\n\nexport const updateDefaultCountry = (country: string) => action(USER_UPDATE_DEFAULT_COUNTRY, country);\nexport type updateDefaultCountryAction = ActionType<typeof updateDefaultCountry>;\nexport type updateDefaultCountryActionCreator = (country: string) => updateDefaultCountryAction;\n\nexport type UserAction = initUserAuthInfoOnLoadAction\n  | initUserInfoOnLoadAction\n  | signinUserAttemptAction\n  | signinUserSuccessAction\n  | signinUserErrorAction\n  | userSignOutAttemptAction\n  | userSignOutSuccessAction\n  | signupUserAttemptAction\n  | signupUserSuccessAction\n  | signupUserErrorAction\n  | updateAvatarAction\n  | updateUsernameAction\n  | updateFullnameAction\n  | updateGenderAction\n  | updateDefaultCountryAction\n;\n","import { action, ActionType } from 'typesafe-actions';\n\nimport {\n  LOAD_CAR_MANUFACTURERS_ATTEMPT, LOAD_CAR_MANUFACTURERS_ERROR, LOAD_CAR_MANUFACTURERS_SUCCESS,\n  LOAD_CAR_PARAMETERS_ATTEMPT,\n  LOAD_CAR_PARAMETERS_ERROR,\n  LOAD_CAR_PARAMETERS_RESET,\n  LOAD_CAR_PARAMETERS_SUCCESS,\n  UPDATE_CAR_PARAMETER_VALUE_ATTEMPT,\n  UPDATE_CAR_PARAMETER_VALUE_ERROR,\n  UPDATE_CAR_PARAMETER_VALUE_SUCCESS,\n} from './constants';\nimport { CarInfo } from '../../interfaces/CarInfo';\n\n\nexport const loadCarParametersAttempt = () => action(LOAD_CAR_PARAMETERS_ATTEMPT);\nexport type loadCarParametersAttemptAction = ActionType<typeof loadCarParametersAttempt>;\nexport type loadCarParametersAttemptActionCreator = () => loadCarParametersAttemptAction;\n\nexport const loadCarParametersSuccess = (carInfo: CarInfo) => action(LOAD_CAR_PARAMETERS_SUCCESS, carInfo);\nexport type loadCarParametersSuccessAction = ActionType<typeof loadCarParametersSuccess>;\nexport type loadCarParametersSuccessActionCreator = (carInfo: CarInfo) => loadCarParametersSuccessAction;\n\nexport const loadCarParametersError = () => action(LOAD_CAR_PARAMETERS_ERROR);\nexport type loadCarParametersErrorAction = ActionType<typeof loadCarParametersError>;\nexport type loadCarParametersErrorActionCreator = () => loadCarParametersErrorAction;\n\nexport const loadCarParametersReset = () => action(LOAD_CAR_PARAMETERS_RESET);\nexport type loadCarParametersResetAction = ActionType<typeof loadCarParametersReset>;\nexport type loadCarParametersResetActionCreator = () => loadCarParametersResetAction;\n\nexport const updateCarParameterValueAttempt = (paramKey: string, paramValue?: string | number) => action(UPDATE_CAR_PARAMETER_VALUE_ATTEMPT, { paramKey, paramValue });\nexport type updateCarParameterValueAttemptAction = ActionType<typeof updateCarParameterValueAttempt>;\nexport type updateCarParameterValueAttemptActionCreator = (paramKey: string, paramValue?: string | number) => updateCarParameterValueAttemptAction;\n\nexport const updateCarParameterValueSuccess = ({ paramKey, paramValue }: { paramKey: string, paramValue?: string | number }) => action(UPDATE_CAR_PARAMETER_VALUE_SUCCESS, { paramKey, paramValue });\nexport type updateCarParameterValueSuccessAction = ActionType<typeof updateCarParameterValueSuccess>;\nexport type updateCarParameterValueSuccessActionCreator = ({ paramKey, paramValue }: { paramKey: string, paramValue?: string | number }) => updateCarParameterValueSuccessAction;\n\nexport const updateCarParameterValueError = () => action(UPDATE_CAR_PARAMETER_VALUE_ERROR);\nexport type updateCarParameterValueErrorAction = ActionType<typeof updateCarParameterValueError>;\nexport type updateCarParameterValueErrorActionCreator = () => updateCarParameterValueErrorAction;\n\nexport const loadCarManufacturersAttempt = () => action(LOAD_CAR_MANUFACTURERS_ATTEMPT);\nexport type loadCarManufacturersAttemptAction = ActionType<typeof loadCarManufacturersAttempt>;\nexport type loadCarManufacturersAttemptActionCreator = () => loadCarManufacturersAttemptAction;\n\nexport const loadCarManufacturersSuccess = (manufacturersList: string[]) => action(LOAD_CAR_MANUFACTURERS_SUCCESS, manufacturersList);\nexport type loadCarManufacturersSuccessAction = ActionType<typeof loadCarManufacturersSuccess>;\nexport type loadCarManufacturersSuccessActionCreator = (manufacturersList: string[]) => loadCarManufacturersSuccessAction;\n\nexport const loadCarManufacturersError = () => action(LOAD_CAR_MANUFACTURERS_ERROR);\nexport type loadCarManufacturersErrorAction = ActionType<typeof loadCarManufacturersError>;\nexport type loadCarManufacturersErrorActionCreator = () => loadCarManufacturersErrorAction;\n\nexport type CarAction = loadCarParametersAttemptAction\n  | loadCarParametersSuccessAction\n  | loadCarParametersErrorAction\n  | loadCarParametersResetAction\n  | updateCarParameterValueAttemptAction\n  | updateCarParameterValueSuccessAction\n  | updateCarParameterValueErrorAction\n  | loadCarManufacturersAttemptAction\n  | loadCarManufacturersSuccessAction\n  | loadCarManufacturersErrorAction\n;\n","import { action, ActionType } from 'typesafe-actions';\n\nimport {\n  ASK_PERMISSION_FOR_GEO_LOCATION,\n  CHANGE_CENTER_LOCATION,\n  CHANGE_ZOOM_LEVEL,\n  CHECK_PARKINGS_UPDATES_REQUEST,\n  CHECK_PARKINGS_UPDATES_SUCCESS,\n  DELETE_ALL_FREE_SLOTS,\n  DELETE_PARKING,\n  DELETE_VISIBLE_FREE_SLOTS,\n  PARKINGS_FETCH_START,\n  PARKINGS_FETCH_SUCCESS,\n  PARKINGS_REQUEST_FOR_FETCH,\n  POST_PARKING_ATTEMPT,\n  POST_PARKING_ERROR,\n  POST_PARKING_SUCCESS,\n  SYNCHRONIZE_LAT_LON,\n} from './constants';\nimport { PreparedParkings } from '../../interfaces/ResponseParkings';\nimport { ParkingAvailability } from '../../interfaces/ParkingAvailability';\nimport { ClientParking, Parking } from '../../interfaces/Parking';\n\n\nexport const setParkingsPageCenter = (lat: number, lon: number) => action(CHANGE_CENTER_LOCATION, { lat, lon });\nexport type setParkingsPageCenterAction = ActionType<typeof setParkingsPageCenter>;\nexport type setParkingsPageCenterActionCreator = (lat: number, lon: number) => setParkingsPageCenterAction;\n\n\nexport const setZoomLevel = (zoomLevel: number) => action(CHANGE_ZOOM_LEVEL, zoomLevel);\nexport type setZoomLevelAction = ActionType<typeof setZoomLevel>;\nexport type setZoomLevelActionCreator = (zoomLevel: number) => setZoomLevelAction;\n\n\nexport const fetchParkingsStart = () => action(PARKINGS_FETCH_START);\nexport type fetchParkingsStartAction = ActionType<typeof fetchParkingsStart>;\nexport type fetchParkingsStartActionCreator = () => fetchParkingsStartAction;\n\n\nexport const fetchParkingsRequest = () => action(PARKINGS_REQUEST_FOR_FETCH);\nexport type fetchParkingsRequestAction = ActionType<typeof fetchParkingsRequest>;\nexport type fetchParkingsRequestActionCreator = () => fetchParkingsRequestAction;\n\n\nexport const synchronizeLatLon = () => action(SYNCHRONIZE_LAT_LON);\nexport type synchronizeLatLonAction = ActionType<typeof synchronizeLatLon>;\nexport type synchronizeLatLonActionCreator = () => synchronizeLatLonAction;\n\n\nexport const fetchParkingsSuccess = (parkings: PreparedParkings) => action(PARKINGS_FETCH_SUCCESS, parkings);\nexport type fetchParkingsSuccessAction = ActionType<typeof fetchParkingsSuccess>;\nexport type fetchParkingsSuccessActionCreator = () => fetchParkingsSuccessAction;\n\n\nexport const checkParkopediaUpdatesRequest = () => action(CHECK_PARKINGS_UPDATES_REQUEST);\nexport type checkParkopediaUpdatesRequestAction = ActionType<typeof checkParkopediaUpdatesRequest>;\nexport type checkParkopediaUpdatesRequestActionCreator = () => checkParkopediaUpdatesRequestAction;\n\n\nexport const checkParkopediaUpdatesSuccess = (parkopediaAvailability: ParkingAvailability) => action(CHECK_PARKINGS_UPDATES_SUCCESS, parkopediaAvailability);\nexport type checkParkopediaUpdatesSuccessAction = ActionType<typeof checkParkopediaUpdatesSuccess>;\nexport type checkParkopediaUpdatesSuccessActionCreator = (parkopediaAvailability: ParkingAvailability) => checkParkopediaUpdatesSuccessAction;\n\n\nexport const postParkingAttempt = (parkingCreated: ClientParking) => action(POST_PARKING_ATTEMPT, parkingCreated);\nexport type postParkingAttemptAction = ActionType<typeof postParkingAttempt>;\nexport type postParkingAttemptActionCreator = (parkingCreated: ClientParking) => postParkingAttemptAction;\n\n\nexport const postParkingSuccess = (parkingCreated: Parking) => action(POST_PARKING_SUCCESS, parkingCreated);\nexport type postParkingSuccessAction = ActionType<typeof postParkingSuccess>;\nexport type postParkingSuccessActionCreator = (parkingCreated: Parking) => postParkingSuccessAction;\n\n\nexport const postParkingError = () => action(POST_PARKING_ERROR);\nexport type postParkingErrorAction = ActionType<typeof postParkingError>;\nexport type postParkingErrorActionCreator = () => postParkingErrorAction;\n\n\nexport const deleteParking = (parkingId: string) => action(DELETE_PARKING, parkingId);\nexport type deleteParkingAction = ActionType<typeof deleteParking>;\nexport type deleteParkingActionCreator = (parkingId: string) => deleteParkingAction;\n\n\nexport const deleteAllFreeSlots = () => action(DELETE_ALL_FREE_SLOTS);\nexport type deleteAllFreeSlotsAction = ActionType<typeof deleteAllFreeSlots>;\nexport type deleteAllFreeSlotsActionCreator = () => deleteAllFreeSlotsAction;\n\n\nexport const deleteVisibleFreeSlots = () => action(DELETE_VISIBLE_FREE_SLOTS);\nexport type deleteVisibleFreeSlotsAction = ActionType<typeof deleteVisibleFreeSlots>;\nexport type deleteVisibleFreeSlotsActionCreator = () => deleteVisibleFreeSlotsAction;\n\n\nexport const askPermissionForGeoLocation = () => action(ASK_PERMISSION_FOR_GEO_LOCATION);\nexport type askPermissionForGeoLocationAction = ActionType<typeof askPermissionForGeoLocation>;\nexport type askPermissionForGeoLocationActionCreator = () => askPermissionForGeoLocationAction;\n\n\nexport type Actions = setParkingsPageCenterAction\n  | setZoomLevelAction\n  | fetchParkingsRequestAction\n  | fetchParkingsStartAction\n  | fetchParkingsSuccessAction\n  | checkParkopediaUpdatesRequestAction\n  | checkParkopediaUpdatesSuccessAction\n  | postParkingAttemptAction\n  | postParkingSuccessAction\n  | postParkingErrorAction\n  | deleteParkingAction\n  | deleteAllFreeSlotsAction\n  | deleteVisibleFreeSlotsAction\n  | askPermissionForGeoLocationAction\n  ;\n","import { createSelector } from 'reselect';\n\nimport { RootReducer } from '../../store/rootReducer';\nimport { MAX_SEARCH_RADIUS_TO_FETCH } from './BaseConfigConstants';\n\nexport const configDomainSelector = (state: RootReducer) => state.config;\n\nexport const searchRadiusSelector = createSelector(\n  [configDomainSelector],\n  (configDomain) => configDomain.parkingSearchRadius,\n);\n\nexport const isSearchRadiusTooBigSelector = createSelector(\n  [searchRadiusSelector],\n  (searchRadius) => searchRadius > MAX_SEARCH_RADIUS_TO_FETCH,\n);\n\nexport const defaultLatLonSelector = createSelector(\n  [configDomainSelector],\n  (configDomain) => ({\n    lat: configDomain.startPointLat,\n    lon: configDomain.startPointLon,\n  }),\n);\n\nexport const sessionUidSelector = createSelector(\n  [configDomainSelector],\n  (configDomain) => configDomain.sessionUid,\n);\n\nexport const isSidebarOpenSelector = createSelector(\n  [configDomainSelector],\n  (configDomain) => configDomain.isSidebarOpen,\n);\n","export const SET_VOICE_NOTIFICATIONS = 'SET_VOICE_NOTIFICATIONS';\n\nexport const START_CHECKING_PARKOPEDIA_UPDATES = 'Parkings Page/START_CHECKING_PARKOPEDIA_UPDATES';\nexport const STOP_CHECKING_PARKOPEDIA_UPDATES = 'Parkings Page/STOP_CHECKING_PARKOPEDIA_UPDATES';\nexport const SET_CHECKING_PARKOPEDIA_UPDATES = 'Parkings Page/SET_CHECKING_PARKOPEDIA_UPDATES';\n","import { action, ActionType } from 'typesafe-actions';\n\nimport * as constants from './constants';\nimport { UserInfo, UserRole } from '../../interfaces/UserInfo';\n\n\nexport const loadAllUsersAttempt = () => action(constants.LOAD_ALL_USERS_ATTEMPT);\nexport type loadAllUsersAttemptAction = ActionType<typeof loadAllUsersAttempt>;\nexport type loadAllUsersAttemptActionCreator = () => loadAllUsersAttemptAction;\n\n\nexport const loadAllUsersSuccess = (users: UserInfo[]) => action(constants.LOAD_ALL_USERS_SUCCESS, users);\nexport type loadAllUsersSuccessAction = ActionType<typeof loadAllUsersSuccess>;\nexport type loadAllUsersSuccessActionCreator = (users: UserInfo[]) => loadAllUsersSuccessAction;\n\n\nexport const loadAllUsersError = () => action(constants.LOAD_ALL_USERS_ERROR);\nexport type loadAllUsersErrorAction = ActionType<typeof loadAllUsersError>;\nexport type loadAllUsersErrorActionCreator = () => loadAllUsersErrorAction;\n\n\nexport const setUserRoleAttempt = (id: string, role: UserRole) => action(constants.SET_USER_ROLE_ATTEMPT, { id, role });\nexport type setUserRoleAttemptAction = ActionType<typeof setUserRoleAttempt>;\nexport type setUserRoleAttemptActionCreator = (id: string, role: UserRole) => setUserRoleAttemptAction;\n\n\nexport const setUserRoleSuccess = (id: string, role: UserRole) => action(constants.SET_USER_ROLE_SUCCESS, { id, role });\nexport type setUserRoleSuccessAction = ActionType<typeof setUserRoleSuccess>;\nexport type setUserRoleSuccessActionCreator = (id: string, role: UserRole) => setUserRoleSuccessAction;\n\n\nexport const setUserRoleError = () => action(constants.SET_USER_ROLE_ERROR);\nexport type setUserRoleErrorAction = ActionType<typeof setUserRoleError>;\nexport type setUserRoleErrorActionCreator = () => setUserRoleErrorAction;\n\n\nexport type AllUsersAction = loadAllUsersAttemptAction\n  | loadAllUsersSuccessAction\n  | loadAllUsersErrorAction\n  | setUserRoleAttemptAction\n  | setUserRoleSuccessAction\n  | setUserRoleErrorAction\n;\n","import styled from 'styled-components';\nimport { COLORS } from '../../constants/colors';\n\nexport const Tile = styled.section<{\n  withShadow?: boolean,\n  withRoundedCorners?: boolean,\n}>`\n  background-color: ${COLORS.colorAntiMain};\n  border-radius: ${({ withRoundedCorners }) => withRoundedCorners ? 15 : 0}px;\n  box-shadow: ${({ withShadow }) => withShadow ? '0 0 10px 0 rgba(90, 103, 121, 0.1)' : 'none'};\n`;\n\nexport const TileHeader = styled.header`\n  padding: 0 40px;\n  border-bottom: 1px solid ${COLORS.colorBorder};\n`;\n\nexport const TileBody = styled.main`\n  padding: 20px 40px;\n`;\n\n// @ts-ignore\nTile.defaultProps = {\n  withShadow: true,\n  withRoundedCorners: true,\n};\n","import { createSelector } from 'reselect';\nimport { Search } from 'history';\n\nimport { RootReducer } from '../rootReducer';\nimport { defaultLatLonSelector } from '../../containers/BaseConfigPage/BaseConfigSelectors';\nimport { Parking } from '../../interfaces/Parking';\nimport { RouterProps } from '../../interfaces/RouterProps';\n\nexport const routeLocationSelector = (state: RootReducer) => state.router.location;\nexport const routerPropsSelector = (_: RootReducer, routerProps: RouterProps) => routerProps;\n\nexport const routeParamsSelector = createSelector(\n  [routeLocationSelector],\n  paramsFromLocation,\n);\n\nfunction paramsFromLocation({ search }: { search: Search }) {\n  let params = null;\n\n  try {\n    params = JSON.parse(decodeURI(search.slice(1)));\n  } catch (e) {\n    params = search\n      .slice(1)\n      .split('&')\n      .reduce((params: any, currPair: string) => {\n        const [key, value] = currPair.split('=');\n        return {\n          ...params,\n          ...{ [key]: value },\n        };\n      }, {});\n  }\n\n  return params;\n}\n\nexport const latLonSelector = createSelector(\n  [routeParamsSelector, defaultLatLonSelector],\n  ({ lat: latFromUrl, lon: lonFromUrl }: { lat?: number, lon?: number }, defaultLatLon) => {\n    return ({\n      lat: isFinite(Number(latFromUrl)) ? Number(latFromUrl) : defaultLatLon.lat,\n      lon: isFinite(Number(lonFromUrl)) ? Number(lonFromUrl) : defaultLatLon.lon,\n    });\n  },\n);\n\nexport const zoomLevelSelector = (state: RootReducer) => state.parkingsPage.zoomLevel;\n\nconst parkingsPageDomainSelector = (state: RootReducer) => state.parkingsPage;\n\nexport const allParkingsSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.allParkings,\n);\n\nexport const freeParkingsSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.freeParkings,\n);\n\nexport const isParkingFetchInProgressSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.isFetchInProgress,\n);\n\nexport const wasFetchPerformedSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.wasFetchPerformed,\n);\n\nexport const centerCoordinatesSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => ({\n    lat: parkingsPageDomain.centerLat,\n    lon: parkingsPageDomain.centerLon,\n  }),\n);\n\nexport const centerCoordinatesLatitudeSelector = createSelector(\n  [centerCoordinatesSelector],\n  (centerCoordinates) => centerCoordinates.lat,\n);\n\nexport const centerCoordinatesLongitudeSelector = createSelector(\n  [centerCoordinatesSelector],\n  (centerCoordinates) => centerCoordinates.lon,\n);\n\nexport const lastParkingsCheckTimestampSelector = createSelector(\n  [parkingsPageDomainSelector],\n  (parkingsPageDomain) => parkingsPageDomain.lastParkingsCheckTimestamp,\n);\n\ntype selectedParkingSelector = (rr: RootReducer) => Parking | null;\n// @ts-ignore\nexport const selectedParkingSelector: selectedParkingSelector = createSelector(\n  [routerPropsSelector, allParkingsSelector],\n  (routerProps, allParkings) => {\n    const selectedParkingId = routerProps.match.params.selectedParkingId;\n    const selectedParking = allParkings.find(({ id }) => id === selectedParkingId) || null;\n    return selectedParking;\n  },\n);\n","interface colorsPalette {\n  readonly colorMainText: string,\n  readonly colorGreyPopup: string,\n  readonly colorAntiMain: string,\n  readonly colorExtraText: string,\n  readonly colorAccent1: string,\n  readonly colorAccent2: string,\n  readonly colorAccent3: string,\n  readonly colorAccent4: string,\n  readonly colorInactive: string,\n  readonly colorBorder: string,\n  readonly colorBorderError: string,\n  readonly pageBackground: string,\n}\n\nexport const COLORS: colorsPalette = {\n  colorMainText: '#333333',\n  colorGreyPopup: '#d2d2d2',\n  colorAntiMain: '#ffffff',\n  colorExtraText: '#757575',\n  colorAccent1: '#7ceb7e',\n  colorAccent2: '#ff4a4a',\n  colorAccent3: '#f1970f',\n  colorAccent4: '#29a1fb',\n  colorInactive: '#c9c9c9',\n  colorBorder: '#dee1e4',\n  colorBorderError: '#df4930',\n  pageBackground: '#f5f6fa',\n};\n","import { RootReducer } from '../rootReducer';\n\n\nexport const areVoiceNotificationsEnabledSelector = (state: RootReducer) => state.parkingSettings.areVoiceNotificationsEnabled;\n\nexport const isParkingAutoSearchEnabledSelector = (state: RootReducer) => state.parkingSettings.isParkingAutoSearchEnabled;\n"],"sourceRoot":""}